{
  "metadata": {
    "totalStrings": 3361,
    "extractedAt": "2025-07-30T03:48:49.271Z",
    "categories": {
      "UI Labels": 779,
      "Messages": 867,
      "Form Fields": 216,
      "Errors": 343,
      "Other": 1156
    }
  },
  "strings": {
    "p-6": "p-6",
    "p-8": "p-8",
    " d=": " d=",
    "w-1": "w-1",
    "w-2": "w-2",
    "w-4": "w-4",
    "w-6": "w-6",
    "w-8": "w-8",
    "h-2": "h-2",
    " r=": " r=",
    "p-5": "p-5",
    "h-1": "h-1",
    "h-3": "h-3",
    "P&I": "P&I",
    "N/A": "N/A",
    " MB": " MB",
    "ml-3": "ml-3",
    "mb-8": "mb-8",
    "mt-2": "mt-2",
    "mx-2": "mx-2",
    "mt-1": "mt-1",
    "ml-4": "ml-4",
    "mt-8": "mt-8",
    "mb-6": "mb-6",
    "mb-4": "mb-4",
    "mb-2": "mb-2",
    "ml-8": "ml-8",
    "mt-4": "mt-4",
    "mt-6": "mt-6",
    "tab1": "tab1",
    "w-10": "w-10",
    "w-12": "w-12",
    "w-16": "w-16",
    "w-20": "w-20",
    "w-24": "w-24",
    "mr-2": "mr-2",
    "pt-6": "pt-6",
    "mt-3": "mt-3",
    "mr-1": "mr-1",
    " cx=": " cx=",
    " cy=": " cy=",
    "h-80": "h-80",
    "mb-3": "mb-3",
    "pl-3": "pl-3",
    "pr-3": "pr-3",
    "py-2": "py-2",
    "/help": "/help",
    "/test": "/test",
    "user@": "user@",
    "en-US": "en-US",
    "mb-12": "mb-12",
    "pl-10": "pl-10",
    "pr-10": "pr-10",
    "utf-8": "utf-8",
    "test-1": "test-1",
    "test-2": "test-2",
    "/terms": "/terms",
    "/admin": "/admin",
    "flex-1": "flex-1",
    "/login": "/login",
    " size=": " size=",
    " role=": " role=",
    "fadeIn": "fadeIn",
    "onBlur": "onBlur",
    "_blank": "_blank",
    "/sw.js": "/sw.js",
    "red-50": "red-50",
    "{Enter}": "{Enter}",
    "valid-1": "valid-1",
    "h-6 w-6": "h-6 w-6",
    "h-4 w-4": "h-4 w-4",
    "h-5 w-5": "h-5 w-5",
    "w-4 h-4": "w-4 h-4",
    "w-6 h-6": "w-6 h-6",
    "demo123": "demo123",
    "Sign in": "Sign in",
    "option1": "option1",
    "Copied!": "Copied!",
    ": X,\n  ": ": X,\n  ",
    "Español": "Español",
    "w-5 h-5": "w-5 h-5",
    "w-3 h-3": "w-3 h-3",
    "scaleIn": "scaleIn",
    "h-8 w-8": "h-8 w-8",
    "Sign In": "Sign In",
    " // Don": " // Don",
    "red-100": "red-100",
    "red-500": "red-500",
    "red-600": "red-600",
    "red-800": "red-800",
    "blue-50": "blue-50",
    "user-123": "user-123",
    "hexToRgb": "hexToRgb",
    "/privacy": "/privacy",
    "/contact": "/contact",
    "API URL:": "API URL:",
    "lastName": "lastName",
    "isActive": "isActive",
    ", name: ": ", name: ",
    "admin123": "admin123",
    "/compare": "/compare",
    "mt-8 p-8": "mt-8 p-8",
    "Jane Doe": "Jane Doe",
    "/profile": "/profile",
    ",\n  sm: ": ",\n  sm: ",
    ",\n  md: ": ",\n  md: ",
    ",\n  lg: ": ",\n  lg: ",
    ",\n  xl: ": ",\n  xl: ",
    "loading:": "loading:",
    "text-2xl": "text-2xl",
    "text-3xl": "text-3xl",
    "onSubmit": "onSubmit",
    "onChange": "onChange",
    "min-w-48": "min-w-48",
    "scale(1)": "scale(1)",
    ", text: ": ", text: ",
    "User ID:": "User ID:",
    "loanTerm": "loanTerm",
    ")).join(": ")).join(",
    "green-50": "green-50",
    "blue-100": "blue-100",
    "blue-500": "blue-500",
    "blue-600": "blue-600",
    "blue-800": "blue-800",
    "user@.com": "user@.com",
    "some text": "some text",
    " as any, ": " as any, ",
    "space-y-8": "space-y-8",
    "space-y-3": "space-y-3",
    "space-x-4": "space-x-4",
    "next/link": "next/link",
    "space-y-6": "space-y-6",
    "firstName": "firstName",
    ", email: ": ", email: ",
    "ML-123456": "ML-123456",
    "space-y-4": "space-y-4",
    "space-y-1": "space-y-1",
    "space-y-2": "space-y-2",
    " viewBox=": " viewBox=",
    "/formulas": "/formulas",
    ", label: ": ", label: ",
    "Demo User": "Demo User",
    "NODE_ENV:": "NODE_ENV:",
    "previous:": "previous:",
    "slideInUp": "slideInUp",
    "opacity-0": "opacity-0",
    "max-w-2xl": "max-w-2xl",
    "max-w-4xl": "max-w-4xl",
    "h-12 w-12": "h-12 w-12",
    "Test step": "Test step",
    ": return ": ": return ",
    "userAgent": "userAgent",
    "]).split(": "]).split(",
    "camera=()": "camera=()",
    "green-100": "green-100",
    "green-500": "green-500",
    "green-600": "green-600",
    "green-800": "green-800",
    "yellow-50": "yellow-50",
    ", { name: ": ", { name: ",
    "scenario-1": "scenario-1",
    "Loading...": "Loading...",
    "wrong text": "wrong text",
    "use client": "use client",
    "Demo mode:": "Demo mode:",
    "/dashboard": "/dashboard",
    "use server": "use server",
    "nmlsNumber": "nmlsNumber",
    "bg-gray-50": "bg-gray-50",
    "flex gap-2": "flex gap-2",
    "CA, TX, FL": "CA, TX, FL",
    " clipRule=": " clipRule=",
    "Logo Usage": "Logo Usage",
    "Primary 50": "Primary 50",
    "Neutral 50": "Neutral 50",
    "John Smith": "John Smith",
    "helocLimit": "helocLimit",
    "HELOC Info": "HELOC Info",
    ": Home,\n  ": ": Home,\n  ",
    ": Info,\n  ": ": Info,\n  ",
    ": Save,\n  ": ": Save,\n  ",
    ": Menu,\n  ": ": Menu,\n  ",
    ": Plus,\n  ": ": Plus,\n  ",
    ",\n    md: ": ",\n    md: ",
    ",\n    lg: ": ",\n    lg: ",
    "next/image": "next/image",
    "h-8 w-auto": "h-8 w-auto",
    "insideLeft": "insideLeft",
    "-ml-1 mr-2": "-ml-1 mr-2",
    "ml-2 -mr-1": "ml-2 -mr-1",
    "opacity-25": "opacity-25",
    "bg-red-500": "bg-red-500",
    "Dark theme": "Dark theme",
    "helperText": "helperText",
    "scale(0.8)": "scale(0.8)",
    "pmiMonthly": "pmiMonthly",
    "Data size:": "Data size:",
    ") value = ": ") value = ",
    ").replace(": ").replace(",
    "primary-50": "primary-50",
    "neutral-50": "neutral-50",
    "yellow-100": "yellow-100",
    "yellow-400": "yellow-400",
    "yellow-500": "yellow-500",
    "yellow-800": "yellow-800",
    "Close modal": "Close modal",
    "next/server": "next/server",
    "Password123": "Password123",
    ", message: ": ", message: ",
    "Error type:": "Error type:",
    "/calculator": "/calculator",
    "mobilePhone": "mobilePhone",
    " : agent ? ": " : agent ? ",
    "/api/agents": "/api/agents",
    "companyName": "companyName",
    "Total Users": "Total Users",
    "ml-3 flex-1": "ml-3 flex-1",
    "ml-4 flex-1": "ml-4 flex-1",
    "callbackUrl": "callbackUrl",
    "password123": "password123",
    "newPassword": "newPassword",
    "Primary 100": "Primary 100",
    "Primary 200": "Primary 200",
    "Primary 300": "Primary 300",
    "Primary 400": "Primary 400",
    "Primary 500": "Primary 500",
    "Primary 600": "Primary 600",
    "Primary 700": "Primary 700",
    "Primary 800": "Primary 800",
    "Primary 900": "Primary 900",
    "Neutral 100": "Neutral 100",
    "Neutral 200": "Neutral 200",
    "Neutral 300": "Neutral 300",
    "Neutral 400": "Neutral 400",
    "Neutral 500": "Neutral 500",
    "Neutral 600": "Neutral 600",
    "Neutral 700": "Neutral 700",
    "Neutral 800": "Neutral 800",
    "Neutral 900": "Neutral 900",
    "bg-blue-500": "bg-blue-500",
    "bg-blue-100": "bg-blue-100",
    ": Users,\n  ": ": Users,\n  ",
    ": Minus,\n  ": ": Minus,\n  ",
    "space-y-1.5": "space-y-1.5",
    "Time saved:": "Time saved:",
    "h-12 w-auto": "h-12 w-auto",
    "h-16 w-auto": "h-16 w-auto",
    "h-24 w-auto": "h-24 w-auto",
    "Balance ($)": "Balance ($)",
    "w-2.5 h-2.5": "w-2.5 h-2.5",
    "slideInDown": "slideInDown",
    "slideInLeft": "slideInLeft",
    "\n        d=": "\n        d=",
    "Light theme": "Light theme",
    "chevronDown": "chevronDown",
    "scale(1.05)": "scale(1.05)",
    "neutral-900": "neutral-900",
    "neutral-100": "neutral-100",
    "neutral-600": "neutral-600",
    ")[0].split(": ")[0].split(",
    "api_request": "api_request",
    "primary-100": "primary-100",
    "primary-200": "primary-200",
    "primary-300": "primary-300",
    "primary-400": "primary-400",
    "primary-500": "primary-500",
    "primary-600": "primary-600",
    "primary-700": "primary-700",
    "primary-800": "primary-800",
    "primary-900": "primary-900",
    "neutral-200": "neutral-200",
    "neutral-300": "neutral-300",
    "neutral-400": "neutral-400",
    "neutral-500": "neutral-500",
    "neutral-700": "neutral-700",
    "neutral-800": "neutral-800",
    "text-red-800": "text-red-800",
    "Scenario API": "Scenario API",
    "New Scenario": "New Scenario",
    "password123!": "password123!",
    "Type here...": "Type here...",
    "localStorage": "localStorage",
    "Minimal Test": "Minimal Test",
    "Invalid Test": "Invalid Test",
    "currentColor": "currentColor",
    "Content-Type": "Content-Type",
    "Error stack:": "Error stack:",
    "Description:": "Description:",
    "API payload:": "API payload:",
    "text-red-600": "text-red-600",
    "h-4 w-4 mr-1": "h-4 w-4 mr-1",
    "companyPhone": "companyPhone",
    "companyEmail": "companyEmail",
    "primaryColor": "primaryColor",
    "Total Agents": "Total Agents",
    "Last 30 days": "Last 30 days",
    "Login error:": "Login error:",
    "next/headers": "next/headers",
    "Login failed": "Login failed",
    "/auth/signin": "/auth/signin",
    "AccessDenied": "AccessDenied",
    "/auth/signup": "/auth/signup",
    ", password: ": ", password: ",
    "w-4 h-4 mr-2": "w-4 h-4 mr-2",
    "ml-1 text-xs": "ml-1 text-xs",
    "w-5 h-5 mr-2": "w-5 h-5 mr-2",
    "w-4 h-4 mr-1": "w-4 h-4 mr-1",
    "text-xs mt-1": "text-xs mt-1",
    "Secondary 50": "Secondary 50",
    "bg-green-500": "bg-green-500",
    "bg-green-100": "bg-green-100",
    "text-red-500": "text-red-500",
    ": LogOut,\n  ": ": LogOut,\n  ",
    "HELOC Report": "HELOC Report",
    "helocBalance": "helocBalance",
    "insideBottom": "insideBottom",
    "ml-auto pl-3": "ml-auto pl-3",
    "text-red-400": "text-red-400",
    "text-red-700": "text-red-700",
    "slideInRight": "slideInRight",
    ", padding = ": ", padding = ",
    "ml-3 text-sm": "ml-3 text-sm",
    "System theme": "System theme",
    ",\n    icon: ": ",\n    icon: ",
    ",\n    href: ": ",\n    href: ",
    "/api/company": "/api/company",
    "calculateLTV": "calculateLTV",
    "\n      case ": "\n      case ",
    "Storage key:": "Storage key:",
    ", userId || ": ", userId || ",
    ",\n    name: ": ",\n    name: ",
    "interestRate": "interestRate",
    "PMI Warning:": "PMI Warning:",
    "secondary-50": "secondary-50",
    "Test Scenario": "Test Scenario",
    "jwt-token-123": "jwt-token-123",
    "user@example.": "user@example.",
    "Are you sure?": "Are you sure?",
    ")\n  })\n\n  it(": ")\n  })\n\n  it(",
    "flex-shrink-0": "flex-shrink-0",
    "api/calculate": "api/calculate",
    "Request body:": "Request body:",
    "/api/scenario": "/api/scenario",
    "Edit Scenario": "Edit Scenario",
    "text-blue-600": "text-blue-600",
    "text-blue-800": "text-blue-800",
    "text-blue-700": "text-blue-700",
    "/admin/agents": "/admin/agents",
    "translate-x-0": "translate-x-0",
    "p-6 space-y-4": "p-6 space-y-4",
    "md:col-span-2": "md:col-span-2",
    "text-gray-600": "text-gray-600",
    "Active Agents": "Active Agents",
    "}`.trim() || ": "}`.trim() || ",
    "demo-user-001": "demo-user-001",
    "Edit scenario": "Edit scenario",
    "Yes, Continue": "Yes, Continue",
    ",\n      day: ": ",\n      day: ",
    "Error Details": "Error Details",
    "Global Error:": "Global Error:",
    "Signing in...": "Signing in...",
    "text-gray-700": "text-gray-700",
    "text-gray-900": "text-gray-900",
    ",\n    email: ": ",\n    email: ",
    "Default Input": "Default Input",
    "Select Option": "Select Option",
    "bg-primary-50": "bg-primary-50",
    "Secondary 100": "Secondary 100",
    "Secondary 200": "Secondary 200",
    "Secondary 300": "Secondary 300",
    "Secondary 400": "Secondary 400",
    "Secondary 500": "Secondary 500",
    "Secondary 600": "Secondary 600",
    "Secondary 700": "Secondary 700",
    "Secondary 800": "Secondary 800",
    "Secondary 900": "Secondary 900",
    "bg-neutral-50": "bg-neutral-50",
    "demo-user-002": "demo-user-002",
    "demo-user-003": "demo-user-003",
    "Mortgage Info": "Mortgage Info",
    "bg-purple-500": "bg-purple-500",
    "bg-purple-100": "bg-purple-100",
    "text-gray-500": "text-gray-500",
    "text-gray-800": "text-gray-800",
    "monthlyIncome": "monthlyIncome",
    "e.g. $350,000": "e.g. $350,000",
    "text-blue-500": "text-blue-500",
    "\n        min=": "\n        min=",
    "\n        max=": "\n        max=",
    ": XCircle,\n  ": ": XCircle,\n  ",
    ": Printer,\n  ": ": Printer,\n  ",
    "Demo Scenario": "Demo Scenario",
    ";\n      case ": ";\n      case ",
    "Save Scenario": "Save Scenario",
    "Scenario Name": "Scenario Name",
    "text-blue-400": "text-blue-400",
    "bg-yellow-500": "bg-yellow-500",
    ",\n    pills: ": ",\n    pills: ",
    ",\n    solid: ": ",\n    solid: ",
    ",\n    label: ": ",\n    label: ",
    "translateY(0)": "translateY(0)",
    "translateX(0)": "translateX(0)",
    "isMIPRequired": "isMIPRequired",
    "valid numbers": "valid numbers",
    "Unknown error": "Unknown error",
    "ErrorBoundary": "ErrorBoundary",
    "serviceWorker": "serviceWorker",
    "Memory Usage:": "Memory Usage:",
    "microphone=()": "microphone=()",
    "propertyValue": "propertyValue",
    "secondary-100": "secondary-100",
    "secondary-200": "secondary-200",
    "secondary-300": "secondary-300",
    "secondary-400": "secondary-400",
    "secondary-500": "secondary-500",
    "secondary-600": "secondary-600",
    "secondary-700": "secondary-700",
    "secondary-800": "secondary-800",
    "secondary-900": "secondary-900",
    "Database error": "Database error",
    "Clear All Data": "Clear All Data",
    "Valid Scenario": "Valid Scenario",
    "Response data:": "Response data:",
    "Error message:": "Error message:",
    "No stack trace": "No stack trace",
    "Scenario name:": "Scenario name:",
    "Error details:": "Error details:",
    "/admin/company": "/admin/company",
    "phoneExtension": "phoneExtension",
    "text-green-600": "text-green-600",
    "companyWebsite": "companyWebsite",
    "companyAddress": "companyAddress",
    "companyLogoUrl": "companyLogoUrl",
    "secondaryColor": "secondaryColor",
    "HELOC, FHA, VA": "HELOC, FHA, VA",
    "User not found": "User not found",
    "mt-8 space-y-6": "mt-8 space-y-6",
    "flex space-x-2": "flex space-x-2",
    "space-y-2 mb-4": "space-y-2 mb-4",
    "Share scenario": "Share scenario",
    "flex space-x-3": "flex space-x-3",
    "font-mono ml-4": "font-mono ml-4",
    "font-bold mt-4": "font-bold mt-4",
    "w-full text-sm": "w-full text-sm",
    "bg-primary-100": "bg-primary-100",
    "ml-3 text-left": "ml-3 text-left",
    ",\n      hour: ": ",\n      hour: ",
    "Disabled Input": "Disabled Input",
    "Disabled input": "Disabled input",
    "bg-primary-200": "bg-primary-200",
    "bg-primary-300": "bg-primary-300",
    "bg-primary-400": "bg-primary-400",
    "bg-primary-500": "bg-primary-500",
    "bg-primary-600": "bg-primary-600",
    "bg-primary-700": "bg-primary-700",
    "bg-primary-800": "bg-primary-800",
    "bg-primary-900": "bg-primary-900",
    "bg-neutral-100": "bg-neutral-100",
    "bg-neutral-200": "bg-neutral-200",
    "bg-neutral-300": "bg-neutral-300",
    "bg-neutral-400": "bg-neutral-400",
    "bg-neutral-500": "bg-neutral-500",
    "bg-neutral-600": "bg-neutral-600",
    "bg-neutral-700": "bg-neutral-700",
    "bg-neutral-800": "bg-neutral-800",
    "bg-neutral-900": "bg-neutral-900",
    "monthlyPayment": "monthlyPayment",
    "Confirm Action": "Confirm Action",
    "M5 13l4 4L19 7": "M5 13l4 4L19 7",
    "Clear all logs": "Clear all logs",
    "mt-4 space-y-3": "mt-4 space-y-3",
    "mt-3 space-y-2": "mt-3 space-y-2",
    "group relative": "group relative",
    " || field === ": " || field === ",
    " ? (value === ": " ? (value === ",
    " && value !== ": " && value !== ",
    ": Calendar,\n  ": ": Calendar,\n  ",
    ": Settings,\n  ": ": Settings,\n  ",
    ": FileText,\n  ": ": FileText,\n  ",
    "M19 9l-7 7-7-7": "M19 9l-7 7-7-7",
    "HELOC Strategy": "HELOC Strategy",
    "text-green-700": "text-green-700",
    "text-green-400": "text-green-400",
    "text-green-800": "text-green-800",
    "ValidatedInput": "ValidatedInput",
    "Invalid format": "Invalid format",
    "CalculatorForm": "CalculatorForm",
    " },\n    { bg: ": " },\n    { bg: ",
    ",\n    action: ": ",\n    action: ",
    "Load Complete:": "Load Complete:",
    "geolocation=()": "geolocation=()",
    "hoaFeesMonthly": "hoaFeesMonthly",
    ", () => {\n  it(": ", () => {\n  it(",
    "New Description": "New Description",
    "DELETE ALL DATA": "DELETE ALL DATA",
    ",\n    message: ": ",\n    message: ",
    ");\n  });\n\n  it(": ");\n  });\n\n  it(",
    "next/navigation": "next/navigation",
    "next-auth/react": "next-auth/react",
    "Test Scenario 1": "Test Scenario 1",
    "Test Scenario 2": "Test Scenario 2",
    "monthlyExpenses": "monthlyExpenses",
    "text-purple-600": "text-purple-600",
    "text-purple-800": "text-purple-800",
    "text-purple-700": "text-purple-700",
    "yearsExperience": "yearsExperience",
    "p-8 text-center": "p-8 text-center",
    "flex-1 lg:ml-64": "flex-1 lg:ml-64",
    "Legal documents": "Legal documents",
    "Agent not found": "Agent not found",
    "M15 19l-7-7 7-7": "M15 19l-7-7 7-7",
    "Clear selection": "Clear selection",
    "Delete scenario": "Delete scenario",
    "Delete Scenario": "Delete Scenario",
    ",\n      month: ": ",\n      month: ",
    "Page navigation": "Page navigation",
    "currentPassword": "currentPassword",
    "confirmPassword": "confirmPassword",
    "bg-secondary-50": "bg-secondary-50",
    ", description: ": ", description: ",
    "Auto-calculated": "Auto-calculated",
    "\n          max=": "\n          max=",
    "ml-2 opacity-90": "ml-2 opacity-90",
    "text-orange-500": "text-orange-500",
    "text-yellow-500": "text-yellow-500",
    "\n          min=": "\n          min=",
    ": ChartLine,\n  ": ": ChartLine,\n  ",
    ": BarChart3,\n  ": ": BarChart3,\n  ",
    ": RefreshCw,\n  ": ": RefreshCw,\n  ",
    "Select language": "Select language",
    "Savings amount:": "Savings amount:",
    "hidden lg:block": "hidden lg:block",
    "text-yellow-400": "text-yellow-400",
    "-mx-1.5 -my-1.5": "-mx-1.5 -my-1.5",
    "text-yellow-800": "text-yellow-800",
    "text-yellow-700": "text-yellow-700",
    "max-w-full mx-4": "max-w-full mx-4",
    "Navigation menu": "Navigation menu",
    "Main navigation": "Main navigation",
    ",\n      label: ": ",\n      label: ",
    "text-neutral-50": "text-neutral-50",
    "Exactly 80% LTV": "Exactly 80% LTV",
    "positive values": "positive values",
    "ValidationError": "ValidationError",
    "calculationType": "calculationType",
    " },\n    { key: ": " },\n    { key: ",
    "SW registered: ": "SW registered: ",
    ") {\n    return ": ") {\n    return ",
    "base-uri 'self'": "base-uri 'self'",
    "X-Frame-Options": "X-Frame-Options",
    "Referrer-Policy": "Referrer-Policy",
    "ltvBasedWarning": "ltvBasedWarning",
    "Button Component": "Button Component",
    "test@example.com": "test@example.com",
    "Test Description": "Test Description",
    "john@example.com": "john@example.com",
    "MyStr0ngP@ssw0rd": "MyStr0ngP@ssw0rd",
    "C0mpl3x!P@ssw0rd": "C0mpl3x!P@ssw0rd",
    "user.example.com": "user.example.com",
    "HELOC Edge Cases": "HELOC Edge Cases",
    "Test description": "Test description",
    "getDemoScenarios": "getDemoScenarios",
    "Invalid Scenario": "Invalid Scenario",
    "monthlyNetIncome": "monthlyNetIncome",
    "text-center mb-8": "text-center mb-8",
    "mt-6 text-center": "mt-6 text-center",
    "application/json": "application/json",
    "Response status:": "Response status:",
    "next-intl/server": "next-intl/server",
    "next/font/google": "next/font/google",
    "Company Settings": "Company Settings",
    "User Assignments": "User Assignments",
    "/admin/documents": "/admin/documents",
    "hover:bg-gray-50": "hover:bg-gray-50",
    " },\n      { id: ": " },\n      { id: ",
    "Registered users": "Registered users",
    "Unassigned Users": "Unassigned Users",
    "Recent Scenarios": "Recent Scenarios",
    "/api/admin/stats": "/api/admin/stats",
    "Invalid agent ID": "Invalid agent ID",
    "Login successful": "Login successful",
    "flex items-start": "flex items-start",
    "font-medium mb-1": "font-medium mb-1",
    "Enter your email": "Enter your email",
    "text-center py-8": "text-center py-8",
    "Confirm Deletion": "Confirm Deletion",
    ", {\n      year: ": ", {\n      year: ",
    "text-primary-900": "text-primary-900",
    "text-primary-800": "text-primary-800",
    "demo@example.com": "demo@example.com",
    "jane@example.com": "jane@example.com",
    "flex justify-end": "flex justify-end",
    ",\n    lastName: ": ",\n    lastName: ",
    ",\n      minute: ": ",\n      minute: ",
    "Input with Error": "Input with Error",
    "Default Checkbox": "Default Checkbox",
    "Checked Checkbox": "Checked Checkbox",
    "Choose an option": "Choose an option",
    "bg-secondary-100": "bg-secondary-100",
    "bg-secondary-200": "bg-secondary-200",
    "bg-secondary-300": "bg-secondary-300",
    "bg-secondary-400": "bg-secondary-400",
    "bg-secondary-500": "bg-secondary-500",
    "bg-secondary-600": "bg-secondary-600",
    "bg-secondary-700": "bg-secondary-700",
    "bg-secondary-800": "bg-secondary-800",
    "bg-secondary-900": "bg-secondary-900",
    ");\n    setError(": ");\n    setError(",
    "Open Debug Panel": "Open Debug Panel",
    "\n          step=": "\n          step=",
    ": Calculator,\n  ": ": Calculator,\n  ",
    ": DollarSign,\n  ": ": DollarSign,\n  ",
    ": TrendingUp,\n  ": ": TrendingUp,\n  ",
    ": CreditCard,\n  ": ": CreditCard,\n  ",
    "react-dom/server": "react-dom/server",
    "ml-3 font-medium": "ml-3 font-medium",
    "text-center mb-2": "text-center mb-2",
    "text-neutral-700": "text-neutral-700",
    "text-neutral-500": "text-neutral-500",
    "text-neutral-600": "text-neutral-600",
    "text-primary-600": "text-primary-600",
    "absolute w-0 h-0": "absolute w-0 h-0",
    "relative w-6 h-6": "relative w-6 h-6",
    "translateY(100%)": "translateY(100%)",
    "translateX(100%)": "translateX(100%)",
    "text-neutral-100": "text-neutral-100",
    "text-neutral-900": "text-neutral-900",
    "text-neutral-800": "text-neutral-800",
    ")) {\n    return ": ")) {\n    return ",
    "Mortgage Advisor": "Mortgage Advisor",
    "Scenarios count:": "Scenarios count:",
    ")\n  console.log(": ")\n  console.log(",
    ",\n    password: ": ",\n    password: ",
    "CalculationError": "CalculationError",
    "Division by zero": "Division by zero",
    "Message captured": "Message captured",
    "] || row.bio || ": "] || row.bio || ",
    ",\n    currency: ": ",\n    currency: ",
    "Total Load Time:": "Total Load Time:",
    ",\n    sameSite: ": ",\n    sameSite: ",
    "Current Mortgage": "Current Mortgage",
    "insuranceMonthly": "insuranceMonthly",
    ", () => {\n    it(": ", () => {\n    it(",
    "GET /api/scenario": "GET /api/scenario",
    "User Registration": "User Registration",
    ",\n        email: ": ",\n        email: ",
    "compareStrategies": "compareStrategies",
    "Test Confirmation": "Test Confirmation",
    ",\n    closeText: ": ",\n    closeText: ",
    "Stored Scenarios:": "Stored Scenarios:",
    "saveDemoScenarios": "saveDemoScenarios",
    ")\n    })\n\n    it(": ")\n    })\n\n    it(",
    "flex items-center": "flex items-center",
    "Response headers:": "Response headers:",
    "text-center py-12": "text-center py-12",
    "heloc_demo_agents": "heloc_demo_agents",
    "/admin/agents/new": "/admin/agents/new",
    "companyNmlsNumber": "companyNmlsNumber",
    "p-4 sm:p-6 lg:p-8": "p-4 sm:p-6 lg:p-8",
    "Raw request body:": "Raw request body:",
    "Sanitized inputs:": "Sanitized inputs:",
    "No agent assigned": "No agent assigned",
    " },\n    { email: ": " },\n    { email: ",
    "w-16 h-16 mx-auto": "w-16 h-16 mx-auto",
    ", {\n      style: ": ", {\n      style: ",
    "max-w-4xl mx-auto": "max-w-4xl mx-auto",
    "space-y-1 text-xs": "space-y-1 text-xs",
    "text-red-600 mb-2": "text-red-600 mb-2",
    "w-12 h-12 mx-auto": "w-12 h-12 mx-auto",
    "text-center mb-12": "text-center mb-12",
    "mt-12 text-center": "mt-12 text-center",
    "text-center mb-16": "text-center mb-16",
    "text-center mt-16": "text-center mt-16",
    "Select with Error": "Select with Error",
    "Disabled Checkbox": "Disabled Checkbox",
    " },\n    { value: ": " },\n    { value: ",
    "helocInterestRate": "helocInterestRate",
    "Income & Expenses": "Income & Expenses",
    "Export debug data": "Export debug data",
    "Close debug panel": "Close debug panel",
    "An error occurred": "An error occurred",
    ": AlertCircle,\n  ": ": AlertCircle,\n  ",
    ": CheckCircle,\n  ": ": CheckCircle,\n  ",
    ": ChevronDown,\n  ": ": ChevronDown,\n  ",
    "space-y-2 text-sm": "space-y-2 text-sm",
    ":\n        return ": ":\n        return ",
    "max-w-2xl mx-auto": "max-w-2xl mx-auto",
    "space-y-1 text-sm": "space-y-1 text-sm",
    "AnimatedComponent": "AnimatedComponent",
    "text-red-500 ml-1": "text-red-500 ml-1",
    "w-full form-field": "w-full form-field",
    ",\n    underline: ": ",\n    underline: ",
    "ValidatedTextarea": "ValidatedTextarea",
    "opacity-0 scale-0": "opacity-0 scale-0",
    ")[0];\n    return ": ")[0];\n    return ",
    "HELOC Accelerator": "HELOC Accelerator",
    "translateY(-100%)": "translateY(-100%)",
    "translateX(-100%)": "translateX(-100%)",
    "next-intl/routing": "next-intl/routing",
    "border-orange-300": "border-orange-300",
    "Just over 80% LTV": "Just over 80% LTV",
    "First-Time Buyers": "First-Time Buyers",
    "Home Equity Loans": "Home Equity Loans",
    "Primary Residence": "Primary Residence",
    ",\n    firstName: ": ",\n    firstName: ",
    "MathematicalError": "MathematicalError",
    ") return value ? ": ") return value ? ",
    ",\n    title: row[": ",\n    title: row[",
    ",\n    email: row[": ",\n    email: row[",
    ",\n    phone: row[": ",\n    phone: row[",
    ",\n      message: ": ",\n      message: ",
    "POST /api/scenario": "POST /api/scenario",
    ",\n          name: ": ",\n          name: ",
    "SecurePassword123!": "SecurePassword123!",
    "HELOC Calculations": "HELOC Calculations",
    "Final Confirmation": "Final Confirmation",
    "Test description 2": "Test description 2",
    "mt-4 text-gray-600": "mt-4 text-gray-600",
    "Validation Errors:": "Validation Errors:",
    "Calculation failed": "Calculation failed",
    "Results available:": "Results available:",
    "API response data:": "API response data:",
    "/admin/assignments": "/admin/assignments",
    "\n              id=": "\n              id=",
    "companyDescription": "companyDescription",
    "Validation result:": "Validation result:",
    "Get profile error:": "Get profile error:",
    "Invalid input data": "Invalid input data",
    ")\n    setPassword(": ")\n    setPassword(",
    "border p-4 rounded": "border p-4 rounded",
    "text-gray-400 mb-4": "text-gray-400 mb-4",
    "text-gray-600 mb-4": "text-gray-600 mb-4",
    "w-3 h-3 text-white": "w-3 h-3 text-white",
    ",\n      currency: ": ",\n      currency: ",
    "text-gray-600 mb-6": "text-gray-600 mb-6",
    "mt-2 text-gray-600": "mt-2 text-gray-600",
    "Duplicate scenario": "Duplicate scenario",
    "text-gray-600 mb-2": "text-gray-600 mb-2",
    "🚀 PRODUCTION MODE": "🚀 PRODUCTION MODE",
    "text-gray-700 mb-6": "text-gray-700 mb-6",
    "Enter text here...": "Enter text here...",
    "monthlyGrossIncome": "monthlyGrossIncome",
    ");\n      setError(": ");\n      setError(",
    "HELOC Credit Limit": "HELOC Credit Limit",
    "Monthly Expenses *": "Monthly Expenses *",
    ",\n  placeholder = ": ",\n  placeholder = ",
    "Component mounted!": "Component mounted!",
    "isDemoMode result:": "isDemoMode result:",
    ": ChevronRight,\n  ": ": ChevronRight,\n  ",
    "Setting demo data:": "Setting demo data:",
    "traditionalBalance": "traditionalBalance",
    "text-right text-sm": "text-right text-sm",
    "font-semibold mb-1": "font-semibold mb-1",
    "text-blue-600 mr-2": "text-blue-600 mr-2",
    ")\n    console.log(": ")\n    console.log(",
    ",\n    pmiMonthly: ": ",\n    pmiMonthly: ",
    ",\n    helocLimit: ": ",\n    helocLimit: ",
    "\n            icon=": "\n            icon=",
    "text-secondary-900": "text-secondary-900",
    "FastCalculatorForm": "FastCalculatorForm",
    "LiveCalculatorForm": "LiveCalculatorForm",
    "Very low LTV (40%)": "Very low LTV (40%)",
    "safeLTVCalculation": "safeLTVCalculation",
    "Debt Consolidation": "Debt Consolidation",
    "Cash-Flow Analysis": "Cash-Flow Analysis",
    "Bilingual Services": "Bilingual Services",
    "Transaction error:": "Transaction error:",
    "\n  },\n  {\n    id: ": "\n  },\n  {\n    id: ",
    ")) {\n      return ": ")) {\n      return ",
    ",\n        action: ": ",\n        action: ",
    ",\n    suggestion: ": ",\n    suggestion: ",
    "] || row.title || ": "] || row.title || ",
    "] || row.email || ": "] || row.email || ",
    "] || row.phone || ": "] || row.phone || ",
    ")[0] || realIp || ": ")[0] || realIp || ",
    "default-src 'self'": "default-src 'self'",
    "form-action 'self'": "form-action 'self'",
    "interest-cohort=()": "interest-cohort=()",
    "Permissions-Policy": "Permissions-Policy",
    "X-Download-Options": "X-Download-Options",
    ",\n      sameSite: ": ",\n      sameSite: ",
    "propertyTaxMonthly": "propertyTaxMonthly",
    "MortgageValidation": "MortgageValidation",
    ");\n    });\n\n    it(": ");\n    });\n\n    it(",
    ",\n          email: ": ",\n          email: ",
    ", () => {\n    test(": ", () => {\n    test(",
    ")\n    })\n\n    test(": ")\n    })\n\n    test(",
    "Clear All Demo Data": "Clear All Demo Data",
    "currentInterestRate": "currentInterestRate",
    "Form data received:": "Form data received:",
    "API Error Response:": "API Error Response:",
    "Demo scenario data:": "Demo scenario data:",
    "\n              min=": "\n              min=",
    "https://example.com": "https://example.com",
    "Currently available": "Currently available",
    "Invalid credentials": "Invalid credentials",
    "Health check failed": "Health check failed",
    "Get scenario error:": "Get scenario error:",
    "Enter your password": "Enter your password",
    "✅ Demo Data Cleared": "✅ Demo Data Cleared",
    "text-green-600 mr-2": "text-green-600 mr-2",
    ",\n    newPassword: ": ",\n    newPassword: ",
    "This is helper text": "This is helper text",
    "Checkbox with Error": "Checkbox with Error",
    "\n              max=": "\n              max=",
    "inline h-3 w-3 mr-1": "inline h-3 w-3 mr-1",
    "HELOC Interest Rate": "HELOC Interest Rate",
    "\n        inputMode=": "\n        inputMode=",
    "mt-4 flex space-x-3": "mt-4 flex space-x-3",
    "mt-6 flex space-x-2": "mt-6 flex space-x-2",
    "\n            label=": "\n            label=",
    ",\n    transparent: ": ",\n    transparent: ",
    "noopener noreferrer": "noopener noreferrer",
    ", {\n        style: ": ", {\n        style: ",
    "))) {\n      return ": "))) {\n      return ",
    "MIP/PMI is required": "MIP/PMI is required",
    "may not be required": "may not be required",
    ")\n      steps.push(": ")\n      steps.push(",
    "Investment Property": "Investment Property",
    ") {\n    process.on(": ") {\n    process.on(",
    ",\n    userMessage: ": ",\n    userMessage: ",
    " && value.includes(": " && value.includes(",
    "Performance Metrics": "Performance Metrics",
    "DOM Content Loaded:": "DOM Content Loaded:",
    "mock-token-123456789": "mock-token-123456789",
    "existing@example.com": "existing@example.com",
    ",\n        password: ": ",\n        password: ",
    ")\n  })\n})\n\ndescribe(": ")\n  })\n})\n\ndescribe(",
    "Demo Data Management": "Demo Data Management",
    "h-5 w-5 text-red-400": "h-5 w-5 text-red-400",
    "Form data available:": "Form data available:",
    "✅ Opening save modal": "✅ Opening save modal",
    "API response status:": "API response status:",
    "flex h-full flex-col": "flex h-full flex-col",
    "\n                id=": "\n                id=",
    "Error loading agent:": "Error loading agent:",
    "Failed to load agent": "Failed to load agent",
    "companyLicenseNumber": "companyLicenseNumber",
    ",\n    companyPhone: ": ",\n    companyPhone: ",
    ",\n    companyEmail: ": ",\n    companyEmail: ",
    ",\n    primaryColor: ": ",\n    primaryColor: ",
    "Error loading stats:": "Error loading stats:",
    "Invalid email format": "Invalid email format",
    "Get scenarios error:": "Get scenarios error:",
    "Save scenario error:": "Save scenario error:",
    "Agent ID is required": "Agent ID is required",
    "text-sm text-red-600": "text-sm text-red-600",
    "admin@helocaccel.com": "admin@helocaccel.com",
    ", {\n        method: ": ", {\n        method: ",
    "h-6 w-6 text-red-600": "h-6 w-6 text-red-600",
    "text-sm text-red-700": "text-sm text-red-700",
    "M6 18L18 6M6 6l12 12": "M6 18L18 6M6 6l12 12",
    "w-6 h-6 text-red-600": "w-6 h-6 text-red-600",
    "Generate Sample Data": "Generate Sample Data",
    "p-3 text-primary-900": "p-3 text-primary-900",
    "h-8 w-8 text-red-600": "h-8 w-8 text-red-600",
    "flex flex-wrap gap-2": "flex flex-wrap gap-2",
    "re looking for doesn": "re looking for doesn",
    "flex justify-between": "flex justify-between",
    "flex flex-wrap gap-3": "flex flex-wrap gap-3",
    "text-gray-500 italic": "text-gray-500 italic",
    "helocAvailableCredit": "helocAvailableCredit",
    "Discretionary Income": "Discretionary Income",
    ",\n      helocLimit: ": ",\n      helocLimit: ",
    "\n              size=": "\n              size=",
    "\n              step=": "\n              step=",
    "Triggering confetti!": "Triggering confetti!",
    "Traditional Mortgage": "Traditional Mortgage",
    "text-orange-600 mr-1": "text-orange-600 mr-1",
    ",\n    scenarioName: ": ",\n    scenarioName: ",
    "top-full left-0 mt-1": "top-full left-0 mt-1",
    "transform -rotate-90": "transform -rotate-90",
    ",\n      disabled && ": ",\n      disabled && ",
    "max-w-xs break-words": "max-w-xs break-words",
    "\n              icon=": "\n              icon=",
    ",\n        currency: ": ",\n        currency: ",
    "next-intl/navigation": "next-intl/navigation",
    "Very high LTV (120%)": "Very high LTV (120%)",
    "Mortgage Refinancing": "Mortgage Refinancing",
    "], level?: DebugLog[": "], level?: DebugLog[",
    ",\n          action: ": ",\n          action: ",
    ",\n    lastName: row[": ",\n    lastName: row[",
    "LazyWrappedComponent": "LazyWrappedComponent",
    "IntersectionObserver": "IntersectionObserver",
    " ? input.password : ": " ? input.password : ",
    "next-intl/middleware": "next-intl/middleware",
    "API Integration Tests": "API Integration Tests",
    "INSERT INTO scenarios": "INSERT INTO scenarios",
    ", () => {\n      test(": ", () => {\n      test(",
    ",\n            email: ": ",\n            email: ",
    "Mortgage Calculations": "Mortgage Calculations",
    "Comparison Edge Cases": "Comparison Edge Cases",
    ", () => {\n  describe(": ", () => {\n  describe(",
    ",\n        updatedAt: ": ",\n        updatedAt: ",
    "text-sm text-gray-600": "text-sm text-gray-600",
    "text-xs text-gray-500": "text-xs text-gray-500",
    "h-6 w-6 text-blue-600": "h-6 w-6 text-blue-600",
    "Error updating agent:": "Error updating agent:",
    "Error creating agent:": "Error creating agent:",
    "h-6 w-6 text-gray-600": "h-6 w-6 text-gray-600",
    "h-5 w-5 text-gray-400": "h-5 w-5 text-gray-400",
    "text-sm text-gray-500": "text-sm text-gray-500",
    "text-sm text-gray-900": "text-sm text-gray-900",
    ", error)\n      alert(": ", error)\n      alert(",
    "),\n            fetch(": "),\n            fetch(",
    "Need agent assignment": "Need agent assignment",
    "h-5 w-5 text-blue-600": "h-5 w-5 text-blue-600",
    "Error fetching agent:": "Error fetching agent:",
    "Failed to fetch agent": "Failed to fetch agent",
    "Error deleting agent:": "Error deleting agent:",
    "Demo login successful": "Demo login successful",
    "Internal server error": "Internal server error",
    "[Simple Login] Error:": "[Simple Login] Error:",
    "Update profile error:": "Update profile error:",
    "text-center space-y-2": "text-center space-y-2",
    "w-6 h-6 text-blue-600": "w-6 h-6 text-blue-600",
    "🚨 Final Confirmation": "🚨 Final Confirmation",
    "font-semibold text-sm": "font-semibold text-sm",
    "h-8 w-8 text-blue-600": "h-8 w-8 text-blue-600",
    "h-5 w-5 text-blue-400": "h-5 w-5 text-blue-400",
    "text-green-600 italic": "text-green-600 italic",
    "text-center step-item": "text-center step-item",
    "\n                min=": "\n                min=",
    "\n                max=": "\n                max=",
    ",\n      description: ": ",\n      description: ",
    "text-sm text-blue-600": "text-sm text-blue-600",
    "bg-red-50 p-3 rounded": "bg-red-50 p-3 rounded",
    "text-sm text-blue-800": "text-sm text-blue-800",
    "All process.env keys:": "All process.env keys:",
    "NEXT_PUBLIC env vars:": "NEXT_PUBLIC env vars:",
    "\n              label=": "\n              label=",
    "\n        addDebugLog(": "\n        addDebugLog(",
    "text-xs text-gray-700": "text-xs text-gray-700",
    "text-sm text-gray-700": "text-sm text-gray-700",
    "text-sm text-blue-700": "text-sm text-blue-700",
    "text-xs text-gray-600": "text-xs text-gray-600",
    ")\n      setNameError(": ")\n      setNameError(",
    ",\n    propertyValue: ": ",\n    propertyValue: ",
    "rounded-lg border p-4": "rounded-lg border p-4",
    "flex items-center h-5": "flex items-center h-5",
    "top-full right-0 mt-1": "top-full right-0 mt-1",
    "relative inline-block": "relative inline-block",
    "opacity-100 scale-100": "opacity-100 scale-100",
    "Close navigation menu": "Close navigation menu",
    ",\n          isOpen ? ": ",\n          isOpen ? ",
    "Invalid email address": "Invalid email address",
    "Investment Properties": "Investment Properties",
    "Database query error:": "Database query error:",
    "__localStorage_test__": "__localStorage_test__",
    "Error monitor cleared": "Error monitor cleared",
    "\n      if (value === ": "\n      if (value === ",
    "] || row.lastName || ": "] || row.lastName || ",
    "]\n      ? String(row[": "]\n      ? String(row[",
    "font-src 'self' data:": "font-src 'self' data:",
    ") || origin.includes(": ") || origin.includes(",
    ", {\n          method: ": ", {\n          method: ",
    ",\n          lastName: ": ",\n          lastName: ",
    "FirstConfirmationModal": "FirstConfirmationModal",
    "currentMortgageBalance": "currentMortgageBalance",
    "w-6 h-6 text-green-600": "w-6 h-6 text-green-600",
    "text-sm text-green-700": "text-sm text-green-700",
    "✅ Demo scenario saved:": "✅ Demo scenario saved:",
    "❌ Save scenario error:": "❌ Save scenario error:",
    "bg-blue-600 text-white": "bg-blue-600 text-white",
    "Failed to update agent": "Failed to update agent",
    "Failed to create agent": "Failed to create agent",
    ", createdAt: new Date(": ", createdAt: new Date(",
    "flex justify-end gap-3": "flex justify-end gap-3",
    ",\n    companyLogoUrl: ": ",\n    companyLogoUrl: ",
    ",\n    companyAddress: ": ",\n    companyAddress: ",
    ",\n    companyWebsite: ": ",\n    companyWebsite: ",
    ",\n    secondaryColor: ": ",\n    secondaryColor: ",
    "h-5 w-5 text-green-600": "h-5 w-5 text-green-600",
    "Failed to delete agent": "Failed to delete agent",
    "Error fetching agents:": "Error fetching agents:",
    "Failed to fetch agents": "Failed to fetch agents",
    "Change password error:": "Change password error:",
    "Delete scenario error:": "Delete scenario error:",
    "Update scenario error:": "Update scenario error:",
    "Error assigning agent:": "Error assigning agent:",
    "Failed to assign agent": "Failed to assign agent",
    "text-xs text-green-700": "text-xs text-green-700",
    "w-8 h-8 text-green-600": "w-8 h-8 text-green-600",
    "⚠️ Clear All Demo Data": "⚠️ Clear All Demo Data",
    ", err)\n      setError(": ", err)\n      setError(",
    "Error boundary caught:": "Error boundary caught:",
    "flex items-center mb-2": "flex items-center mb-2",
    "This field is required": "This field is required",
    "\n                step=": "\n                step=",
    "Copy logs to clipboard": "Copy logs to clipboard",
    "grid grid-cols-2 gap-4": "grid grid-cols-2 gap-4",
    "bg-blue-50 p-3 rounded": "bg-blue-50 p-3 rounded",
    "bg-gray-50 p-3 rounded": "bg-gray-50 p-3 rounded",
    "Available HELOC Credit": "Available HELOC Credit",
    "Monthly Gross Income *": "Monthly Gross Income *",
    "\n                  id=": "\n                  id=",
    ")\n        addDebugLog(": ")\n        addDebugLog(",
    " : formData[field] || ": " : formData[field] || ",
    "grid grid-cols-1 gap-4": "grid grid-cols-1 gap-4",
    "text-sm text-green-600": "text-sm text-green-600",
    "text-xs text-green-600": "text-xs text-green-600",
    "HELOC Accelerator Logo": "HELOC Accelerator Logo",
    "grid grid-cols-3 gap-4": "grid grid-cols-3 gap-4",
    "flex items-center mb-4": "flex items-center mb-4",
    "Description (Optional)": "Description (Optional)",
    " bg-current opacity-20": " bg-current opacity-20",
    "grid grid-cols-4 gap-4": "grid grid-cols-4 gap-4",
    ",\n    monthlyPayment: ": ",\n    monthlyPayment: ",
    ",\n    hoaFeesMonthly: ": ",\n    hoaFeesMonthly: ",
    "font-medium capitalize": "font-medium capitalize",
    "Toggle navigation menu": "Toggle navigation menu",
    "rotate-0 translate-y-0": "rotate-0 translate-y-0",
    "\n                icon=": "\n                icon=",
    "Low LTV scenario (70%)": "Low LTV scenario (70%)",
    ",\n        pmiMonthly: ": ",\n        pmiMonthly: ",
    "LTV calculation failed": "LTV calculation failed",
    "Home Equity Consultant": "Home Equity Consultant",
    "❌ Data size too large:": "❌ Data size too large:",
    ")\n    throw new Error(": ")\n    throw new Error(",
    "] || row.firstName || ": "] || row.firstName || ",
    ",\n    nmlsNumber: row[": ",\n    nmlsNumber: row[",
    "] \n      ? String(row[": "] \n      ? String(row[",
    "] !== undefined ? row[": "] !== undefined ? row[",
    "frame-ancestors 'none'": "frame-ancestors 'none'",
    "X-Content-Type-Options": "X-Content-Type-Options",
    "X-DNS-Prefetch-Control": "X-DNS-Prefetch-Control",
    ", config.methods.join(": ", config.methods.join(",
    "Authentication required": "Authentication required",
    ")\n      })\n\n      test(": ")\n      })\n\n      test(",
    ", () => {\n    describe(": ", () => {\n    describe(",
    ",\n          last_name: ": ",\n          last_name: ",
    "calculateMonthlyPayment": "calculateMonthlyPayment",
    "Mathematical Edge Cases": "Mathematical Edge Cases",
    "should render when open": "should render when open",
    "SecondConfirmationModal": "SecondConfirmationModal",
    ");\n    });\n  });\n\n  it(": ");\n    });\n  });\n\n  it(",
    ")\n        error.name = ": ")\n        error.name = ",
    ",\n          createdAt: ": ",\n          createdAt: ",
    ",\n          updatedAt: ": ",\n          updatedAt: ",
    "validateCalculatorInput": "validateCalculatorInput",
    "h-4 bg-gray-200 rounded": "h-4 bg-gray-200 rounded",
    "Failed to load scenario": "Failed to load scenario",
    "Error loading scenario:": "Error loading scenario:",
    "Calculation successful!": "Calculation successful!",
    "Failed to save scenario": "Failed to save scenario",
    "flex items-center gap-2": "flex items-center gap-2",
    "h-5 w-5 text-yellow-600": "h-5 w-5 text-yellow-600",
    "text-sm text-yellow-800": "text-sm text-yellow-800",
    ") },\n            { id: ": ") },\n            { id: ",
    "flex items-center gap-3": "flex items-center gap-3",
    "min-h-screen bg-gray-50": "min-h-screen bg-gray-50",
    "animate-pulse space-y-4": "animate-pulse space-y-4",
    "flex items-center gap-4": "flex items-center gap-4",
    "h-5 w-5 text-purple-600": "h-5 w-5 text-purple-600",
    "Senior HELOC Specialist": "Senior HELOC Specialist",
    "Share token is required": "Share token is required",
    "w-6 h-6 text-purple-600": "w-6 h-6 text-purple-600",
    ",\n    confirmPassword: ": ",\n    confirmPassword: ",
    "Please select an option": "Please select an option",
    ">\n          <Icon name=": ">\n          <Icon name=",
    "text-xs text-yellow-800": "text-xs text-yellow-800",
    "Current Interest Rate *": "Current Interest Rate *",
    "Monthly Payment (P&I) *": "Monthly Payment (P&I) *",
    ",\n      monthlyIncome: ": ",\n      monthlyIncome: ",
    "\n              tooltip=": "\n              tooltip=",
    "\n                  min=": "\n                  min=",
    "\n                  max=": "\n                  max=",
    "font-bold text-gray-900": "font-bold text-gray-900",
    "text-sm text-purple-700": "text-sm text-purple-700",
    "text-xs text-orange-700": "text-xs text-orange-700",
    ")\n      setDescription(": ")\n      setDescription(",
    ")\n        setNameError(": ")\n        setNameError(",
    ",\n    monthlyExpenses: ": ",\n    monthlyExpenses: ",
    "animate-spin -ml-1 mr-2": "animate-spin -ml-1 mr-2",
    "animate-spin ml-2 -mr-1": "animate-spin ml-2 -mr-1",
    "bottom-full left-0 mb-1": "bottom-full left-0 mb-1",
    "rotate-45 translate-y-2": "rotate-45 translate-y-2",
    "\n                label=": "\n                label=",
    "M4 6h16M4 12h16M4 18h16": "M4 6h16M4 12h16M4 18h16",
    ")[0];\n    }\n    return ": ")[0];\n    }\n    return ",
    "🎉 Triggering confetti:": "🎉 Triggering confetti:",
    ");\n        canvas.id = ": ");\n        canvas.id = ",
    "High LTV scenario (90%)": "High LTV scenario (90%)",
    "Invalid Input Scenarios": "Invalid Input Scenarios",
    ");\n    return hexToRgb(": ");\n    return hexToRgb(",
    ",\n  level: WCAGLevel = ": ",\n  level: WCAGLevel = ",
    "\n      default: return ": "\n      default: return ",
    ")) {\n        tags.push(": ")) {\n        tags.push(",
    "Input validation failed": "Input validation failed",
    ",\n    mobilePhone: row[": ",\n    mobilePhone: row[",
    "] || row.nmlsNumber || ": "] || row.nmlsNumber || ",
    "Content-Security-Policy": "Content-Security-Policy",
    "Failed to load scenarios": "Failed to load scenarios",
    ", {\n            method: ": ", {\n            method: ",
    ",\n          first_name: ": ",\n          first_name: ",
    ").mockResolvedValueOnce(": ").mockResolvedValueOnce(",
    "handles hex without hash": "handles hex without hash",
    "\n      )\n    })\n\n    it(": "\n      )\n    })\n\n    it(",
    "flex justify-center mb-6": "flex justify-center mb-6",
    "h-64 bg-gray-200 rounded": "h-64 bg-gray-200 rounded",
    "bg-blue-50 text-blue-700": "bg-blue-50 text-blue-700",
    "Failed to update profile": "Failed to update profile",
    "Error loading scenarios:": "Error loading scenarios:",
    "Go back to previous page": "Go back to previous page",
    "text-coral-800 space-y-2": "text-coral-800 space-y-2",
    "text-amber-800 space-y-2": "text-amber-800 space-y-2",
    "flex justify-center mb-8": "flex justify-center mb-8",
    "text-body-sm font-medium": "text-body-sm font-medium",
    "text-h1 text-neutral-900": "text-h1 text-neutral-900",
    "text-h2 text-neutral-900": "text-h2 text-neutral-900",
    "text-h3 text-neutral-900": "text-h3 text-neutral-900",
    "text-h4 text-neutral-900": "text-h4 text-neutral-900",
    "text-h5 text-neutral-900": "text-h5 text-neutral-900",
    "text-h6 text-neutral-900": "text-h6 text-neutral-900",
    "flex-1 overflow-auto p-4": "flex-1 overflow-auto p-4",
    ",\n      monthlyPayment: ": ",\n      monthlyPayment: ",
    "\n    }\n\n    addDebugLog(": "\n    }\n\n    addDebugLog(",
    "\n                    id=": "\n                    id=",
    "text-sm text-neutral-600": "text-sm text-neutral-600",
    ")\n      setScenarioName(": ")\n      setScenarioName(",
    "divide-y divide-gray-200": "divide-y divide-gray-200",
    ",\n    insuranceMonthly: ": ",\n    insuranceMonthly: ",
    ",\n    monthlyNetIncome: ": ",\n    monthlyNetIncome: ",
    "bottom-full right-0 mb-1": "bottom-full right-0 mb-1",
    "list-disc pl-5 space-y-1": "list-disc pl-5 space-y-1",
    "h-5 w-5 text-neutral-400": "h-5 w-5 text-neutral-400",
    "\n                  icon=": "\n                  icon=",
    "}`);\n      console.warn(": "}`);\n      console.warn(",
    "LTV-based PMI Validation": "LTV-based PMI Validation",
    "calculateStandardMIPRate": "calculateStandardMIPRate",
    "loanAmount,propertyValue": "loanAmount,propertyValue",
    "SELECT 1 as health_check": "SELECT 1 as health_check",
    ")\n      throw new Error(": ")\n      throw new Error(",
    " as keyof Agent, label: ": " as keyof Agent, label: ",
    "] || row.mobilePhone || ": "] || row.mobilePhone || ",
    "SW registration failed: ": "SW registration failed: ",
    ",\n          description: ": ",\n          description: ",
    "),\n          first_name: ": "),\n          first_name: ",
    ",\n            last_name: ": ",\n            last_name: ",
    ",\n          newPassword: ": ",\n          newPassword: ",
    "Authentication Flow Tests": "Authentication Flow Tests",
    "calculateRemainingBalance": "calculateRemainingBalance",
    "should show loading state": "should show loading state",
    ", message: expect.anyOf([": ", message: expect.anyOf([",
    "mt-2 text-sm text-red-700": "mt-2 text-sm text-red-700",
    "=== CALCULATION ERROR ===": "=== CALCULATION ERROR ===",
    "🚀 Production Environment": "🚀 Production Environment",
    "e.g., Senior Loan Officer": "e.g., Senior Loan Officer",
    ",\n    bio: agent?.bio || ": ",\n    bio: agent?.bio || ",
    "p-3 bg-blue-50 rounded-lg": "p-3 bg-blue-50 rounded-lg",
    "Search users or agents...": "Search users or agents...",
    ",\n    companyNmlsNumber: ": ",\n    companyNmlsNumber: ",
    "font-medium text-gray-900": "font-medium text-gray-900",
    "Invalid email or password": "Invalid email or password",
    "info@helocaccelerator.com": "info@helocaccelerator.com",
    "Failed to change password": "Failed to change password",
    "Failed to delete scenario": "Failed to delete scenario",
    "Failed to update scenario": "Failed to update scenario",
    "Scenario name is required": "Scenario name is required",
    "max-w-md w-full space-y-8": "max-w-md w-full space-y-8",
    "space-y-1 text-yellow-700": "space-y-1 text-yellow-700",
    "mt-1 text-xs text-red-600": "mt-1 text-xs text-red-600",
    "ml-4 view-formulas-button": "ml-4 view-formulas-button",
    "Form submitted with data:": "Form submitted with data:",
    "Remaining Term (Months) *": "Remaining Term (Months) *",
    ",\n      monthlyExpenses: ": ",\n      monthlyExpenses: ",
    "mt-1 text-sm text-red-600": "mt-1 text-sm text-red-600",
    "font-medium text-gray-700": "font-medium text-gray-700",
    "\n                    min=": "\n                    min=",
    "\n                    max=": "\n                    max=",
    "h-5 w-5 text-red-400 mr-2": "h-5 w-5 text-red-400 mr-2",
    "bg-gray-50 rounded-lg p-4": "bg-gray-50 rounded-lg p-4",
    "bg-gray-50 p-4 rounded-lg": "bg-gray-50 p-4 rounded-lg",
    "font-medium text-blue-600": "font-medium text-blue-600",
    "bg-blue-50 p-4 rounded-lg": "bg-blue-50 p-4 rounded-lg",
    "font-medium text-blue-900": "font-medium text-blue-900",
    ")) {\n        console.log(": ")) {\n        console.log(",
    ",\n    helocInterestRate: ": ",\n    helocInterestRate: ",
    "-rotate-45 -translate-y-2": "-rotate-45 -translate-y-2",
    "\n                  label=": "\n                  label=",
    ",\n            isActive ? ": ",\n            isActive ? ",
    ")\n      }\n    })\n\n    it(": ")\n      }\n    })\n\n    it(",
    ",\n        propertyValue: ": ",\n        propertyValue: ",
    "LTV Calculation Functions": "LTV Calculation Functions",
    " ||\n      error.name === ": " ||\n      error.name === ",
    "This is common and doesn\\": "This is common and doesn\\",
    ",\n    licenseStates: row[": ",\n    licenseStates: row[",
    "Strict-Transport-Security": "Strict-Transport-Security",
    ",\n            first_name: ": ",\n            first_name: ",
    ")\n    })\n  })\n\n  describe(": ")\n    })\n  })\n\n  describe(",
    "calculateHELOCAcceleration": "calculateHELOCAcceleration",
    "Color Conversion Functions": "Color Conversion Functions",
    "Mortgage Balance Over Time": "Mortgage Balance Over Time",
    "Calling addDemoScenario...": "Calling addDemoScenario...",
    "🔧 Development Environment": "🔧 Development Environment",
    "bg-white shadow rounded-lg": "bg-white shadow rounded-lg",
    "mt-1 text-xs text-gray-500": "mt-1 text-xs text-gray-500",
    "mt-1 text-sm text-gray-600": "mt-1 text-sm text-gray-600",
    ",\n    companyDescription: ": ",\n    companyDescription: ",
    "text-sm text-gray-600 mb-4": "text-sm text-gray-600 mb-4",
    "admin@helocaccelerator.com": "admin@helocaccelerator.com",
    "bg-white rounded-lg shadow": "bg-white rounded-lg shadow",
    "Agent deleted successfully": "Agent deleted successfully",
    "Server configuration error": "Server configuration error",
    "Failed to retrieve profile": "Failed to retrieve profile",
    "} ${scenario.last_name || ": "} ${scenario.last_name || ",
    "Error fetching user agent:": "Error fetching user agent:",
    "text-sm text-gray-600 mt-1": "text-sm text-gray-600 mt-1",
    "font-medium text-green-600": "font-medium text-green-600",
    "flex items-start space-x-4": "flex items-start space-x-4",
    "text-xs text-gray-500 mt-2": "text-xs text-gray-500 mt-2",
    "text-primary-900 space-y-3": "text-primary-900 space-y-3",
    "text-primary-900 space-y-2": "text-primary-900 space-y-2",
    "text-primary-900 space-y-4": "text-primary-900 space-y-4",
    "mt-2 text-lg text-gray-600": "mt-2 text-lg text-gray-600",
    "mt-2 text-sm text-blue-700": "mt-2 text-sm text-blue-700",
    "mt-2 text-sm text-gray-700": "mt-2 text-sm text-gray-700",
    "text-lg font-semibold mb-2": "text-lg font-semibold mb-2",
    "text-xs text-gray-500 mt-1": "text-xs text-gray-500 mt-1",
    "text-body font-medium mb-3": "text-body font-medium mb-3",
    "text-body text-neutral-900": "text-body text-neutral-900",
    "text-body text-neutral-600": "text-body text-neutral-600",
    "monthlyDiscretionaryIncome": "monthlyDiscretionaryIncome",
    "text-sm text-blue-700 mb-3": "text-sm text-blue-700 mb-3",
    "text-gray-500 text-xs mt-1": "text-gray-500 text-xs mt-1",
    "mt-2 text-sm text-gray-600": "mt-2 text-sm text-gray-600",
    "Current Mortgage Balance *": "Current Mortgage Balance *",
    "text-xs text-gray-500 mb-2": "text-xs text-gray-500 mb-2",
    "NEXT_PUBLIC_DEMO_MODE raw:": "NEXT_PUBLIC_DEMO_MODE raw:",
    "text-xs text-gray-700 mb-2": "text-xs text-gray-700 mb-2",
    "w-5 h-5 mr-2 text-blue-600": "w-5 h-5 mr-2 text-blue-600",
    "text-xs text-gray-500 ml-2": "text-xs text-gray-500 ml-2",
    "text-xs text-gray-600 mt-1": "text-xs text-gray-600 mt-1",
    "\n                    step=": "\n                    step=",
    "h-4 w-4 text-blue-500 mr-2": "h-4 w-4 text-blue-500 mr-2",
    "Mortgage Payoff Comparison": "Mortgage Payoff Comparison",
    "font-medium text-green-700": "font-medium text-green-700",
    "text-sm text-blue-700 mt-1": "text-sm text-blue-700 mt-1",
    "text-sm text-blue-800 mb-2": "text-sm text-blue-800 mb-2",
    "bg-green-50 p-4 rounded-lg": "bg-green-50 p-4 rounded-lg",
    "font-medium text-green-900": "font-medium text-green-900",
    "text-green-700 font-medium": "text-green-700 font-medium",
    ",\n    propertyTaxMonthly: ": ",\n    propertyTaxMonthly: ",
    ",\n    monthlyGrossIncome: ": ",\n    monthlyGrossIncome: ",
    "font-medium cursor-pointer": "font-medium cursor-pointer",
    "\n                    icon=": "\n                    icon=",
    "),\n    },\n    {\n      id: ": "),\n    },\n    {\n      id: ",
    "LTV calculation successful": "LTV calculation successful",
    "\n  debugLogger.log(level, ": "\n  debugLogger.log(level, ",
    " ? window.location.href : ": " ? window.location.href : ",
    ", scenario)\n  console.log(": ", scenario)\n  console.log(",
    "Calculation Error Details:": "Calculation Error Details:",
    ",\n    phoneExtension: row[": ",\n    phoneExtension: row[",
    "Cross-Origin-Opener-Policy": "Cross-Origin-Opener-Policy",
    ",\n          password_hash: ": ",\n          password_hash: ",
    "Input Validation Edge Cases": "Input Validation Edge Cases",
    "Type the confirmation text:": "Type the confirmation text:",
    "converts 6-digit hex to RGB": "converts 6-digit hex to RGB",
    "converts 3-digit hex to RGB": "converts 3-digit hex to RGB",
    "lg:sticky lg:top-8 lg:h-fit": "lg:sticky lg:top-8 lg:h-fit",
    "\n              placeholder=": "\n              placeholder=",
    "Agent updated successfully!": "Agent updated successfully!",
    "Agent created successfully!": "Agent created successfully!",
    "HELOC Accelerator Solutions": "HELOC Accelerator Solutions",
    "Failed to retrieve scenario": "Failed to retrieve scenario",
    "Scenario saved successfully": "Scenario saved successfully",
    "text-sm text-green-700 mb-3": "text-sm text-green-700 mb-3",
    "/login?callbackUrl=/compare": "/login?callbackUrl=/compare",
    "flex items-center space-x-4": "flex items-center space-x-4",
    "flex items-center space-x-2": "flex items-center space-x-2",
    "flex items-center space-x-3": "flex items-center space-x-3",
    "font-medium text-purple-600": "font-medium text-purple-600",
    "divide-y divide-primary-200": "divide-y divide-primary-200",
    "max-w-4xl mx-auto space-y-8": "max-w-4xl mx-auto space-y-8",
    ",\n            newPassword: ": ",\n            newPassword: ",
    ">\n          <label htmlFor=": ">\n          <label htmlFor=",
    "bg-gray-100 border-gray-300": "bg-gray-100 border-gray-300",
    "font-bold text-red-800 mb-2": "font-bold text-red-800 mb-2",
    ",\n      helocInterestRate: ": ",\n      helocInterestRate: ",
    "NEXT_PUBLIC_DEMO_MODE type:": "NEXT_PUBLIC_DEMO_MODE type:",
    "\n              description=": "\n              description=",
    "grid grid-cols-2 gap-4 mt-4": "grid grid-cols-2 gap-4 mt-4",
    "font-semibold text-gray-900": "font-semibold text-gray-900",
    "font-semibold text-blue-700": "font-semibold text-blue-700",
    "h-4 w-4 text-green-500 mr-2": "h-4 w-4 text-green-500 mr-2",
    "mb-6 grid grid-cols-2 gap-6": "mb-6 grid grid-cols-2 gap-6",
    "text-sm text-green-800 mt-1": "text-sm text-green-800 mt-1",
    "font-semibold text-gray-700": "font-semibold text-gray-700",
    "font-semibold text-blue-600": "font-semibold text-blue-600",
    ",\n    currentInterestRate: ": ",\n    currentInterestRate: ",
    "!bg-white !text-neutral-900": "!bg-white !text-neutral-900",
    ",\n      isActive\n        ? ": ",\n      isActive\n        ? ",
    "transition-all duration-200": "transition-all duration-200",
    "\n                    label=": "\n                    label=",
    "Failed to load company data": "Failed to load company data",
    "Same dark color - invisible": "Same dark color - invisible",
    ") {\n    return null; // Don": ") {\n    return null; // Don",
    "Boundary LTV scenario (80%)": "Boundary LTV scenario (80%)",
    "should handle string inputs": "should handle string inputs",
    "should handle empty strings": "should handle empty strings",
    "heloc_demo_company_settings": "heloc_demo_company_settings",
    "=== SAVE DEMO SCENARIOS ===": "=== SAVE DEMO SCENARIOS ===",
    "Invalid numbers in division": "Invalid numbers in division",
    "Calculation error occurred:": "Calculation error occurred:",
    " ||\n        error.name === ": " ||\n        error.name === ",
    "] || row.phoneExtension || ": "] || row.phoneExtension || ",
    "img-src 'self' data: https:": "img-src 'self' data: https:",
    "connect-src 'self' ws: wss:": "connect-src 'self' ws: wss:",
    " && requestOrigin.includes(": " && requestOrigin.includes(",
    "should handle database error": "should handle database error",
    "should validate email format": "should validate email format",
    " }\n      )\n    })\n\n    test(": " }\n      )\n    })\n\n    test(",
    "generateAmortizationSchedule": "generateAmortizationSchedule",
    "returns null for invalid hex": "returns null for invalid hex",
    "Failed to load scenario data": "Failed to load scenario data",
    "🔄 Setting isSaving to false": "🔄 Setting isSaving to false",
    "HELOC Accelerator Calculator": "HELOC Accelerator Calculator",
    "border-t border-gray-200 p-4": "border-t border-gray-200 p-4",
    "h-8 bg-gray-200 rounded w-32": "h-8 bg-gray-200 rounded w-32",
    "flex items-center gap-3 mb-2": "flex items-center gap-3 mb-2",
    "p-4 border-b border-gray-200": "p-4 border-b border-gray-200",
    "https://example.com/logo.png": "https://example.com/logo.png",
    ",\n    companyLicenseNumber: ": ",\n    companyLicenseNumber: ",
    "https://helocaccelerator.com": "https://helocaccelerator.com",
    "Profile updated successfully": "Profile updated successfully",
    "Failed to retrieve scenarios": "Failed to retrieve scenarios",
    "p-3 bg-blue-100 rounded-full": "p-3 bg-blue-100 rounded-full",
    "flex justify-between text-sm": "flex justify-between text-sm",
    "w-5 h-5 text-yellow-400 mr-2": "w-5 h-5 text-yellow-400 mr-2",
    "text-xs text-yellow-600 mb-2": "text-xs text-yellow-600 mb-2",
    "font-semibold text-green-600": "font-semibold text-green-600",
    "p-4 bg-neutral-50 rounded-lg": "p-4 bg-neutral-50 rounded-lg",
    "min-h-screen bg-gray-50 py-8": "min-h-screen bg-gray-50 py-8",
    "flex items-center gap-2 mb-1": "flex items-center gap-2 mb-1",
    "flex items-center gap-2 mb-2": "flex items-center gap-2 mb-2",
    "font-bold text-blue-800 mb-2": "font-bold text-blue-800 mb-2",
    "font-bold text-gray-800 mb-2": "font-bold text-gray-800 mb-2",
    ") {\n        setDisplayValue(": ") {\n        setDisplayValue(",
    "font-semibold text-green-700": "font-semibold text-green-700",
    "p-3 bg-blue-200 rounded-full": "p-3 bg-blue-200 rounded-full",
    "font-semibold text-green-900": "font-semibold text-green-900",
    "mt-2 text-sm text-yellow-700": "mt-2 text-sm text-yellow-700",
    "h-8 bg-gray-200 rounded w-20": "h-8 bg-gray-200 rounded w-20",
    "h-8 bg-gray-200 rounded w-16": "h-8 bg-gray-200 rounded w-16",
    ", \n  lines = 3, \n  height = ": ", \n  lines = 3, \n  height = ",
    ",\n    helocAvailableCredit: ": ",\n    helocAvailableCredit: ",
    ",\n              rightIcon ? ": ",\n              rightIcon ? ",
    ",\n          orientation === ": ",\n          orientation === ",
    "(prefers-color-scheme: dark)": "(prefers-color-scheme: dark)",
    "\n                      icon=": "\n                      icon=",
    "Error fetching company data:": "Error fetching company data:",
    "Cross-Form Consistency Tests": "Cross-Form Consistency Tests",
    "calculateSuggestedMonthlyPMI": "calculateSuggestedMonthlyPMI",
    "Password verification error:": "Password verification error:",
    "Please enter positive values": "Please enter positive values",
    "Error accessing localStorage": "Error accessing localStorage",
    "❌ localStorage not available": "❌ localStorage not available",
    ",\n    lastName: email.split(": ",\n    lastName: email.split(",
    "Failed to send error report:": "Failed to send error report:",
    ") && error.message.includes(": ") && error.message.includes(",
    "Mortgage balance is required": "Mortgage balance is required",
    " && typeof window.print === ": " && typeof window.print === ",
    "Cross-Origin-Embedder-Policy": "Cross-Origin-Embedder-Policy",
    "Cross-Origin-Resource-Policy": "Cross-Origin-Resource-Policy",
    "Component Accessibility Tests": "Component Accessibility Tests",
    ",\n          confirmPassword: ": ",\n          confirmPassword: ",
    ")\n        jest.spyOn(bcrypt, ": ")\n        jest.spyOn(bcrypt, ",
    "should not render when closed": "should not render when closed",
    ")\n    await user.type(input, ": ")\n    await user.type(input, ",
    "h-4 bg-gray-200 rounded w-5/6": "h-4 bg-gray-200 rounded w-5/6",
    "h-4 bg-gray-200 rounded w-4/6": "h-4 bg-gray-200 rounded w-4/6",
    "hover:text-gray-700 underline": "hover:text-gray-700 underline",
    "=== SAVE SCENARIO CONFIRM ===": "=== SAVE SCENARIO CONFIRM ===",
    ",\n    title: agent?.title || ": ",\n    title: agent?.title || ",
    ",\n    email: agent?.email || ": ",\n    email: agent?.email || ",
    ",\n    phone: agent?.phone || ": ",\n    phone: agent?.phone || ",
    "h-3 bg-gray-200 rounded w-1/2": "h-3 bg-gray-200 rounded w-1/2",
    "Current password is incorrect": "Current password is incorrect",
    "Password changed successfully": "Password changed successfully",
    "Scenario deleted successfully": "Scenario deleted successfully",
    "Scenario updated successfully": "Scenario updated successfully",
    "block text-sm mt-1 opacity-90": "block text-sm mt-1 opacity-90",
    "p-3 bg-green-100 rounded-full": "p-3 bg-green-100 rounded-full",
    "bg-white rounded-lg shadow-md": "bg-white rounded-lg shadow-md",
    "text-xs ml-4 text-primary-700": "text-xs ml-4 text-primary-700",
    "bg-primary-100 p-4 rounded-lg": "bg-primary-100 p-4 rounded-lg",
    "text-h2 text-neutral-900 mb-6": "text-h2 text-neutral-900 mb-6",
    "p-4 bg-neutral-800 rounded-lg": "p-4 bg-neutral-800 rounded-lg",
    "text-caption text-neutral-500": "text-caption text-neutral-500",
    "text-display text-neutral-900": "text-display text-neutral-900",
    "text-body-lg text-neutral-900": "text-body-lg text-neutral-900",
    "text-body-sm text-neutral-900": "text-body-sm text-neutral-900",
    "text-caption text-neutral-900": "text-caption text-neutral-900",
    "text-h6 text-neutral-900 mb-3": "text-h6 text-neutral-900 mb-3",
    "text-h6 text-neutral-900 mb-2": "text-h6 text-neutral-900 mb-2",
    "\n                placeholder=": "\n                placeholder=",
    "underline hover:text-gray-700": "underline hover:text-gray-700",
    ",\n      currentInterestRate: ": ",\n      currentInterestRate: ",
    "NEXT_PUBLIC_DEMO_MODE length:": "NEXT_PUBLIC_DEMO_MODE length:",
    ") {\n        processedValue = ": ") {\n        processedValue = ",
    ", error)\n      console.error(": ", error)\n      console.error(",
    "h-4 bg-gray-200 rounded w-1/2": "h-4 bg-gray-200 rounded w-1/2",
    "h-4 bg-blue-200 rounded w-1/2": "h-4 bg-blue-200 rounded w-1/2",
    "p-3 bg-green-200 rounded-full": "p-3 bg-green-200 rounded-full",
    "font-semibold text-purple-600": "font-semibold text-purple-600",
    "mt-1 text-xs text-neutral-500": "mt-1 text-xs text-neutral-500",
    "text-body-sm text-neutral-600": "text-body-sm text-neutral-600",
    "\n    ),\n    pills: cn(\n      ": "\n    ),\n    pills: cn(\n      ",
    "\n                      label=": "\n                      label=",
    ";\n        canvas.style.top = ": ";\n        canvas.style.top = ",
    "Mortgage Acceleration Advisor": "Mortgage Acceleration Advisor",
    "Database health check failed:": "Database health check failed:",
    ")\n    )) {\n      console.log(": ")\n    )) {\n      console.log(",
    ", error)\n    throw new Error(": ", error)\n    throw new Error(",
    ",\n      {\n        component: ": ",\n      {\n        component: ",
    ") {\n    response.headers.set(": ") {\n    response.headers.set(",
    ", config.allowedHeaders.join(": ", config.allowedHeaders.join(",
    " && computedStyle.outline !== ": " && computedStyle.outline !== ",
    "\n      const hashedPassword = ": "\n      const hashedPassword = ",
    "should handle short loan terms": "should handle short loan terms",
    "should handle zero HELOC limit": "should handle zero HELOC limit",
    "/login?callbackUrl=/calculator": "/login?callbackUrl=/calculator",
    "🔄 Redirecting to dashboard...": "🔄 Redirecting to dashboard...",
    "bg-white rounded-lg shadow p-6": "bg-white rounded-lg shadow p-6",
    "mt-1 flex items-baseline gap-2": "mt-1 flex items-baseline gap-2",
    "Validation failed with errors:": "Validation failed with errors:",
    "Profile retrieved successfully": "Profile retrieved successfully",
    "mt-8 p-6 bg-blue-50 rounded-lg": "mt-8 p-6 bg-blue-50 rounded-lg",
    "p-3 bg-purple-100 rounded-full": "p-3 bg-purple-100 rounded-full",
    "mt-8 p-4 bg-gray-50 rounded-lg": "mt-8 p-4 bg-gray-50 rounded-lg",
    "p-3 font-mono text-primary-900": "p-3 font-mono text-primary-900",
    ">\n            <Button variant=": ">\n            <Button variant=",
    "\n    })\n  }\n\n  if (status === ": "\n    })\n  }\n\n  if (status === ",
    "Failed to load shared scenario": "Failed to load shared scenario",
    "Error loading shared scenario:": "Error loading shared scenario:",
    "text-primary-600 bg-neutral-50": "text-primary-600 bg-neutral-50",
    "Type confirmation text here...": "Type confirmation text here...",
    "font-medium text-gray-800 mb-1": "font-medium text-gray-800 mb-1",
    "grid grid-cols-2 gap-4 text-sm": "grid grid-cols-2 gap-4 text-sm",
    ",\n      helocAvailableCredit: ": ",\n      helocAvailableCredit: ",
    " && typeof processedValue === ": " && typeof processedValue === ",
    " ? (typeof processedValue === ": " ? (typeof processedValue === ",
    "\n        button.classList.add(": "\n        button.classList.add(",
    "h-6 bg-green-200 rounded w-1/2": "h-6 bg-green-200 rounded w-1/2",
    "p-3 bg-purple-200 rounded-full": "p-3 bg-purple-200 rounded-full",
    "text-body-sm text-red-600 mt-1": "text-body-sm text-red-600 mt-1",
    "text-red-700 dark:text-red-400": "text-red-700 dark:text-red-400",
    "mt-2 text-body-sm text-red-600": "mt-2 text-body-sm text-red-600",
    "mt-1 text-body-sm text-red-600": "mt-1 text-body-sm text-red-600",
    ";\n        canvas.style.left = ": ";\n        canvas.style.left = ",
    "Same color text and background": "Same color text and background",
    "Edge Case Validation Scenarios": "Edge Case Validation Scenarios",
    "Performance and Stress Testing": "Performance and Stress Testing",
    "should return 0 for LTV <= 80%": "should return 0 for LTV <= 80%",
    "],\n  \n  // Secondary colors\n  ": "],\n  \n  // Secondary colors\n  ",
    "],\n  \n  // Dark backgrounds\n  ": "],\n  \n  // Dark backgrounds\n  ",
    "\n\n  debugLogger.log(logLevel, ": "\n\n  debugLogger.log(logLevel, ",
    "Rental property HELOC strategy": "Rental property HELOC strategy",
    "Error clearing corrupted data:": "Error clearing corrupted data:",
    "Please check your input values": "Please check your input values",
    ";\n  return num.toLocaleString(": ";\n  return num.toLocaleString(",
    ");\n    });\n  });\n});\n\ndescribe(": ");\n    });\n  });\n});\n\ndescribe(",
    "should validate required fields": "should validate required fields",
    ")).toBe(true);\n    });\n\n    it(": ")).toBe(true);\n    });\n\n    it(",
    " })\n      ]))\n    })\n\n    test(": " })\n      ]))\n    })\n\n    test(",
    "=== CALCULATION REQUEST END ===": "=== CALCULATION REQUEST END ===",
    "text-xl font-bold text-gray-900": "text-xl font-bold text-gray-900",
    "Brief professional biography...": "Brief professional biography...",
    "bg-white shadow rounded-lg mb-6": "bg-white shadow rounded-lg mb-6",
    "flex flex-col sm:flex-row gap-4": "flex flex-col sm:flex-row gap-4",
    "text-red-600 hover:text-red-900": "text-red-600 hover:text-red-900",
    "flex flex-col lg:flex-row gap-4": "flex flex-col lg:flex-row gap-4",
    "mt-8 bg-white rounded-lg shadow": "mt-8 bg-white rounded-lg shadow",
    "Email and password are required": "Email and password are required",
    "Email address is already in use": "Email address is already in use",
    "Scenario retrieved successfully": "Scenario retrieved successfully",
    "text-xs text-gray-500 space-y-1": "text-xs text-gray-500 space-y-1",
    ",\n        headers: {\n          ": ",\n        headers: {\n          ",
    "text-sm text-blue-800 space-y-2": "text-sm text-blue-800 space-y-2",
    "mt-6 p-4 bg-gray-100 rounded-lg": "mt-6 p-4 bg-gray-100 rounded-lg",
    "Testing direct confetti call...": "Testing direct confetti call...",
    "mt-8 p-4 bg-gray-100 rounded-lg": "mt-8 p-4 bg-gray-100 rounded-lg",
    "list-disc list-inside space-y-1": "list-disc list-inside space-y-1",
    ",\n            confirmPassword: ": ",\n            confirmPassword: ",
    "Select one option from the list": "Select one option from the list",
    "next-auth/providers/credentials": "next-auth/providers/credentials",
    "text-2xl font-bold text-red-600": "text-2xl font-bold text-red-600",
    "Comparison result (=== \"true\"):": "Comparison result (=== \"true\"):",
    "> {\n  name: IconName;\n  size?: ": "> {\n  name: IconName;\n  size?: ",
    "text-sm font-bold text-blue-600": "text-sm font-bold text-blue-600",
    "\n                  placeholder=": "\n                  placeholder=",
    "p-2 bg-gray-100 rounded-lg mr-3": "p-2 bg-gray-100 rounded-lg mr-3",
    "p-2 bg-blue-100 rounded-lg mr-3": "p-2 bg-blue-100 rounded-lg mr-3",
    ";\n        canvas.style.width = ": ";\n        canvas.style.width = ",
    "FastCalculatorForm input change": "FastCalculatorForm input change",
    "Unexpected error on idle client": "Unexpected error on idle client",
    ",\n      url: typeof window !== ": ",\n      url: typeof window !== ",
    "Error saving cleaned scenarios:": "Error saving cleaned scenarios:",
    ")\n    } else {\n      tags.push(": ")\n    } else {\n      tags.push(",
    "Your total monthly gross income": "Your total monthly gross income",
    ": result.limit.toString(),\n    ": ": result.limit.toString(),\n    ",
    ", errors.length)\n  console.log(": ", errors.length)\n  console.log(",
    " && computedStyle.boxShadow !== ": " && computedStyle.boxShadow !== ",
    ")\n      })\n    })\n\n    describe(": ")\n      })\n    })\n\n    describe(",
    "should handle zero interest rate": "should handle zero interest rate",
    "should handle very large numbers": "should handle very large numbers",
    ")).toBe(false);\n    });\n\n    it(": ")).toBe(false);\n    });\n\n    it(",
    "Demo Data Clearing Functionality": "Demo Data Clearing Functionality",
    "text-sm font-medium text-red-800": "text-sm font-medium text-red-800",
    "h-12 w-12 bg-gray-200 rounded-lg": "h-12 w-12 bg-gray-200 rounded-lg",
    "text-2xl font-bold text-gray-900": "text-2xl font-bold text-gray-900",
    "Error fetching company settings:": "Error fetching company settings:",
    "Failed to fetch company settings": "Failed to fetch company settings",
    "Error updating company settings:": "Error updating company settings:",
    "Scenarios retrieved successfully": "Scenarios retrieved successfully",
    "Failed to fetch agent assignment": "Failed to fetch agent assignment",
    "font-medium text-yellow-800 mb-1": "font-medium text-yellow-800 mb-1",
    "mt-1 whitespace-pre-wrap text-xs": "mt-1 whitespace-pre-wrap text-xs",
    ">\n              <Button variant=": ">\n              <Button variant=",
    "text-sm text-green-700 space-y-2": "text-sm text-green-700 space-y-2",
    "text-2xl font-bold text-blue-600": "text-2xl font-bold text-blue-600",
    "text-center max-w-md mx-auto p-6": "text-center max-w-md mx-auto p-6",
    "[AUTH DEBUG] Missing credentials": "[AUTH DEBUG] Missing credentials",
    "\n        >\n          <Icon name=": "\n        >\n          <Icon name=",
    "=== ENVIRONMENT BANNER DEBUG ===": "=== ENVIRONMENT BANNER DEBUG ===",
    ">\n        <input\n          type=": ">\n        <input\n          type=",
    ":\n      default:\n        return ": ":\n      default:\n        return ",
    "font-semibold text-gray-900 mb-1": "font-semibold text-gray-900 mb-1",
    "mt-4 p-3 bg-green-200 rounded-lg": "mt-4 p-3 bg-green-200 rounded-lg",
    "text-2xl font-bold text-blue-900": "text-2xl font-bold text-blue-900",
    "Add notes about this scenario...": "Add notes about this scenario...",
    "my-1 border-t border-neutral-200": "my-1 border-t border-neutral-200",
    "text-neutral-600 input-icon-left": "text-neutral-600 input-icon-left",
    ",\n                      error ? ": ",\n                      error ? ",
    "absolute top-0 right-0 mt-1 mr-1": "absolute top-0 right-0 mt-1 mr-1",
    "M15 12a3 3 0 11-6 0 3 3 0 016 0z": "M15 12a3 3 0 11-6 0 3 3 0 016 0z",
    ";\n        canvas.style.height = ": ";\n        canvas.style.height = ",
    ";\n        canvas.style.zIndex = ": ";\n        canvas.style.zIndex = ",
    "React Hook Form Validation Rules": "React Hook Form Validation Rules",
    ").map(char => char + char).join(": ").map(char => char + char).join(",
    " ? window.navigator.userAgent : ": " ? window.navigator.userAgent : ",
    ") {\n    window.addEventListener(": ") {\n    window.addEventListener(",
    "\n          if (typeof value === ": "\n          if (typeof value === ",
    "style-src 'self' 'unsafe-inline'": "style-src 'self' 'unsafe-inline'",
    ")) {\n      response.headers.set(": ")) {\n      response.headers.set(",
    ")\n  const ip = forwarded?.split(": ")\n  const ip = forwarded?.split(",
    ",\n          created_at: new Date(": ",\n          created_at: new Date(",
    "should validate password strength": "should validate password strength",
    "should handle high interest rates": "should handle high interest rates",
    "should reject invalid term length": "should reject invalid term length",
    "should reject empty scenario name": "should reject empty scenario name",
    "flex items-center justify-between": "flex items-center justify-between",
    "bg-white rounded-lg shadow-md p-6": "bg-white rounded-lg shadow-md p-6",
    "=== CALCULATION REQUEST START ===": "=== CALCULATION REQUEST START ===",
    "API returned unsuccessful result:": "API returned unsuccessful result:",
    "❌ API request failed with status:": "❌ API request failed with status:",
    "text-gray-600 hover:text-gray-900": "text-gray-600 hover:text-gray-900",
    "lg:hidden fixed top-4 left-4 z-50": "lg:hidden fixed top-4 left-4 z-50",
    ">\n        <button\n          type=": ">\n        <button\n          type=",
    "h-4 bg-gray-200 rounded w-24 mb-2": "h-4 bg-gray-200 rounded w-24 mb-2",
    "text-sm font-medium text-gray-600": "text-sm font-medium text-gray-600",
    "bg-white divide-y divide-gray-200": "bg-white divide-y divide-gray-200",
    "text-sm font-medium text-gray-900": "text-sm font-medium text-gray-900",
    "text-blue-600 hover:text-blue-900": "text-blue-600 hover:text-blue-900",
    "text-blue-600 hover:text-blue-700": "text-blue-600 hover:text-blue-700",
    "heloc_demo_user_agent_assignments": "heloc_demo_user_agent_assignments",
    "Failed to update company settings": "Failed to update company settings",
    "\n      } else {\n        setError(": "\n      } else {\n        setError(",
    "bg-white rounded-lg shadow-md p-8": "bg-white rounded-lg shadow-md p-8",
    "text-2xl font-bold text-green-600": "text-2xl font-bold text-green-600",
    "text-md font-medium text-gray-900": "text-md font-medium text-gray-900",
    "flex justify-between items-center": "flex justify-between items-center",
    "text-gray-400 hover:text-gray-600": "text-gray-400 hover:text-gray-600",
    "text-xs text-yellow-700 space-y-1": "text-xs text-yellow-700 space-y-1",
    "text-sm font-medium text-blue-800": "text-sm font-medium text-blue-800",
    "Get started with HELOC calculator": "Get started with HELOC calculator",
    "text-lg font-medium text-gray-900": "text-lg font-medium text-gray-900",
    "text-sm font-medium text-gray-700": "text-sm font-medium text-gray-700",
    "flex flex-wrap items-center gap-3": "flex flex-wrap items-center gap-3",
    "bg-white p-6 rounded-lg shadow-md": "bg-white p-6 rounded-lg shadow-md",
    "Are you sure you want to proceed?": "Are you sure you want to proceed?",
    "Operation completed successfully.": "Operation completed successfully.",
    "PMI must be between $0 and $2,000": "PMI must be between $0 and $2,000",
    ";\n}\n\nconst sizeClasses = {\n  xs: ": ";\n}\n\nconst sizeClasses = {\n  xs: ",
    ">\n                <label htmlFor=": ">\n                <label htmlFor=",
    "\n                    placeholder=": "\n                    placeholder=",
    "text-3xl font-bold text-green-700": "text-3xl font-bold text-green-700",
    "text-2xl font-bold text-green-700": "text-2xl font-bold text-green-700",
    "mt-3 text-sm text-gray-700 italic": "mt-3 text-sm text-gray-700 italic",
    "text-2xl font-bold text-green-900": "text-2xl font-bold text-green-900",
    "text-sm font-medium text-blue-600": "text-sm font-medium text-blue-600",
    "border-red-300 focus:ring-red-500": "border-red-300 focus:ring-red-500",
    "text-neutral-600 input-icon-right": "text-neutral-600 input-icon-right",
    ",\n                      error && ": ",\n                      error && ",
    "\n    ),\n    underline: cn(\n      ": "\n    ),\n    underline: cn(\n      ",
    "should display LTV analysis panel": "should display LTV analysis panel",
    "should require PMI when LTV > 80%": "should require PMI when LTV > 80%",
    "should return true when LTV > 80%": "should return true when LTV > 80%",
    "should handle very low LTV (<50%)": "should handle very low LTV (<50%)",
    "should handle zero property value": "should handle zero property value",
    "should handle non-numeric strings": "should handle non-numeric strings",
    "Please enter valid numeric values": "Please enter valid numeric values",
    "michael.chen@helocaccelerator.com": "michael.chen@helocaccelerator.com",
    "],\n  \n  // Neutral backgrounds\n  ": "],\n  \n  // Neutral backgrounds\n  ",
    " ||\n      error.message.includes(": " ||\n      error.message.includes(",
    ";\n  const num = typeof value === ": ";\n  const num = typeof value === ",
    "X-Permitted-Cross-Domain-Policies": "X-Permitted-Cross-Domain-Policies",
    "Get help with using the calculator": "Get help with using the calculator",
    "http://localhost:3000/api/scenario": "http://localhost:3000/api/scenario",
    "should handle authentication error": "should handle authentication error",
    "),\n          updated_at: new Date(": "),\n          updated_at: new Date(",
    "),\n          last_login: new Date(": "),\n          last_login: new Date(",
    "should handle overpayment scenario": "should handle overpayment scenario",
    "Edge Cases and Boundary Conditions": "Edge Cases and Boundary Conditions",
    "should handle very long loan terms": "should handle very long loan terms",
    "should handle zero term gracefully": "should handle zero term gracefully",
    "should focus cancel button on open": "should focus cancel button on open",
    ")).toBeInTheDocument()\n  })\n\n  it(": ")).toBeInTheDocument()\n  })\n\n  it(",
    ";\n      \n      assertSafeContrast(": ";\n      \n      assertSafeContrast(",
    "Input Validation Integration Tests": "Input Validation Integration Tests",
    "text-sm font-medium text-green-800": "text-sm font-medium text-green-800",
    "h-4 bg-gray-200 rounded w-1/4 mb-4": "h-4 bg-gray-200 rounded w-1/4 mb-4",
    "Scenario not found in demo storage": "Scenario not found in demo storage",
    "❌ API returned unsuccessful result": "❌ API returned unsuccessful result",
    "h-10 w-10 bg-gray-200 rounded-full": "h-10 w-10 bg-gray-200 rounded-full",
    "h-4 bg-gray-200 rounded w-3/4 mb-2": "h-4 bg-gray-200 rounded w-3/4 mb-2",
    "sarah.johnson@helocaccelerator.com": "sarah.johnson@helocaccelerator.com",
    "text-2xl font-bold text-purple-600": "text-2xl font-bold text-purple-600",
    "bg-white rounded-lg shadow-md mb-8": "bg-white rounded-lg shadow-md mb-8",
    "flex justify-center mt-4 space-x-1": "flex justify-center mt-4 space-x-1",
    "text-body-sm text-neutral-600 mb-1": "text-body-sm text-neutral-600 mb-1",
    "Processed form data for submission": "Processed form data for submission",
    "pt-3 mt-3 border-t border-gray-200": "pt-3 mt-3 border-t border-gray-200",
    "\n    return new Intl.NumberFormat(": "\n    return new Intl.NumberFormat(",
    "h-4 bg-blue-200 rounded w-3/4 mb-2": "h-4 bg-blue-200 rounded w-3/4 mb-2",
    "text-sm font-medium text-green-600": "text-sm font-medium text-green-600",
    "text-2xl font-bold text-purple-900": "text-2xl font-bold text-purple-900",
    ",\n    monthlyDiscretionaryIncome: ": ",\n    monthlyDiscretionaryIncome: ",
    "bg-white border border-neutral-200": "bg-white border border-neutral-200",
    "fixed inset-0 z-50 overflow-y-auto": "fixed inset-0 z-50 overflow-y-auto",
    "mt-1 text-body-sm text-neutral-600": "mt-1 text-body-sm text-neutral-600",
    "mt-1 text-body-sm text-neutral-500": "mt-1 text-body-sm text-neutral-500",
    ",\n      bio: assignedAgent.bio || ": ",\n      bio: assignedAgent.bio || ",
    ";\n        canvas.style.position = ": ";\n        canvas.style.position = ",
    " ? 3 : 4.5,\n    AAA: textSize === ": " ? 3 : 4.5,\n    AAA: textSize === ",
    "Loan amount must be greater than 0": "Loan amount must be greater than 0",
    "Invalid numbers in power operation": "Invalid numbers in power operation",
    "))\n        return numValue > 0 || ": "))\n        return numValue > 0 || ",
    "\n        if (numValue < 2) return ": "\n        if (numValue < 2) return ",
    ")\n\n        if (isNaN(pmi)) return ": ")\n\n        if (isNaN(pmi)) return ",
    "should create scenario successfully": "should create scenario successfully",
    ")\n      })\n    })\n  })\n\n  describe(": ")\n      })\n    })\n  })\n\n  describe(",
    "Dashboard Data Clearing Integration": "Dashboard Data Clearing Integration",
    "should reject invalid interest rate": "should reject invalid interest rate",
    "text-lg font-semibold text-gray-900": "text-lg font-semibold text-gray-900",
    "mt-12 pt-8 border-t border-gray-200": "mt-12 pt-8 border-t border-gray-200",
    ",\n    lastName: agent?.lastName || ": ",\n    lastName: agent?.lastName || ",
    "min-w-full divide-y divide-gray-200": "min-w-full divide-y divide-gray-200",
    "flex items-center justify-end gap-2": "flex items-center justify-end gap-2",
    ",\n          headers: {\n            ": ",\n          headers: {\n            ",
    "t expose details\n    console.error(": "t expose details\n    console.error(",
    "User with this email already exists": "User with this email already exists",
    "Scenario not found or access denied": "Scenario not found or access denied",
    "p-8 safe-neutral-light min-h-screen": "p-8 safe-neutral-light min-h-screen",
    "text-xl font-semibold text-gray-900": "text-xl font-semibold text-gray-900",
    "safe-success-light border-green-200": "safe-success-light border-green-200",
    "View calculation formulas and logic": "View calculation formulas and logic",
    " },\n                      { value: ": " },\n                      { value: ",
    "[AUTH DEBUG] Authorize called with:": "[AUTH DEBUG] Authorize called with:",
    "[AUTH DEBUG] Demo mode user lookup:": "[AUTH DEBUG] Demo mode user lookup:",
    "text-sm font-semibold text-gray-900": "text-sm font-semibold text-gray-900",
    " + JSON.stringify(data, null, 2) : ": " + JSON.stringify(data, null, 2) : ",
    "h-8 bg-green-200 rounded w-3/4 mb-2": "h-8 bg-green-200 rounded w-3/4 mb-2",
    "text-sm font-medium text-purple-600": "text-sm font-medium text-purple-600",
    "text-sm font-medium text-yellow-800": "text-sm font-medium text-yellow-800",
    "e.g., Current Home - HELOC Strategy": "e.g., Current Home - HELOC Strategy",
    "mr-3 flex-shrink-0 text-neutral-400": "mr-3 flex-shrink-0 text-neutral-400",
    "block text-body-sm font-medium mb-1": "block text-body-sm font-medium mb-1",
    ")\n        expect(result).toContain(": ")\n        expect(result).toContain(",
    "should return false when LTV <= 80%": "should return false when LTV <= 80%",
    "should handle very high LTV (>100%)": "should handle very high LTV (>100%)",
    "should handle negative loan amounts": "should handle negative loan amounts",
    " ||\n        error.message.includes(": " ||\n        error.message.includes(",
    ")\n      } else {\n        tags.push(": ")\n      } else {\n        tags.push(",
    "\n        if (numValue > 15) return ": "\n        if (numValue > 15) return ",
    "width=device-width, initial-scale=1": "width=device-width, initial-scale=1",
    " }\n      )\n      expect(token).toBe(": " }\n      )\n      expect(token).toBe(",
    "should handle custom monthly payment": "should handle custom monthly payment",
    "should handle very small HELOC limit": "should handle very small HELOC limit",
    ")\n    expect(input).toHaveAttribute(": ")\n    expect(input).toHaveAttribute(",
    "should validate complete valid input": "should validate complete valid input",
    "An error occurred during calculation": "An error occurred during calculation",
    "=== SAVE SCENARIO BUTTON CLICKED ===": "=== SAVE SCENARIO BUTTON CLICKED ===",
    "📱 Demo mode: Saving to localStorage": "📱 Demo mode: Saving to localStorage",
    "h-12 w-12 text-gray-400 mx-auto mb-4": "h-12 w-12 text-gray-400 mx-auto mb-4",
    "/admin/assignments?filter=unassigned": "/admin/assignments?filter=unassigned",
    "[Simple Login] Attempting login for:": "[Simple Login] Attempting login for:",
    "text-lg font-bold mb-2 text-on-white": "text-lg font-bold mb-2 text-on-white",
    "text-lg font-bold mb-2 text-gray-900": "text-lg font-bold mb-2 text-gray-900",
    "text-sm font-semibold text-green-800": "text-sm font-semibold text-green-800",
    "font-semibold text-gray-900 truncate": "font-semibold text-gray-900 truncate",
    "mt-2 text-xs text-gray-600 font-mono": "mt-2 text-xs text-gray-600 font-mono",
    "list-disc list-inside space-y-1 ml-4": "list-disc list-inside space-y-1 ml-4",
    "mt-3 pt-2 border-t border-yellow-300": "mt-3 pt-2 border-t border-yellow-300",
    "text-lg font-semibold text-green-800": "text-lg font-semibold text-green-800",
    "grid md:grid-cols-3 gap-8 steps-list": "grid md:grid-cols-3 gap-8 steps-list",
    "space-y-2 text-body text-neutral-700": "space-y-2 text-body text-neutral-700",
    "text-gray-600 font-mono text-xs mt-1": "text-gray-600 font-mono text-xs mt-1",
    "list-disc list-inside space-y-1 ml-2": "list-disc list-inside space-y-1 ml-2",
    ",\n      monthlyDiscretionaryIncome: ": ",\n      monthlyDiscretionaryIncome: ",
    "mx-auto h-12 w-12 text-gray-400 mb-4": "mx-auto h-12 w-12 text-gray-400 mb-4",
    "text-xl font-semibold text-green-700": "text-xl font-semibold text-green-700",
    "mb-6 border-b-2 border-gray-800 pb-4": "mb-6 border-b-2 border-gray-800 pb-4",
    "text-lg font-bold text-blue-900 mb-3": "text-lg font-bold text-blue-900 mb-3",
    "text-lg font-bold text-gray-900 mb-3": "text-lg font-bold text-gray-900 mb-3",
    "text-sm font-semibold text-green-900": "text-sm font-semibold text-green-900",
    "bg-white border-2 border-neutral-300": "bg-white border-2 border-neutral-300",
    "transition-all duration-300 ease-out": "transition-all duration-300 ease-out",
    "flex-1 p-4 space-y-2 overflow-y-auto": "flex-1 p-4 space-y-2 overflow-y-auto",
    "emily.rodriguez@helocaccelerator.com": "emily.rodriguez@helocaccelerator.com",
    ")[0]})`,\n    firstName: email.split(": ")[0]})`,\n    firstName: email.split(",
    "Interest rate must be greater than 0": "Interest rate must be greater than 0",
    "Division resulted in infinite or NaN": "Division resulted in infinite or NaN",
    " || \n        error.message.includes(": " || \n        error.message.includes(",
    ") ||\n        error.message.includes(": ") ||\n        error.message.includes(",
    ")}\"`\n          if (typeof value === ": ")}\"`\n          if (typeof value === ",
    ");\n    expect(input).toHaveAttribute(": ");\n    expect(input).toHaveAttribute(",
    ");\n    const link = screen.getByRole(": ");\n    const link = screen.getByRole(",
    "should register new user successfully": "should register new user successfully",
    "should handle very low interest rates": "should handle very low interest rates",
    "should handle very small loan amounts": "should handle very small loan amounts",
    "should handle very large loan amounts": "should handle very large loan amounts",
    ", () => {\n    const primaryColors = [": ", () => {\n    const primaryColors = [",
    "should save scenarios to localStorage": "should save scenarios to localStorage",
    "text-4xl font-bold text-gray-900 mb-4": "text-4xl font-bold text-gray-900 mb-4",
    "grid grid-cols-1 lg:grid-cols-2 gap-6": "grid grid-cols-1 lg:grid-cols-2 gap-6",
    "text-4xl font-bold text-gray-900 mb-8": "text-4xl font-bold text-gray-900 mb-8",
    "grid grid-cols-1 md:grid-cols-2 gap-4": "grid grid-cols-1 md:grid-cols-2 gap-4",
    "grid grid-cols-1 md:grid-cols-3 gap-4": "grid grid-cols-1 md:grid-cols-3 gap-4",
    "border border-gray-200 rounded-lg p-4": "border border-gray-200 rounded-lg p-4",
    "SELECT id FROM users WHERE email = $1": "SELECT id FROM users WHERE email = $1",
    "text-2xl font-bold mb-4 text-on-white": "text-2xl font-bold mb-4 text-on-white",
    "text-3xl font-bold text-gray-900 mb-2": "text-3xl font-bold text-gray-900 mb-2",
    "text-sm font-medium text-red-800 mb-1": "text-sm font-medium text-red-800 mb-1",
    "grid grid-cols-1 md:grid-cols-2 gap-6": "grid grid-cols-1 md:grid-cols-2 gap-6",
    "flex justify-between items-start mb-4": "flex justify-between items-start mb-4",
    "max-w-md w-full space-y-8 text-center": "max-w-md w-full space-y-8 text-center",
    "mt-2 text-3xl font-bold text-gray-900": "mt-2 text-3xl font-bold text-gray-900",
    "text-5xl font-bold text-gray-900 mb-6": "text-5xl font-bold text-gray-900 mb-6",
    "grid grid-cols-2 md:grid-cols-4 gap-4": "grid grid-cols-2 md:grid-cols-4 gap-4",
    "grid grid-cols-1 lg:grid-cols-2 gap-8": "grid grid-cols-1 lg:grid-cols-2 gap-8",
    "grid grid-cols-1 lg:grid-cols-3 gap-8": "grid grid-cols-1 lg:grid-cols-3 gap-8",
    "grid grid-cols-1 md:grid-cols-2 gap-3": "grid grid-cols-1 md:grid-cols-2 gap-3",
    "bg-gray-50 rounded-lg p-8 text-center": "bg-gray-50 rounded-lg p-8 text-center",
    "flex justify-between items-start mb-3": "flex justify-between items-start mb-3",
    "text-2xl font-bold text-gray-900 mb-1": "text-2xl font-bold text-gray-900 mb-1",
    "border border-gray-300 rounded-lg p-4": "border border-gray-300 rounded-lg p-4",
    "w-2 h-2 bg-gray-500 rounded-full mr-2": "w-2 h-2 bg-gray-500 rounded-full mr-2",
    "w-2 h-2 bg-blue-600 rounded-full mr-2": "w-2 h-2 bg-blue-600 rounded-full mr-2",
    "text-lg font-bold text-green-900 mb-3": "text-lg font-bold text-green-900 mb-3",
    "grid grid-cols-1 md:grid-cols-3 gap-6": "grid grid-cols-1 md:grid-cols-3 gap-6",
    "text-sm font-semibold text-purple-900": "text-sm font-semibold text-purple-900",
    ")\n      } else {\n        console.log(": ")\n      } else {\n        console.log(",
    "bg-red-50 border-red-200 text-red-800": "bg-red-50 border-red-200 text-red-800",
    "animate-spin h-4 w-4 text-neutral-400": "animate-spin h-4 w-4 text-neutral-400",
    "hidden md:flex items-center space-x-1": "hidden md:flex items-center space-x-1",
    ",\n    isActive\n      ? cn(\n          ": ",\n    isActive\n      ? cn(\n          ",
    "hidden sm:flex items-center space-x-1": "hidden sm:flex items-center space-x-1",
    "White on white - completely invisible": "White on white - completely invisible",
    "Black on black - completely invisible": "Black on black - completely invisible",
    ", result.issues);\n      console.info(": ", result.issues);\n      console.info(",
    "should return 0 when MIP not required": "should return 0 when MIP not required",
    "Cannot update settings on server side": "Cannot update settings on server side",
    ", scenarios.length)\n  \n  console.log(": ", scenarios.length)\n  \n  console.log(",
    "HELOC usage would exceed credit limit": "HELOC usage would exceed credit limit",
    ": result.limit.toString(),\n          ": ": result.limit.toString(),\n          ",
    ");\n    const input = screen.getByRole(": ");\n    const input = screen.getByRole(",
    "should return zero for fully paid loan": "should return zero for fully paid loan",
    "should handle very high interest rates": "should handle very high interest rates",
    ")).not.toBeInTheDocument()\n  })\n\n  it(": ")).not.toBeInTheDocument()\n  })\n\n  it(",
    ")\n    expect(message).toHaveAttribute(": ")\n    expect(message).toHaveAttribute(",
    ", () => {\n      expect(rgbStringToRgb(": ", () => {\n      expect(rgbStringToRgb(",
    ");\n      expect(safeColors).toContain(": ");\n      expect(safeColors).toContain(",
    "should validate minimal required input": "should validate minimal required input",
    "should reject inconsistent income data": "should reject inconsistent income data",
    "bg-white rounded-lg shadow-md p-4 mb-8": "bg-white rounded-lg shadow-md p-4 mb-8",
    "mt-8 text-center text-sm text-gray-500": "mt-8 text-center text-sm text-gray-500",
    "✅ Database scenario saved successfully": "✅ Database scenario saved successfully",
    "flex items-center justify-between mb-2": "flex items-center justify-between mb-2",
    ")\n      }\n\n      await query(\n        ": ")\n      }\n\n      await query(\n        ",
    "mt-2 text-center text-sm text-gray-600": "mt-2 text-center text-sm text-gray-600",
    "text-lg font-medium text-gray-900 mb-2": "text-lg font-medium text-gray-900 mb-2",
    "flex justify-between items-center mb-4": "flex justify-between items-center mb-4",
    "p-3 font-mono text-xs text-primary-900": "p-3 font-mono text-xs text-primary-900",
    "mt-2 text-center text-lg text-gray-600": "mt-2 text-center text-lg text-gray-600",
    "This is a description for the checkbox": "This is a description for the checkbox",
    "flex items-center justify-between mb-3": "flex items-center justify-between mb-3",
    "mt-3 text-xs text-gray-500 text-center": "mt-3 text-xs text-gray-500 text-center",
    "text-sm font-medium text-blue-800 mb-1": "text-sm font-medium text-blue-800 mb-1",
    "text-xs text-gray-500 text-center mt-4": "text-xs text-gray-500 text-center mt-4",
    ";\n  const labelClasses = priority === ": ";\n  const labelClasses = priority === ",
    "bg-blue-600 text-white border-blue-800": "bg-blue-600 text-white border-blue-800",
    "text-sm font-medium text-gray-600 mb-3": "text-sm font-medium text-gray-600 mb-3",
    "text-sm font-medium text-blue-700 mb-3": "text-sm font-medium text-blue-700 mb-3",
    "text-sm font-medium text-gray-700 mb-3": "text-sm font-medium text-gray-700 mb-3",
    "text-sm font-medium text-gray-700 mb-2": "text-sm font-medium text-gray-700 mb-2",
    ")\n      return\n    }\n\n    console.log(": ")\n      return\n    }\n\n    console.log(",
    "bg-blue-500 text-white border-blue-500": "bg-blue-500 text-white border-blue-500",
    "bg-gray-500 text-white border-gray-500": "bg-gray-500 text-white border-gray-500",
    "bg-red-100 text-red-800 border-red-200": "bg-red-100 text-red-800 border-red-200",
    "text-neutral-700 dark:text-neutral-300": "text-neutral-700 dark:text-neutral-300",
    "text-h4 font-semibold text-neutral-900": "text-h4 font-semibold text-neutral-900",
    "flex justify-between items-center mb-2": "flex justify-between items-center mb-2",
    "flex items-center justify-between h-16": "flex items-center justify-between h-16",
    "text-neutral-500 dark:text-neutral-400": "text-neutral-500 dark:text-neutral-400",
    "Form field contrast validation failed:": "Form field contrast validation failed:",
    "should not require PMI when LTV <= 80%": "should not require PMI when LTV <= 80%",
    "should return success for valid inputs": "should return success for valid inputs",
    "LTV calculation failed: missing inputs": "LTV calculation failed: missing inputs",
    ";\n  else if (meetsAA) achievedLevel = ": ";\n  else if (meetsAA) achievedLevel = ",
    ")} is null/undefined`)\n    steps.push(": ")} is null/undefined`)\n    steps.push(",
    ")\n  const userIndex = emailHash.split(": ")\n  const userIndex = emailHash.split(",
    ").map(h => h.trim().replace(/^\"|\"$/g, ": ").map(h => h.trim().replace(/^\"|\"$/g, ",
    "\n        if (numValue < 50000) return ": "\n        if (numValue < 50000) return ",
    ") {\n  const printWindow = window.open(": ") {\n  const printWindow = window.open(",
    "HOA fees must be between $0 and $5,000": "HOA fees must be between $0 and $5,000",
    ", async () => {\n      const password = ": ", async () => {\n      const password = ",
    ", () => {\n    const darkBackgrounds = [": ", () => {\n    const darkBackgrounds = [",
    "should reject negative mortgage balance": "should reject negative mortgage balance",
    "should reject inconsistent expense data": "should reject inconsistent expense data",
    "text-lg text-gray-600 max-w-2xl mx-auto": "text-lg text-gray-600 max-w-2xl mx-auto",
    "Making POST request to /api/scenario...": "Making POST request to /api/scenario...",
    "text-gray-400 group-hover:text-gray-600": "text-gray-400 group-hover:text-gray-600",
    ",\n    nmlsNumber: agent?.nmlsNumber || ": ",\n    nmlsNumber: agent?.nmlsNumber || ",
    "block text-sm font-medium text-gray-700": "block text-sm font-medium text-gray-700",
    "text-sm font-medium text-green-800 mb-1": "text-sm font-medium text-green-800 mb-1",
    "mt-2 text-xs text-center text-green-600": "mt-2 text-xs text-center text-green-600",
    "text-sm text-gray-600 mb-2 line-clamp-2": "text-sm text-gray-600 mb-2 line-clamp-2",
    "text-gray-600 text-sm mb-4 line-clamp-2": "text-gray-600 text-sm mb-4 line-clamp-2",
    "list-decimal list-inside space-y-2 ml-4": "list-decimal list-inside space-y-2 ml-4",
    "text-xl text-gray-700 max-w-3xl mx-auto": "text-xl text-gray-700 max-w-3xl mx-auto",
    ">\n            <Link\n              href=": ">\n            <Link\n              href=",
    "p-3 bg-neutral-100 rounded text-body-sm": "p-3 bg-neutral-100 rounded text-body-sm",
    "\n                      : log.level === ": "\n                      : log.level === ",
    " :\n                      log.level === ": " :\n                      log.level === ",
    ";\n\n  const inputClasses = priority === ": ";\n\n  const inputClasses = priority === ",
    "\n                    btn.style.color = ": "\n                    btn.style.color = ",
    ", scenarioName.trim())\n    console.log(": ", scenarioName.trim())\n    console.log(",
    "list-disc list-inside space-y-1 text-sm": "list-disc list-inside space-y-1 text-sm",
    ";\n        canvas.style.pointerEvents = ": ";\n        canvas.style.pointerEvents = ",
    "should handle invalid inputs gracefully": "should handle invalid inputs gracefully",
    "LTV calculation failed: invalid numbers": "LTV calculation failed: invalid numbers",
    ") {\n      window.localStorage?.setItem(": ") {\n      window.localStorage?.setItem(",
    "Loan term must be greater than 0 months": "Loan term must be greater than 0 months",
    "Discretionary income cannot be negative": "Discretionary income cannot be negative",
    "The interest rate appears to be invalid": "The interest rate appears to be invalid",
    "Mortgage balance exceeds property value": "Mortgage balance exceeds property value",
    "))\n        if (isNaN(numValue)) return ": "))\n        if (isNaN(numValue)) return ",
    ") {\n    return input.toLowerCase() === ": ") {\n    return input.toLowerCase() === ",
    ")\n  const realIp = request.headers.get(": ")\n  const realIp = request.headers.get(",
    "should not have accessibility violations": "should not have accessibility violations",
    ");\n      expect(button).toHaveAttribute(": ");\n      expect(button).toHaveAttribute(",
    ", async () => {\n      const variants = [": ", async () => {\n      const variants = [",
    ");\n    const message = screen.getByText(": ");\n    const message = screen.getByText(",
    ")\n      const request = new NextRequest(": ")\n      const request = new NextRequest(",
    " }\n      )\n\n      expect(newToken).toBe(": " }\n      )\n\n      expect(newToken).toBe(",
    "should handle limited HELOC availability": "should handle limited HELOC availability",
    "should handle negative values gracefully": "should handle negative values gracefully",
    ", () => {\n    const lightBackgrounds = [": ", () => {\n    const lightBackgrounds = [",
    ");\n    const result2 = validateContrast(": ");\n    const result2 = validateContrast(",
    "A scenario with this name already exists": "A scenario with this name already exists",
    "An error occurred during authentication.": "An error occurred during authentication.",
    "text-sm font-semibold text-blue-800 mb-2": "text-sm font-semibold text-blue-800 mb-2",
    "text-xl font-semibold text-gray-900 mb-4": "text-xl font-semibold text-gray-900 mb-4",
    "text-lg font-semibold text-blue-900 mb-2": "text-lg font-semibold text-blue-900 mb-2",
    "text-4xl font-bold text-primary-900 mb-4": "text-4xl font-bold text-primary-900 mb-4",
    "text-2xl font-bold text-primary-900 mb-6": "text-2xl font-bold text-primary-900 mb-6",
    "text-xl font-semibold text-gray-900 mb-2": "text-xl font-semibold text-gray-900 mb-2",
    "text-sm font-medium text-yellow-800 mb-2": "text-sm font-medium text-yellow-800 mb-2",
    ",\n            email: data.data.email || ": ",\n            email: data.data.email || ",
    "w-full bg-gray-200 rounded-full h-2 mb-4": "w-full bg-gray-200 rounded-full h-2 mb-4",
    "bg-green-600 text-white border-green-800": "bg-green-600 text-white border-green-800",
    ") {\n        const netIncome = field === ": ") {\n        const netIncome = field === ",
    "text-lg font-semibold text-gray-900 mb-4": "text-lg font-semibold text-gray-900 mb-4",
    "font-semibold text-gray-900 mb-2 text-sm": "font-semibold text-gray-900 mb-2 text-sm",
    "relative h-16 bg-gray-100 rounded-lg p-2": "relative h-16 bg-gray-100 rounded-lg p-2",
    "grid grid-cols-2 gap-x-4 gap-y-1 text-sm": "grid grid-cols-2 gap-x-4 gap-y-1 text-sm",
    "bg-green-500 text-white border-green-500": "bg-green-500 text-white border-green-500",
    "bg-blue-50 border-blue-200 text-blue-800": "bg-blue-50 border-blue-200 text-blue-800",
    "text-body font-semibold text-neutral-700": "text-body font-semibold text-neutral-700",
    "White on light gray - very poor contrast": "White on light gray - very poor contrast",
    "Error Handling and Debugging Integration": "Error Handling and Debugging Integration",
    "Main home mortgage acceleration analysis": "Main home mortgage acceleration analysis",
    "The payment amount appears to be invalid": "The payment amount appears to be invalid",
    "\n        if (numValue > 2000000) return ": "\n        if (numValue > 2000000) return ",
    "Enter as percentage (e.g., 6.5 for 6.5%)": "Enter as percentage (e.g., 6.5 for 6.5%)",
    "Maximum credit line available (optional)": "Maximum credit line available (optional)",
    "Current estimated value of your property": "Current estimated value of your property",
    ")\n  } else if (typeof config.origin === ": ")\n  } else if (typeof config.origin === ",
    ")\n  const referer = request.headers.get(": ")\n  const referer = request.headers.get(",
    "Insurance must be between $0 and $10,000": "Insurance must be between $0 and $10,000",
    "should return user scenarios successfully": "should return user scenarios successfully",
    ", // Too weak\n          confirmPassword: ": ", // Too weak\n          confirmPassword: ",
    "This will delete all your data. Continue?": "This will delete all your data. Continue?",
    ")).toBeNull();\n    });\n  });\n\n  describe(": ")).toBeNull();\n    });\n  });\n\n  describe(",
    ", () => {\n      expect(isSafeCombination(": ", () => {\n      expect(isSafeCombination(",
    ");\n      expect(safeTexts).not.toContain(": ");\n      expect(safeTexts).not.toContain(",
    ")).toBeInTheDocument()\n    })\n  })\n\n  it(": ")).toBeInTheDocument()\n    })\n  })\n\n  it(",
    "Monthly expenses cannot exceed net income": "Monthly expenses cannot exceed net income",
    ",\n    mobilePhone: agent?.mobilePhone || ": ",\n    mobilePhone: agent?.mobilePhone || ",
    "Search agents by name, email, or phone...": "Search agents by name, email, or phone...",
    "text-sm font-semibold text-green-800 mb-2": "text-sm font-semibold text-green-800 mb-2",
    "text-2xl font-semibold text-gray-800 mb-4": "text-2xl font-semibold text-gray-800 mb-4",
    "text-lg font-semibold text-green-800 mb-2": "text-lg font-semibold text-green-800 mb-2",
    "🎮 DEMO MODE - Use demo credentials below": "🎮 DEMO MODE - Use demo credentials below",
    "text-2xl font-semibold text-gray-900 mb-4": "text-2xl font-semibold text-gray-900 mb-4",
    ",\n                          newPassword: ": ",\n                          newPassword: ",
    " \n            : isEmpty \n              ? ": " \n            : isEmpty \n              ? ",
    "text-lg font-semibold text-green-900 mb-4": "text-lg font-semibold text-green-900 mb-4",
    "bg-gray-100 text-gray-600 border-gray-300": "bg-gray-100 text-gray-600 border-gray-300",
    "bg-blue-100 text-blue-800 border-blue-200": "bg-blue-100 text-blue-800 border-blue-200",
    "text-body-sm font-medium text-neutral-700": "text-body-sm font-medium text-neutral-700",
    "Form Validation - LTV and PMI Integration": "Form Validation - LTV and PMI Integration",
    "❌ Error saving scenarios to localStorage:": "❌ Error saving scenarios to localStorage:",
    "Interest rate seems unusually high (>50%)": "Interest rate seems unusually high (>50%)",
    "] : (row.isActive ?? true),\n    bio: row[": "] : (row.isActive ?? true),\n    bio: row[",
    "font-src 'self' https://fonts.gstatic.com": "font-src 'self' https://fonts.gstatic.com",
    "connect-src 'self' https://api.vercel.com": "connect-src 'self' https://api.vercel.com",
    "LTV calculation failed during validation:": "LTV calculation failed during validation:",
    ");\n    \n    expect(input).toHaveAttribute(": ");\n    \n    expect(input).toHaveAttribute(",
    ")\n        expect(data.data.lastName).toBe(": ")\n        expect(data.data.lastName).toBe(",
    "should handle rounding precision correctly": "should handle rounding precision correctly",
    "should handle near-zero balances correctly": "should handle near-zero balances correctly",
    ")).toBe(false);\n    });\n  });\n\n  describe(": ")).toBe(false);\n    });\n  });\n\n  describe(",
    ");\n      expect(safeColors).not.toContain(": ");\n      expect(safeColors).not.toContain(",
    "bg-white shadow rounded-lg overflow-hidden": "bg-white shadow rounded-lg overflow-hidden",
    "JWT_SECRET environment variable is not set": "JWT_SECRET environment variable is not set",
    "New password and confirmation do not match": "New password and confirmation do not match",
    "text-xs text-green-700 font-mono space-y-1": "text-xs text-green-700 font-mono space-y-1",
    "text-sm text-green-700 font-mono space-y-1": "text-sm text-green-700 font-mono space-y-1",
    "grid grid-cols-1 md:grid-cols-3 gap-6 mb-8": "grid grid-cols-1 md:grid-cols-3 gap-6 mb-8",
    "text-body text-neutral-700 leading-relaxed": "text-body text-neutral-700 leading-relaxed",
    ")\n    } catch (err) {\n      console.error(": ")\n    } catch (err) {\n      console.error(",
    "text-xl text-primary-600 max-w-3xl mx-auto": "text-xl text-primary-600 max-w-3xl mx-auto",
    "mt-6 text-6xl font-extrabold text-gray-900": "mt-6 text-6xl font-extrabold text-gray-900",
    "s okay!\"\n              : \"Sorry, we couldn": "s okay!\"\n              : \"Sorry, we couldn",
    "bg-purple-600 text-white border-purple-800": "bg-purple-600 text-white border-purple-800",
    "Interest rate must be between 0.1% and 30%": "Interest rate must be between 0.1% and 30%",
    ",\n};\n\nexport function Icon({ name, size = ": ",\n};\n\nexport function Icon({ name, size = ",
    "bg-purple-500 text-white border-purple-500": "bg-purple-500 text-white border-purple-500",
    ",\n      nmls: assignedAgent.nmlsNumber || ": ",\n      nmls: assignedAgent.nmlsNumber || ",
    "should show PMI as required when LTV > 80%": "should show PMI as required when LTV > 80%",
    "should provide suggested PMI amount button": "should provide suggested PMI amount button",
    "\n    }\n  }\n\n  getLogs(category?: DebugLog[": "\n    }\n  }\n\n  getLogs(category?: DebugLog[",
    "Error reading scenarios from localStorage:": "Error reading scenarios from localStorage:",
    "\n        }\n      )\n    })\n\n    process.on(": "\n        }\n      )\n    })\n\n    process.on(",
    " })\n  const link = document.createElement(": " })\n  const link = document.createElement(",
    ": result.retryAfter.toString(),\n          ": ": result.retryAfter.toString(),\n          ",
    ");\n      \n      expect(title.tagName).toBe(": ");\n      \n      expect(title.tagName).toBe(",
    ")\n        expect(data.data.shared_by).toBe(": ")\n        expect(data.data.shared_by).toBe(",
    ")\n        expect(data.data.firstName).toBe(": ")\n        expect(data.data.firstName).toBe(",
    ")\n\n        const request = new NextRequest(": ")\n\n        const request = new NextRequest(",
    ", process.env.JWT_SECRET)\n    })\n\n    test(": ", process.env.JWT_SECRET)\n    })\n\n    test(",
    "should have proper accessibility attributes": "should have proper accessibility attributes",
    ")).toBeNull();\n      expect(rgbStringToRgb(": ")).toBeNull();\n      expect(rgbStringToRgb(",
    ")).toBeNull();\n    });\n  });\n});\n\ndescribe(": ")).toBeNull();\n    });\n  });\n});\n\ndescribe(",
    "❌ Cannot save: Missing results or form data": "❌ Cannot save: Missing results or form data",
    "bg-white rounded-lg shadow-lg p-8 space-y-6": "bg-white rounded-lg shadow-lg p-8 space-y-6",
    "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z": "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z",
    " : `Welcome back, ${session?.user?.name || ": " : `Welcome back, ${session?.user?.name || ",
    "text-xl font-semibold text-primary-800 mb-3": "text-xl font-semibold text-primary-800 mb-3",
    "text-lg font-semibold text-primary-800 mb-2": "text-lg font-semibold text-primary-800 mb-2",
    ",\n          lastName: demoUser.name?.split(": ",\n          lastName: demoUser.name?.split(",
    " />\n          ) : (\n            <Icon name=": " />\n          ) : (\n            <Icon name=",
    "flex items-center justify-center gap-2 mb-1": "flex items-center justify-center gap-2 mb-1",
    "confirmation-text confirmation-instructions": "confirmation-text confirmation-instructions",
    "bg-green-50 border-green-200 text-green-800": "bg-green-50 border-green-200 text-green-800",
    ",\n                      option.disabled && ": ",\n                      option.disabled && ",
    "appearance-none !bg-white !text-neutral-900": "appearance-none !bg-white !text-neutral-900",
    "border-neutral-300 hover:border-neutral-400": "border-neutral-300 hover:border-neutral-400",
    "should handle calculation errors gracefully": "should handle calculation errors gracefully",
    "LTV calculation failed: non-positive values": "LTV calculation failed: non-positive values",
    "Power operation resulted in infinite or NaN": "Power operation resulted in infinite or NaN",
    "The loan term seems unusually short or long": "The loan term seems unusually short or long",
    ")\n  })\n\n  return [headerRow, ...rows].join(": ")\n  })\n\n  return [headerRow, ...rows].join(",
    "Your current monthly mortgage payment (P&I)": "Your current monthly mortgage payment (P&I)",
    "Property tax must be between $0 and $50,000": "Property tax must be between $0 and $50,000",
    ");\n    expect(errorMessage).toHaveAttribute(": ");\n    expect(errorMessage).toHaveAttribute(",
    "should calculate cumulative totals correctly": "should calculate cumulative totals correctly",
    "should show HELOC benefits when advantageous": "should show HELOC benefits when advantageous",
    "should handle equal mortgage and HELOC rates": "should handle equal mortgage and HELOC rates",
    "should handle very high discretionary income": "should handle very high discretionary income",
    "should handle corrupted JSON data gracefully": "should handle corrupted JSON data gracefully",
    "Network error - please check your connection": "Network error - please check your connection",
    "block text-sm font-medium text-gray-700 mb-1": "block text-sm font-medium text-gray-700 mb-1",
    ">\n              <input\n                type=": ">\n              <input\n                type=",
    "bg-white rounded-lg shadow p-6 animate-pulse": "bg-white rounded-lg shadow p-6 animate-pulse",
    "text-lg font-semibold text-gray-900 truncate": "text-lg font-semibold text-gray-900 truncate",
    "bg-white rounded-lg p-6 max-w-md w-full mx-4": "bg-white rounded-lg p-6 max-w-md w-full mx-4",
    "font-mono text-sm space-y-2 text-primary-900": "font-mono text-sm space-y-2 text-primary-900",
    "text-left p-3 font-semibold text-primary-900": "text-left p-3 font-semibold text-primary-900",
    "Invalid email or password. Please try again.": "Invalid email or password. Please try again.",
    ",\n          firstName: demoUser.name?.split(": ",\n          firstName: demoUser.name?.split(",
    "\n                      : error.severity === ": "\n                      : error.severity === ",
    " :\n                      error.severity === ": " :\n                      error.severity === ",
    "}`\n    : `text-base text-center ${isEmpty ? ": "}`\n    : `text-base text-center ${isEmpty ? ",
    "Debug info also available at window.envDebug": "Debug info also available at window.envDebug",
    "bg-green-100 text-green-800 border-green-200": "bg-green-100 text-green-800 border-green-200",
    "bg-white shadow-lg border border-neutral-100": "bg-white shadow-lg border border-neutral-100",
    "mt-1 text-body-sm text-red-600 error-message": "mt-1 text-body-sm text-red-600 error-message",
    "useTheme must be used within a ThemeProvider": "useTheme must be used within a ThemeProvider",
    "Calculator Forms - LTV/PMI Integration Tests": "Calculator Forms - LTV/PMI Integration Tests",
    "should handle 80.1% LTV (just over boundary)": "should handle 80.1% LTV (just over boundary)",
    ")\n    }).catch(err => {\n      console.error(": ")\n    }).catch(err => {\n      console.error(",
    "Monthly payment insufficient to pay off loan": "Monthly payment insufficient to pay off loan",
    "HELOC interest rate as percentage (optional)": "HELOC interest rate as percentage (optional)",
    "All monthly expenses except mortgage payment": "All monthly expenses except mortgage payment",
    "Income minus expenses minus mortgage payment": "Income minus expenses minus mortgage payment",
    "].includes(parsed.protocol)) {\n      return ": "].includes(parsed.protocol)) {\n      return ",
    "max-age=31536000; includeSubDomains; preload": "max-age=31536000; includeSubDomains; preload",
    ");\n    const errorMessage = screen.getByText(": ");\n    const errorMessage = screen.getByText(",
    "should calculate percentage savings correctly": "should calculate percentage savings correctly",
    ");\n      \n      expect(safeColors).toContain(": ");\n      \n      expect(safeColors).toContain(",
    "should return empty array when no data exists": "should return empty array when no data exists",
    "Net income cannot be higher than gross income": "Net income cannot be higher than gross income",
    "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z": "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z",
    "text-blue-600 hover:text-blue-700 font-medium": "text-blue-600 hover:text-blue-700 font-medium",
    "text-xl text-gray-600 mb-12 max-w-3xl mx-auto": "text-xl text-gray-600 mb-12 max-w-3xl mx-auto",
    ")\n        } else {\n          throw new Error(": ")\n        } else {\n          throw new Error(",
    "SELECT password_hash FROM users WHERE id = $1": "SELECT password_hash FROM users WHERE id = $1",
    "First name, last name, and email are required": "First name, last name, and email are required",
    ")\n      }\n    } catch (err) {\n      setError(": ")\n      }\n    } catch (err) {\n      setError(",
    "font-medium text-blue-600 hover:text-blue-500": "font-medium text-blue-600 hover:text-blue-500",
    "bg-white rounded-lg shadow-md overflow-hidden": "bg-white rounded-lg shadow-md overflow-hidden",
    "bg-white rounded-lg shadow-md p-8 text-center": "bg-white rounded-lg shadow-md p-8 text-center",
    ",\n                          confirmPassword: ": ",\n                          confirmPassword: ",
    ">\n          <div>\n            <label htmlFor=": ">\n          <div>\n            <label htmlFor=",
    "grid grid-cols-1 sm:grid-cols-3 gap-4 text-xs": "grid grid-cols-1 sm:grid-cols-3 gap-4 text-xs",
    ">{description}</p>\n      <input\n        type=": ">{description}</p>\n      <input\n        type=",
    " \n              : isEmpty \n                ? ": " \n              : isEmpty \n                ? ",
    ">\n              <button\n                type=": ">\n              <button\n                type=",
    "Remaining term must be between 1 and 40 years": "Remaining term must be between 1 and 40 years",
    ").format(typeof formData.monthlyExpenses === ": ").format(typeof formData.monthlyExpenses === ",
    "grid grid-cols-1 md:grid-cols-2 gap-4 text-sm": "grid grid-cols-1 md:grid-cols-2 gap-4 text-sm",
    ",\n      mobile: assignedAgent.mobilePhone || ": ",\n      mobile: assignedAgent.mobilePhone || ",
    "should display LTV analysis in compact format": "should display LTV analysis in compact format",
    "should handle exactly 80% LTV (boundary case)": "should handle exactly 80% LTV (boundary case)",
    "]): string {\n    switch (level) {\n      case ": "]): string {\n    switch (level) {\n      case ",
    "localStorage is not available in this browser": "localStorage is not available in this browser",
    ") {\n    return 0\n  }\n\n  if (typeof value === ": ") {\n    return 0\n  }\n\n  if (typeof value === ",
    "Enter your current mortgage principal balance": "Enter your current mortgage principal balance",
    ")\n  \n  if (!printWindow) {\n    console.error(": ")\n  \n  if (!printWindow) {\n    console.error(",
    ") // Remove SQL keywords\n    .replace(/--/g, ": ") // Remove SQL keywords\n    .replace(/--/g, ",
    ");\n    const helpLink = screen.getByLabelText(": ");\n    const helpLink = screen.getByLabelText(",
    "should reject registration with existing email": "should reject registration with existing email",
    "\n      ]\n\n      const validEmails = [\n        ": "\n      ]\n\n      const validEmails = [\n        ",
    "should return full principal for zero payments": "should return full principal for zero payments",
    "Please type \"DELETE ALL DATA\" exactly as shown": "Please type \"DELETE ALL DATA\" exactly as shown",
    ")).toBe(true);\n      expect(isSafeCombination(": ")).toBe(true);\n      expect(isSafeCombination(",
    ", () => {\n    const result = validateContrast(": ", () => {\n    const result = validateContrast(",
    "should throw error when data size is too large": "should throw error when data size is too large",
    "bg-red-50 border border-red-200 rounded-lg p-4": "bg-red-50 border border-red-200 rounded-lg p-4",
    "HELOC Accelerator - Mortgage Payoff Calculator": "HELOC Accelerator - Mortgage Payoff Calculator",
    "bg-red-50 border border-red-200 rounded-md p-4": "bg-red-50 border border-red-200 rounded-md p-4",
    "w-5 h-5 text-red-600 mr-3 mt-0.5 flex-shrink-0": "w-5 h-5 text-red-600 mr-3 mt-0.5 flex-shrink-0",
    "Type the confirmation text exactly as shown...": "Type the confirmation text exactly as shown...",
    "bg-purple-50 border-purple-200 text-purple-800": "bg-purple-50 border-purple-200 text-purple-800",
    ",\n            lastName: data.data.lastName || ": ",\n            lastName: data.data.lastName || ",
    "text-h1 text-neutral-900 dark:text-neutral-100": "text-h1 text-neutral-900 dark:text-neutral-100",
    "bg-white rounded-md p-3 border border-blue-200": "bg-white rounded-md p-3 border border-blue-200",
    "\n              label={ltvInfo.isMIPRequired ? ": "\n              label={ltvInfo.isMIPRequired ? ",
    ",\n    description: initialData.description || ": ",\n    description: initialData.description || ",
    ").format(typeof formData.monthlyNetIncome === ": ").format(typeof formData.monthlyNetIncome === ",
    "bg-red-50 border border-red-200 rounded-lg p-6": "bg-red-50 border border-red-200 rounded-lg p-6",
    "flex flex-col sm:flex-row gap-4 justify-center": "flex flex-col sm:flex-row gap-4 justify-center",
    "bg-yellow-50 border-yellow-200 text-yellow-800": "bg-yellow-50 border-yellow-200 text-yellow-800",
    "mt-1 text-body-sm text-neutral-600 helper-text": "mt-1 text-body-sm text-neutral-600 helper-text",
    "w-8 h-8 bg-gray-200 rounded-full animate-pulse": "w-8 h-8 bg-gray-200 rounded-full animate-pulse",
    ",\n      divider: true,\n    },\n    {\n      id: ": ",\n      divider: true,\n    },\n    {\n      id: ",
    "should show PMI field with conditional styling": "should show PMI field with conditional styling",
    "should validate PMI based on LTV in form rules": "should validate PMI based on LTV in form rules",
    "✅ Scenarios saved to localStorage successfully": "✅ Scenarios saved to localStorage successfully",
    ")) {\n      throw error\n    }\n\n    console.log(": ")) {\n      throw error\n    }\n\n    console.log(",
    ") obj[header] = true\n      else if (value === ": ") obj[header] = true\n      else if (value === ",
    ")\n        \n        if (isNaN(payment)) return ": ")\n        \n        if (isNaN(payment)) return ",
    "LTV calculation failed during form validation:": "LTV calculation failed during form validation:",
    ");\n      const sectionTitle = screen.getByText(": ");\n      const sectionTitle = screen.getByText(",
    ", () => {\n      const mockUser = {\n        id: ": ", () => {\n      const mockUser = {\n        id: ",
    "should not submit on Enter when text is invalid": "should not submit on Enter when text is invalid",
    ")).toBe(false);\n      expect(isSafeCombination(": ")).toBe(false);\n      expect(isSafeCombination(",
    ", () => {\n    const result1 = validateContrast(": ", () => {\n    const result1 = validateContrast(",
    "Remaining term must be between 1 and 600 months": "Remaining term must be between 1 and 600 months",
    "🗄️ Production mode: Saving to database via API": "🗄️ Production mode: Saving to database via API",
    ",\n    phoneExtension: agent?.phoneExtension || ": ",\n    phoneExtension: agent?.phoneExtension || ",
    "\n    })\n\n  } catch (error) {\n    console.error(": "\n    })\n\n  } catch (error) {\n    console.error(",
    ")\n\n    try {\n      const result = await signIn(": ")\n\n    try {\n      const result = await signIn(",
    ") return\n    if (!session) {\n      router.push(": ") return\n    if (!session) {\n      router.push(",
    "An unexpected error occurred. Please try again.": "An unexpected error occurred. Please try again.",
    "text-body text-neutral-700 leading-relaxed mb-4": "text-body text-neutral-700 leading-relaxed mb-4",
    "w-5 h-5 text-blue-600 mr-3 mt-0.5 flex-shrink-0": "w-5 h-5 text-blue-600 mr-3 mt-0.5 flex-shrink-0",
    "\n              required\n              priority=": "\n              required\n              priority=",
    "bg-yellow-100 text-yellow-800 border-yellow-200": "bg-yellow-100 text-yellow-800 border-yellow-200",
    "disabled:cursor-not-allowed disabled:opacity-50": "disabled:cursor-not-allowed disabled:opacity-50",
    "flex min-h-full items-center justify-center p-4": "flex min-h-full items-center justify-center p-4",
    "should warn when PMI is provided but LTV <= 80%": "should warn when PMI is provided but LTV <= 80%",
    "should handle missing property value gracefully": "should handle missing property value gracefully",
    "should calculate LTV correctly for valid inputs": "should calculate LTV correctly for valid inputs",
    "Loan amount and property value must be positive": "Loan amount and property value must be positive",
    "],\n  \n  // Status colors (safe combinations)\n  ": "],\n  \n  // Status colors (safe combinations)\n  ",
    ")\n        \n        if (isNaN(expenses)) return ": ")\n        \n        if (isNaN(expenses)) return ",
    ") // Remove SQL comments\n    .replace(/\\/\\*/g, ": ") // Remove SQL comments\n    .replace(/\\/\\*/g, ",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval'": "script-src 'self' 'unsafe-inline' 'unsafe-eval'",
    "should have sufficient contrast for all variants": "should have sufficient contrast for all variants",
    ");\n    const likeButton = screen.getByLabelText(": ");\n    const likeButton = screen.getByLabelText(",
    " }] })\n\n        const request = new NextRequest(": " }] })\n\n        const request = new NextRequest(",
    ", () => {\n      const request = new NextRequest(": ", () => {\n      const request = new NextRequest(",
    ", () => {\n      const weakPasswords = [\n        ": ", () => {\n      const weakPasswords = [\n        ",
    "should handle high discretionary income scenario": "should handle high discretionary income scenario",
    "should calculate average HELOC balance correctly": "should calculate average HELOC balance correctly",
    "should handle Enter key press when text is valid": "should handle Enter key press when text is valid",
    "should clear input when modal closes and reopens": "should clear input when modal closes and reopens",
    ", () => {\n      const result = validateContrast(": ", () => {\n      const result = validateContrast(",
    "should handle non-array data by clearing storage": "should handle non-array data by clearing storage",
    "}\n                onChange={(e) => handleChange(": "}\n                onChange={(e) => handleChange(",
    ",\n        assignedAt: assignment?.assignedAt || ": ",\n        assignedAt: assignment?.assignedAt || ",
    "Shared scenario not found or no longer available": "Shared scenario not found or no longer available",
    "bg-blue-50 border border-blue-200 rounded-lg p-4": "bg-blue-50 border border-blue-200 rounded-lg p-4",
    ")\n\n    try {\n      const response = await fetch(": ")\n\n    try {\n      const response = await fetch(",
    ")\n      } else {\n        setError(data.error || ": ")\n      } else {\n        setError(data.error || ",
    "grid md:grid-cols-2 gap-4 text-sm text-green-700": "grid md:grid-cols-2 gap-4 text-sm text-green-700",
    "text-sm font-medium text-gray-700 cursor-pointer": "text-sm font-medium text-gray-700 cursor-pointer",
    ">$</span>\n            <input\n              type=": ">$</span>\n            <input\n              type=",
    "cursor-pointer text-gray-600 hover:text-gray-800": "cursor-pointer text-gray-600 hover:text-gray-800",
    "bg-gray-50 border border-gray-200 rounded-lg p-6": "bg-gray-50 border border-gray-200 rounded-lg p-6",
    ">\n                <input\n                  type=": ">\n                <input\n                  type=",
    "HELOC interest rate must be between 0.1% and 30%": "HELOC interest rate must be between 0.1% and 30%",
    ").format(formData.monthlyDiscretionaryIncome) : ": ").format(formData.monthlyDiscretionaryIncome) : ",
    "border border-blue-300 rounded-lg p-4 bg-blue-50": "border border-blue-300 rounded-lg p-4 bg-blue-50",
    "mt-2 text-body-sm text-red-700 dark:text-red-300": "mt-2 text-body-sm text-red-700 dark:text-red-300",
    "mt-1 text-body-sm text-red-600 dark:text-red-400": "mt-1 text-body-sm text-red-600 dark:text-red-400",
    "relative inline-flex items-center justify-center": "relative inline-flex items-center justify-center",
    "hover:opacity-80 transition-opacity duration-200": "hover:opacity-80 transition-opacity duration-200",
    "useCompany must be used within a CompanyProvider": "useCompany must be used within a CompanyProvider",
    "\n  }\n});\n\n// Lightweight wrappers around Next.js": "\n  }\n});\n\n// Lightweight wrappers around Next.js",
    "Both loan amount and property value are required": "Both loan amount and property value are required",
    ")\n        \n        if (isNaN(helocRate)) return ": ")\n        \n        if (isNaN(helocRate)) return ",
    "should prevent infinite loops with invalid inputs": "should prevent infinite loops with invalid inputs",
    "should call onClose when cancel button is clicked": "should call onClose when cancel button is clicked",
    "should disable confirm button when input is empty": "should disable confirm button when input is empty",
    ">\n            <div>\n              <label htmlFor=": ">\n            <div>\n              <label htmlFor=",
    "Brief description of your company and services...": "Brief description of your company and services...",
    "bg-white rounded border border-green-200 p-3 mb-3": "bg-white rounded border border-green-200 p-3 mb-3",
    "There is a problem with the server configuration.": "There is a problem with the server configuration.",
    "text-4xl font-bold text-gray-900 mb-8 text-center": "text-4xl font-bold text-gray-900 mb-8 text-center",
    "w-4 h-4 text-yellow-600 mr-2 mt-0.5 flex-shrink-0": "w-4 h-4 text-yellow-600 mr-2 mt-0.5 flex-shrink-0",
    "mt-3 p-3 bg-white rounded border border-green-200": "mt-3 p-3 bg-white rounded border border-green-200",
    "Monthly payment must be between $100 and $100,000": "Monthly payment must be between $100 and $100,000",
    "HELOC limit must be between $1,000 and $5,000,000": "HELOC limit must be between $1,000 and $5,000,000",
    ", scenarioName.trim().length)\n      setNameError(": ", scenarioName.trim().length)\n      setNameError(",
    "absolute inset-0 flex items-center justify-center": "absolute inset-0 flex items-center justify-center",
    ";\n    }\n  }\n\n  if (rules.url && typeof value === ": ";\n    }\n  }\n\n  if (rules.url && typeof value === ",
    ", formValues)\n        expect(typeof result).toBe(": ", formValues)\n        expect(typeof result).toBe(",
    " {\n    // Critical errors\n    if (error.name === ": " {\n    // Critical errors\n    if (error.name === ",
    "The monthly payment is too low for the loan terms": "The monthly payment is too low for the loan terms",
    ")\n        \n        if (isNaN(helocLimit)) return ": ")\n        \n        if (isNaN(helocLimit)) return ",
    "Monthly MIP/PMI payment (required when LTV > 80%)": "Monthly MIP/PMI payment (required when LTV > 80%)",
    "\n  const isProduction = process.env.NODE_ENV === ": "\n  const isProduction = process.env.NODE_ENV === ",
    "should create valid schedule for standard mortgage": "should create valid schedule for standard mortgage",
    "should handle HELOC rate higher than mortgage rate": "should handle HELOC rate higher than mortgage rate",
    "text-gray-700 hover:bg-gray-50 hover:text-gray-900": "text-gray-700 hover:bg-gray-50 hover:text-gray-900",
    "}\n                  onChange={(e) => handleChange(": "}\n                  onChange={(e) => handleChange(",
    "SELECT id FROM users WHERE email = $1 AND id != $2": "SELECT id FROM users WHERE email = $1 AND id != $2",
    "mt-2 text-blue-600 hover:text-blue-700 font-medium": "mt-2 text-blue-600 hover:text-blue-700 font-medium",
    ")\n      }\n    } catch (err) {\n      console.error(": ")\n      }\n    } catch (err) {\n      console.error(",
    "bg-coral-50 border border-coral-200 p-4 rounded-lg": "bg-coral-50 border border-coral-200 p-4 rounded-lg",
    "bg-amber-50 border border-amber-200 p-4 rounded-lg": "bg-amber-50 border border-amber-200 p-4 rounded-lg",
    "w-2 h-2 bg-primary-500 rounded-full animate-bounce": "w-2 h-2 bg-primary-500 rounded-full animate-bounce",
    "mt-1 text-xs bg-gray-100 p-2 rounded overflow-auto": "mt-1 text-xs bg-gray-100 p-2 rounded overflow-auto",
    "Monthly expenses must be between $0 and $1,000,000": "Monthly expenses must be between $0 and $1,000,000",
    ",\n        description: initialData.description || ": ",\n        description: initialData.description || ",
    ")\n        } catch (error) {\n          addDebugLog(": ")\n        } catch (error) {\n          addDebugLog(",
    ")\n      }\n    } catch (error) {\n      addDebugLog(": ")\n      }\n    } catch (error) {\n      addDebugLog(",
    "}\n${formData.description ? formData.description : ": "}\n${formData.description ? formData.description : ",
    "font-semibold text-gray-700 mb-2 flex items-center": "font-semibold text-gray-700 mb-2 flex items-center",
    "font-semibold text-blue-900 mb-2 flex items-center": "font-semibold text-blue-900 mb-2 flex items-center",
    "\n          } ${\n            index === lines - 1 ? ": "\n          } ${\n            index === lines - 1 ? ",
    "bg-neutral-100 text-neutral-800 border-neutral-200": "bg-neutral-100 text-neutral-800 border-neutral-200",
    "bg-primary-100 text-primary-800 border-primary-200": "bg-primary-100 text-primary-800 border-primary-200",
    "w-full bg-neutral-200 rounded-full overflow-hidden": "w-full bg-neutral-200 rounded-full overflow-hidden",
    "Please provide both loan amount and property value": "Please provide both loan amount and property value",
    ">, userId?: string): DemoScenario {\n  console.log(": ">, userId?: string): DemoScenario {\n  console.log(",
    "\n    }\n\n    // Default to low severity\n    return ": "\n    }\n\n    // Default to low severity\n    return ",
    "] || row.yearsExperience || 0),\n    isActive: row[": "] || row.yearsExperience || 0),\n    isActive: row[",
    " || value === null || value === undefined) return ": " || value === null || value === undefined) return ",
    "should handle partial balance (refinanced mortgage)": "should handle partial balance (refinanced mortgage)",
    "should reduce payoff time with discretionary income": "should reduce payoff time with discretionary income",
    "should handle scenario with no discretionary income": "should handle scenario with no discretionary income",
    "should handle HELOC limit equal to mortgage balance": "should handle HELOC limit equal to mortgage balance",
    "should handle HELOC limit much larger than mortgage": "should handle HELOC limit much larger than mortgage",
    ")).toBeInTheDocument()\n    expect(screen.getByText(": ")).toBeInTheDocument()\n    expect(screen.getByText(",
    "\n      }\n    } catch (error) {\n      console.error(": "\n      }\n    } catch (error) {\n      console.error(",
    "Missing required fields: firstName, lastName, email": "Missing required fields: firstName, lastName, email",
    "bg-red-50 border border-red-200 rounded-lg p-4 mb-8": "bg-red-50 border border-red-200 rounded-lg p-4 mb-8",
    "mb-4 p-4 bg-red-50 border border-red-200 rounded-md": "mb-4 p-4 bg-red-50 border border-red-200 rounded-md",
    "An error occurred during sign in. Please try again.": "An error occurred during sign in. Please try again.",
    "}\n              onChange={(e) => handleInputChange(": "}\n              onChange={(e) => handleInputChange(",
    "w-full flex items-center justify-between mb-4 group": "w-full flex items-center justify-between mb-4 group",
    "printable-report bg-white p-8 max-w-[8.5in] mx-auto": "printable-report bg-white p-8 max-w-[8.5in] mx-auto",
    "flex justify-between border-t border-green-200 pt-2": "flex justify-between border-t border-green-200 pt-2",
    "Tabs components must be used within a Tabs provider": "Tabs components must be used within a Tabs provider",
    "focus:outline-none focus:ring-2 focus:ring-offset-0": "focus:outline-none focus:ring-2 focus:ring-offset-0",
    "text-body-sm text-neutral-600 dark:text-neutral-400": "text-body-sm text-neutral-600 dark:text-neutral-400",
    ") {\n      return true;\n    }\n    if (item.href !== ": ") {\n      return true;\n    }\n    if (item.href !== ",
    "t exist\n      let canvas = document.getElementById(": "t exist\n      let canvas = document.getElementById(",
    "should log debug information when LTV is calculated": "should log debug information when LTV is calculated",
    "should handle multiple validation calls efficiently": "should handle multiple validation calls efficiently",
    ") {\n    return input\n  }\n  \n  if (typeof input === ": ") {\n    return input\n  }\n  \n  if (typeof input === ",
    ", () => {\n    const dangerousCombinations = [\n      ": ", () => {\n    const dangerousCombinations = [\n      ",
    "\n        }\n\n        const request = new NextRequest(": "\n        }\n\n        const request = new NextRequest(",
    "should handle identical mortgage and HELOC scenarios": "should handle identical mortgage and HELOC scenarios",
    "should call onConfirm when confirm button is clicked": "should call onConfirm when confirm button is clicked",
    ")).toEqual({ r: 255, g: 0, b: 0 });\n    });\n\n    it(": ")).toEqual({ r: 255, g: 0, b: 0 });\n    });\n\n    it(",
    ")}\n              onChange={(e) => handleArrayChange(": ")}\n              onChange={(e) => handleArrayChange(",
    ">\n                  <input\n                    type=": ">\n                  <input\n                    type=",
    "}\n                    onChange={(e) => handleChange(": "}\n                    onChange={(e) => handleChange(",
    "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4": "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4",
    "New password must be different from current password": "New password must be different from current password",
    "DELETE FROM scenarios WHERE id = $1 AND user_id = $2": "DELETE FROM scenarios WHERE id = $1 AND user_id = $2",
    "safe-neutral-light p-4 rounded overflow-auto text-sm": "safe-neutral-light p-4 rounded overflow-auto text-sm",
    "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4": "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",
    "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6": "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",
    ")\n        if (!success) {\n          throw new Error(": ")\n        if (!success) {\n          throw new Error(",
    "Sorry, we couldn't find the page you're looking for.": "Sorry, we couldn't find the page you're looking for.",
    "}`}>\n                      {profile.emailVerified ? ": "}`}>\n                      {profile.emailVerified ? ",
    "Form submitted successfully! Check console for data.": "Form submitted successfully! Check console for data.",
    ">$</span>\n              <input\n                type=": ">$</span>\n              <input\n                type=",
    "bg-yellow-50 border border-yellow-200 rounded-lg p-4": "bg-yellow-50 border border-yellow-200 rounded-lg p-4",
    "block text-body-sm font-medium text-neutral-700 mb-1": "block text-body-sm font-medium text-neutral-700 mb-1",
    "block text-body-sm font-medium text-neutral-700 mb-2": "block text-body-sm font-medium text-neutral-700 mb-2",
    "placeholder-neutral-400 dark:placeholder-neutral-500": "placeholder-neutral-400 dark:placeholder-neutral-500",
    ",\n      nmls: companySettings?.companyNmlsNumber || ": ",\n      nmls: companySettings?.companyNmlsNumber || ",
    "should show PMI field when LTV analysis is available": "should show PMI field when LTV analysis is available",
    "should return correct rates for different LTV ranges": "should return correct rates for different LTV ranges",
    "Loan amount and property value must be valid numbers": "Loan amount and property value must be valid numbers",
    ")\n    if (propertyValue == null) missingFields.push(": ")\n    if (propertyValue == null) missingFields.push(",
    "Monthly payment is too low to cover interest charges": "Monthly payment is too low to cover interest charges",
    ",\n    message: `User action: ${action}`,\n    level: ": ",\n    message: `User action: ${action}`,\n    level: ",
    "Insufficient discretionary income for HELOC strategy": "Insufficient discretionary income for HELOC strategy",
    " ? LogLevel.ERROR : \n                  severity === ": " ? LogLevel.ERROR : \n                  severity === ",
    "Discretionary income must be between $0 and $500,000": "Discretionary income must be between $0 and $500,000",
    "should calculate correct payment for 15-year mortgage": "should calculate correct payment for 15-year mortgage",
    "should maintain balance consistency in HELOC schedule": "should maintain balance consistency in HELOC schedule",
    "should handle scenario where HELOC is disadvantageous": "should handle scenario where HELOC is disadvantageous",
    ", () => {\n      const safeColors = getSafeTextColors(": ", () => {\n      const safeColors = getSafeTextColors(",
    "should return parsed scenarios when valid data exists": "should return parsed scenarios when valid data exists",
    "should throw error when localStorage is not available": "should throw error when localStorage is not available",
    ", value: string) => {\n    const values = value.split(": ", value: string) => {\n    const values = value.split(",
    "Access denied. You do not have permission to sign in.": "Access denied. You do not have permission to sign in.",
    "text-2xl font-semibold text-gray-900 mb-6 text-center": "text-2xl font-semibold text-gray-900 mb-6 text-center",
    "}\n                onChange={(e) => handleInputChange(": "}\n                onChange={(e) => handleInputChange(",
    "You're almost ready to calculate your HELOC strategy!": "You're almost ready to calculate your HELOC strategy!",
    "bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6": "bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6",
    "w-4 h-4 text-gray-400 hover:text-gray-600 cursor-help": "w-4 h-4 text-gray-400 hover:text-gray-600 cursor-help",
    ";\n\nconst iconMap: Record<IconName, LucideIcon> = {\n  ": ";\n\nconst iconMap: Record<IconName, LucideIcon> = {\n  ",
    "text-lg font-semibold text-gray-900 flex items-center": "text-lg font-semibold text-gray-900 flex items-center",
    "text-lg font-semibold text-blue-900 flex items-center": "text-lg font-semibold text-blue-900 flex items-center",
    "mt-1 text-body text-neutral-600 dark:text-neutral-400": "mt-1 text-body text-neutral-600 dark:text-neutral-400",
    "HELOC limit is very high relative to mortgage balance": "HELOC limit is very high relative to mortgage balance",
    "Your monthly payment is too low to cover the interest": "Your monthly payment is too low to cover the interest",
    ") {\n  if (value === undefined || value === 0) return ": ") {\n  if (value === undefined || value === 0) return ",
    ",\n    showRegenerateOption: true,\n    regenerateText: ": ",\n    showRegenerateOption: true,\n    regenerateText: ",
    "fixed inset-0 z-30 bg-gray-600 bg-opacity-75 lg:hidden": "fixed inset-0 z-30 bg-gray-600 bg-opacity-75 lg:hidden",
    "mt-6 text-center text-3xl font-extrabold text-gray-900": "mt-6 text-center text-3xl font-extrabold text-gray-900",
    "mt-6 text-center text-4xl font-extrabold text-gray-900": "mt-6 text-center text-4xl font-extrabold text-gray-900",
    "bg-neutral-50 border border-neutral-200 rounded-lg p-3": "bg-neutral-50 border border-neutral-200 rounded-lg p-3",
    "\n    ? `text-lg font-semibold text-center ${isEmpty ? ": "\n    ? `text-lg font-semibold text-center ${isEmpty ? ",
    "Monthly net income must be between $500 and $1,000,000": "Monthly net income must be between $500 and $1,000,000",
    "Discretionary income must be between $0 and $1,000,000": "Discretionary income must be between $0 and $1,000,000",
    ", error)\n        }\n      } else {\n        addDebugLog(": ", error)\n        }\n      } else {\n        addDebugLog(",
    "absolute bottom-2 left-2 h-5 bg-green-500 rounded-full": "absolute bottom-2 left-2 h-5 bg-green-500 rounded-full",
    ")\n\n  const handleSave = async () => {\n    console.log(": ")\n\n  const handleSave = async () => {\n    console.log(",
    "border-red-300 focus:border-red-500 focus:ring-red-500": "border-red-300 focus:border-red-500 focus:ring-red-500",
    "useNavigation must be used within a NavigationProvider": "useNavigation must be used within a NavigationProvider",
    "should handle large numbers without performance issues": "should handle large numbers without performance issues",
    ", input)\n\n  // Validate mortgage inputs\n  console.log(": ", input)\n\n  // Validate mortgage inputs\n  console.log(",
    "should maintain balance consistency throughout schedule": "should maintain balance consistency throughout schedule",
    ");\n      }).not.toThrow();\n    });\n  });\n});\n\ndescribe(": ");\n      }).not.toThrow();\n    });\n  });\n});\n\ndescribe(",
    "should render demo data management section in demo mode": "should render demo data management section in demo mode",
    ") {\n          return\n        }\n        throw new Error(": ") {\n          return\n        }\n        throw new Error(",
    "text-green-600 hover:text-green-700 font-medium text-sm": "text-green-600 hover:text-green-700 font-medium text-sm",
    "Development build • Debug mode enabled • Local database": "Development build • Debug mode enabled • Local database",
    "SELECT id FROM scenarios WHERE id = $1 AND user_id = $2": "SELECT id FROM scenarios WHERE id = $1 AND user_id = $2",
    "\n      })\n    }\n\n  } catch (error) {\n    console.error(": "\n      })\n    }\n\n  } catch (error) {\n    console.error(",
    "Mortgage balance must be between $1,000 and $10,000,000": "Mortgage balance must be between $1,000 and $10,000,000",
    "\n      } else {\n        // Only convert to number if it": "\n      } else {\n        // Only convert to number if it",
    "}\n                  onChange={(e) => handleInputChange(": "}\n                  onChange={(e) => handleInputChange(",
    "Sample data for testing the HELOC acceleration strategy": "Sample data for testing the HELOC acceleration strategy",
    "focus:ring-2 focus:ring-primary-500 focus:ring-offset-2": "focus:ring-2 focus:ring-primary-500 focus:ring-offset-2",
    "text-body-sm font-medium text-red-800 dark:text-red-200": "text-body-sm font-medium text-red-800 dark:text-red-200",
    "fixed inset-0 bg-black bg-opacity-50 transition-opacity": "fixed inset-0 bg-black bg-opacity-50 transition-opacity",
    "p-4 border-b border-neutral-200 dark:border-neutral-800": "p-4 border-b border-neutral-200 dark:border-neutral-800",
    "should throw CalculationError for null/undefined inputs": "should throw CalculationError for null/undefined inputs",
    "should throw CalculationError for invalid number inputs": "should throw CalculationError for invalid number inputs",
    "should return error for invalid inputs without throwing": "should return error for invalid inputs without throwing",
    "\n      }\n    }\n  },\n\n  monthlyPayment: {\n    required: ": "\n      }\n    }\n  },\n\n  monthlyPayment: {\n    required: ",
    " ? parseFloat(value) : value;\n  if (isNaN(num)) return ": " ? parseFloat(value) : value;\n  if (isNaN(num)) return ",
    ")).toEqual({ r: 255, g: 255, b: 255 });\n    });\n\n    it(": ")).toEqual({ r: 255, g: 255, b: 255 });\n    });\n\n    it(",
    "Production build • Optimized performance • Live database": "Production build • Optimized performance • Live database",
    ">\n                    <input\n                      type=": ">\n                    <input\n                      type=",
    "text-gray-400 hover:text-red-600 transition duration-200": "text-gray-400 hover:text-red-600 transition duration-200",
    "min-h-screen flex items-center justify-center bg-gray-50": "min-h-screen flex items-center justify-center bg-gray-50",
    "text-body-lg text-neutral-600 dark:text-neutral-400 mt-2": "text-body-lg text-neutral-600 dark:text-neutral-400 mt-2",
    "cursor-pointer text-gray-600 hover:text-gray-800 text-sm": "cursor-pointer text-gray-600 hover:text-gray-800 text-sm",
    "bg-white p-4 rounded-lg shadow-sm border border-gray-200": "bg-white p-4 rounded-lg shadow-sm border border-gray-200",
    "bg-white p-5 rounded-lg shadow-sm border border-gray-200": "bg-white p-5 rounded-lg shadow-sm border border-gray-200",
    ">$</span>\n                <input\n                  type=": ">$</span>\n                <input\n                  type=",
    "bg-white rounded-lg p-5 shadow-md border border-gray-200": "bg-white rounded-lg p-5 shadow-md border border-gray-200",
    "mt-6 pt-4 border-t border-gray-300 text-xs text-gray-600": "mt-6 pt-4 border-t border-gray-300 text-xs text-gray-600",
    "bg-secondary-100 text-secondary-800 border-secondary-200": "bg-secondary-100 text-secondary-800 border-secondary-200",
    "inline-flex items-center rounded-full border font-medium": "inline-flex items-center rounded-full border font-medium",
    ",\n                  item.disabled\n                    ? ": ",\n                  item.disabled\n                    ? ",
    "border-b border-neutral-200 dark:border-neutral-700 pb-4": "border-b border-neutral-200 dark:border-neutral-700 pb-4",
    "mt-1 text-body-sm text-neutral-500 dark:text-neutral-400": "mt-1 text-body-sm text-neutral-500 dark:text-neutral-400",
    "h-full transition-all duration-300 ease-out rounded-full": "h-full transition-all duration-300 ease-out rounded-full",
    ", () => {\n    const scenarios = [\n      {\n        name: ": ", () => {\n    const scenarios = [\n      {\n        name: ",
    "Corrupted demo scenarios data detected, clearing storage": "Corrupted demo scenarios data detected, clearing storage",
    "Your mortgage balance is higher than your property value": "Your mortgage balance is higher than your property value",
    "); // Subsections should be h3\n    });\n  });\n\n  describe(": "); // Subsections should be h3\n    });\n  });\n\n  describe(",
    ";\n      const hasBoxShadow = computedStyle.boxShadow !== ": ";\n      const hasBoxShadow = computedStyle.boxShadow !== ",
    ", async () => {\n      const loginData = {\n        email: ": ", async () => {\n      const loginData = {\n        email: ",
    "should enable confirm button when correct text is entered": "should enable confirm button when correct text is entered",
    ")\n\n    // Press Enter to confirm\n    await user.keyboard(": ")\n\n    // Press Enter to confirm\n    await user.keyboard(",
    ";\n      \n      expect(() => {\n        assertSafeContrast(": ";\n      \n      expect(() => {\n        assertSafeContrast(",
    ")).toBeInTheDocument() // Number of scenarios\n  })\n\n  it(": ")).toBeInTheDocument() // Number of scenarios\n  })\n\n  it(",
    "should filter out invalid scenarios and save cleaned data": "should filter out invalid scenarios and save cleaned data",
    "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100": "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100",
    "mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4": "mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4",
    "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8": "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8",
    "SELECT * FROM users WHERE email = $1 AND is_active = true": "SELECT * FROM users WHERE email = $1 AND is_active = true",
    "Your trusted partner in mortgage acceleration strategies.": "Your trusted partner in mortgage acceleration strategies.",
    "SELECT id FROM scenarios WHERE user_id = $1 AND name = $2": "SELECT id FROM scenarios WHERE user_id = $1 AND name = $2",
    "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z": "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z",
    "text-gray-400 hover:text-blue-600 transition duration-200": "text-gray-400 hover:text-blue-600 transition duration-200",
    "bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4": "bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4",
    "}`\n    } else {\n      return `${years} year${years > 1 ? ": "}`\n    } else {\n      return `${years} year${years > 1 ? ",
    "mt-1 whitespace-pre-wrap text-xs max-h-64 overflow-y-auto": "mt-1 whitespace-pre-wrap text-xs max-h-64 overflow-y-auto",
    "mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg": "mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg",
    "\n        >\n          {loading ? (\n            <Icon name=": "\n        >\n          {loading ? (\n            <Icon name=",
    "mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md": "mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md",
    ">\n            <EnhancedCurrencyInput\n              field=": ">\n            <EnhancedCurrencyInput\n              field=",
    "}\n                    onChange={(e) => handleInputChange(": "}\n                    onChange={(e) => handleInputChange(",
    "text-body-sm text-neutral-600 dark:text-neutral-400 -mt-2": "text-body-sm text-neutral-600 dark:text-neutral-400 -mt-2",
    "should throw CalculationError for negative or zero values": "should throw CalculationError for negative or zero values",
    ",\n    message: `Navigation: ${from} → ${to}`,\n    level: ": ",\n    message: `Navigation: ${from} → ${to}`,\n    level: ",
    ";\n  \n  return new Intl.NumberFormat(locale, {\n    style: ": ";\n  \n  return new Intl.NumberFormat(locale, {\n    style: ",
    "\n  }\n  \n  return input\n    .trim()\n    .replace(/[<>]/g, ": "\n  }\n  \n  return input\n    .trim()\n    .replace(/[<>]/g, ",
    ");\n    expect(darkResult.isValid).toBe(true);\n  });\n\n  it(": ");\n    expect(darkResult.isValid).toBe(true);\n  });\n\n  it(",
    ", () => {\n      expect(() => {\n        assertSafeContrast(": ", () => {\n      expect(() => {\n        assertSafeContrast(",
    "bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200": "bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200",
    "h-10 w-16 border border-gray-300 rounded-md cursor-pointer": "h-10 w-16 border border-gray-300 rounded-md cursor-pointer",
    "text-gray-400 hover:text-green-600 transition duration-200": "text-gray-400 hover:text-green-600 transition duration-200",
    "Monthly gross income must be between $1,000 and $1,000,000": "Monthly gross income must be between $1,000 and $1,000,000",
    " ? processedValue : 0) : (typeof prev.monthlyExpenses === ": " ? processedValue : 0) : (typeof prev.monthlyExpenses === ",
    "absolute top-2 left-2 right-2 h-5 bg-gray-300 rounded-full": "absolute top-2 left-2 right-2 h-5 bg-gray-300 rounded-full",
    "text-lg font-semibold text-gray-900 mb-4 flex items-center": "text-lg font-semibold text-gray-900 mb-4 flex items-center",
    "w-full bg-neutral-200 dark:bg-neutral-700 rounded-full h-2": "w-full bg-neutral-200 dark:bg-neutral-700 rounded-full h-2",
    "block w-full rounded-lg border transition-all duration-200": "block w-full rounded-lg border transition-all duration-200",
    ",\n      license: companySettings?.companyLicenseNumber || ": ",\n      license: companySettings?.companyLicenseNumber || ",
    ")\n  saveDemoScenarios(scenarios, userId)\n  \n  console.log(": ")\n  saveDemoScenarios(scenarios, userId)\n  \n  console.log(",
    ", details?: Record<string, any>): void {\n  if (status === ": ", details?: Record<string, any>): void {\n  if (status === ",
    ") // Remove javascript: protocol\n    .replace(/on\\w+=/gi, ": ") // Remove javascript: protocol\n    .replace(/on\\w+=/gi, ",
    ", origin)\n  } else if (origin && process.env.NODE_ENV === ": ", origin)\n  } else if (origin && process.env.NODE_ENV === ",
    ",\n          is_public: true,\n          public_share_token: ": ",\n          is_public: true,\n          public_share_token: ",
    "should handle scenario where HELOC provides minimal benefit": "should handle scenario where HELOC provides minimal benefit",
    ", () => {\n      const result = validateTailwindCombination(": ", () => {\n      const result = validateTailwindCombination(",
    ")).toBeInTheDocument()\n    })\n\n    expect(screen.getByText(": ")).toBeInTheDocument()\n    })\n\n    expect(screen.getByText(",
    "Update your HELOC acceleration scenario with new parameters": "Update your HELOC acceleration scenario with new parameters",
    "text-lg font-semibold text-gray-900 flex items-center gap-2": "text-lg font-semibold text-gray-900 flex items-center gap-2",
    "\n                    >\n                      <option value=": "\n                    >\n                      <option value=",
    "bg-gray-100 p-4 rounded overflow-auto text-sm text-gray-900": "bg-gray-100 p-4 rounded overflow-auto text-sm text-gray-900",
    "An unexpected error occurred while processing your request.": "An unexpected error occurred while processing your request.",
    "bg-white rounded-lg shadow-lg p-8 traditional-mortgage-card": "bg-white rounded-lg shadow-lg p-8 traditional-mortgage-card",
    ")\n        } else {\n          throw new Error(data.error || ": ")\n        } else {\n          throw new Error(data.error || ",
    ", err)\n      setError(err instanceof Error ? err.message : ": ", err)\n      setError(err instanceof Error ? err.message : ",
    "text-sm text-primary-600 hover:text-primary-700 font-medium": "text-sm text-primary-600 hover:text-primary-700 font-medium",
    " ? processedValue : 0) : (typeof prev.monthlyNetIncome === ": " ? processedValue : 0) : (typeof prev.monthlyNetIncome === ",
    "}`\n    } else {\n      return `${years} year${years !== 1 ? ": "}`\n    } else {\n      return `${years} year${years !== 1 ? ",
    "flex items-center justify-between p-3 bg-gray-50 rounded-lg": "flex items-center justify-between p-3 bg-gray-50 rounded-lg",
    "flex justify-end space-x-3 pt-4 border-t border-neutral-200": "flex justify-end space-x-3 pt-4 border-t border-neutral-200",
    "bg-primary-500 h-2 rounded-full transition-all duration-300": "bg-primary-500 h-2 rounded-full transition-all duration-300",
    ", () => {\n      const result1 = safeLTVCalculation(400000, ": ", () => {\n      const result1 = safeLTVCalculation(400000, ",
    "Enter valid numbers for both loan amount and property value": "Enter valid numbers for both loan amount and property value",
    "Invalid demo scenarios data format, clearing corrupted data": "Invalid demo scenarios data format, clearing corrupted data",
    "Data size too large. Please reduce the number of scenarios.": "Data size too large. Please reduce the number of scenarios.",
    "\n    }\n\n    // High severity errors\n    if (error.name === ": "\n    }\n\n    // High severity errors\n    if (error.name === ",
    "The HELOC strategy would require more credit than available": "The HELOC strategy would require more credit than available",
    "\n          if (Array.isArray(value)) return `\"${value.join(": "\n          if (Array.isArray(value)) return `\"${value.join(",
    ") {\n        inQuotes = !inQuotes\n      } else if (char === ": ") {\n        inQuotes = !inQuotes\n      } else if (char === ",
    ", async () => {\n        const mockProfile = {\n          id: ": ", async () => {\n        const mockProfile = {\n          id: ",
    ")\n      expect(closeButton).toHaveFocus()\n    })\n  })\n\n  it(": ")\n      expect(closeButton).toHaveFocus()\n    })\n  })\n\n  it(",
    ").mockImplementation();\n      \n      process.env.NODE_ENV = ": ").mockImplementation();\n      \n      process.env.NODE_ENV = ",
    ");\n    expect(result.isAccessible).toBe(false);\n  });\n\n  it(": ");\n    expect(result.isAccessible).toBe(false);\n  });\n\n  it(",
    "bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200": "bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200",
    "The verification token has expired or has already been used.": "The verification token has expired or has already been used.",
    "\n  const isDemoMode = process.env.NEXT_PUBLIC_DEMO_MODE === ": "\n  const isDemoMode = process.env.NEXT_PUBLIC_DEMO_MODE === ",
    "flex justify-between items-center text-xs text-gray-500 mb-4": "flex justify-between items-center text-xs text-gray-500 mb-4",
    ")\n        }\n      }\n    } catch (err) {\n      console.error(": ")\n        }\n      }\n    } catch (err) {\n      console.error(",
    "mt-16 bg-white rounded-lg shadow-lg p-8 how-it-works-section": "mt-16 bg-white rounded-lg shadow-lg p-8 how-it-works-section",
    "text-base font-semibold text-gray-900 mb-3 flex items-center": "text-base font-semibold text-gray-900 mb-3 flex items-center",
    "text-sm font-semibold text-orange-800 mb-2 flex items-center": "text-sm font-semibold text-orange-800 mb-2 flex items-center",
    ")\n      onClose()\n    } catch (error) {\n      console.error(": ")\n      onClose()\n    } catch (error) {\n      console.error(",
    "text-h5 font-semibold text-neutral-900 dark:text-neutral-100": "text-h5 font-semibold text-neutral-900 dark:text-neutral-100",
    "text-h4 font-semibold text-neutral-900 dark:text-neutral-100": "text-h4 font-semibold text-neutral-900 dark:text-neutral-100",
    "text-neutral-700 hover:text-neutral-900 hover:bg-neutral-100": "text-neutral-700 hover:text-neutral-900 hover:bg-neutral-100",
    "text-h6 font-semibold text-neutral-900 dark:text-neutral-100": "text-h6 font-semibold text-neutral-900 dark:text-neutral-100",
    "text-body font-medium text-neutral-900 dark:text-neutral-100": "text-body font-medium text-neutral-900 dark:text-neutral-100",
    ", newScenario)\n\n  scenarios.push(newScenario)\n  console.log(": ", newScenario)\n\n  scenarios.push(newScenario)\n  console.log(",
    "\n      }\n    }\n  },\n\n  currentInterestRate: {\n    required: ": "\n      }\n    }\n  },\n\n  currentInterestRate: {\n    required: ",
    " }),\n        { \n          status: 403,\n          headers: { ": " }),\n        { \n          status: 403,\n          headers: { ",
    ")) {\n    const friendlyName = fieldName.replace(/([A-Z])/g, ": ")) {\n    const friendlyName = fieldName.replace(/([A-Z])/g, ",
    ", async () => {\n        const mockScenario = {\n          id: ": ", async () => {\n        const mockScenario = {\n          id: ",
    ")\n      expect(clearButton).toBeDisabled()\n    })\n  })\n\n  it(": ")\n      expect(clearButton).toBeDisabled()\n    })\n  })\n\n  it(",
    " && !assignment.agentId) return false\n    if (filterType === ": " && !assignment.agentId) return false\n    if (filterType === ",
    "UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = $1": "UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = $1",
    "Current password, new password, and confirmation are required": "Current password, new password, and confirmation are required",
    "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-8": "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-8",
    "grid md:grid-cols-2 gap-12 max-w-6xl mx-auto comparison-cards": "grid md:grid-cols-2 gap-12 max-w-6xl mx-auto comparison-cards",
    "bg-white p-4 rounded-lg shadow-sm border border-gray-200 mb-6": "bg-white p-4 rounded-lg shadow-sm border border-gray-200 mb-6",
    " ? formData.monthlyExpenses : 0)}`\n                        : ": " ? formData.monthlyExpenses : 0)}`\n                        : ",
    "), // For now, settings go to profile\n    },\n    {\n      id: ": "), // For now, settings go to profile\n    },\n    {\n      id: ",
    "should calculate correct monthly PMI for different LTV ranges": "should calculate correct monthly PMI for different LTV ranges",
    ")\n    } else if (loan < 0 || value <= 0) {\n      errors.push(": ")\n    } else if (loan < 0 || value <= 0) {\n      errors.push(",
    "\n    }\n\n    // Medium severity errors\n    if (error.name === ": "\n    }\n\n    // Medium severity errors\n    if (error.name === ",
    ")\n      \n      // Convert special values\n      if (value === ": ")\n      \n      // Convert special values\n      if (value === ",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com": "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
    ", async () => {\n        const invalidData = {\n          name: ": ", async () => {\n        const invalidData = {\n          name: ",
    "should calculate correct payment for standard 30-year mortgage": "should calculate correct payment for standard 30-year mortgage",
    ")).toEqual({ r: 0, g: 0, b: 0 });\n      expect(rgbStringToRgb(": ")).toEqual({ r: 0, g: 0, b: 0 });\n      expect(rgbStringToRgb(",
    "animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600": "animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600",
    ")\n        }\n      }\n    } catch (error) {\n      console.error(": ")\n        }\n      }\n    } catch (error) {\n      console.error(",
    "mt-4 flex items-center gap-2 text-blue-600 hover:text-blue-700": "mt-4 flex items-center gap-2 text-blue-600 hover:text-blue-700",
    "[AUTH DEBUG] Production mode - database lookup not implemented": "[AUTH DEBUG] Production mode - database lookup not implemented",
    ", e.target.value)}\n                  onBlur={() => handleBlur(": ", e.target.value)}\n                  onBlur={() => handleBlur(",
    " ? formData.monthlyNetIncome : 0)} - $${new Intl.NumberFormat(": " ? formData.monthlyNetIncome : 0)} - $${new Intl.NumberFormat(",
    "flex items-center space-x-2 p-3 rounded-md border text-body-sm": "flex items-center space-x-2 p-3 rounded-md border text-body-sm",
    ") // Remove potential HTML tags\n    .replace(/javascript:/gi, ": ") // Remove potential HTML tags\n    .replace(/javascript:/gi, ",
    "\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it(": "\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it(",
    ") {\n          return\n        }\n        const error = new Error(": ") {\n          return\n        }\n        const error = new Error(",
    "mt-4 inline-flex items-center text-blue-600 hover:text-blue-700": "mt-4 inline-flex items-center text-blue-600 hover:text-blue-700",
    "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12": "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12",
    "text-sm text-blue-600 hover:text-blue-800 font-medium underline": "text-sm text-blue-600 hover:text-blue-800 font-medium underline",
    "flex justify-between items-center pt-1 border-t border-gray-100": "flex justify-between items-center pt-1 border-t border-gray-100",
    "relative inline-flex items-center justify-center p-2 rounded-lg": "relative inline-flex items-center justify-center p-2 rounded-lg",
    ") {\n    try {\n      new URL(value);\n    } catch {\n      return ": ") {\n    try {\n      new URL(value);\n    } catch {\n      return ",
    ":\n          console.warn(...args)\n          break\n        case ": ":\n          console.warn(...args)\n          break\n        case ",
    "Loan terms are typically between 1 and 40 years (12-480 months)": "Loan terms are typically between 1 and 40 years (12-480 months)",
    ");\n    expect(message).toBeInTheDocument();\n  });\n});\n\ndescribe(": ");\n    expect(message).toBeInTheDocument();\n  });\n});\n\ndescribe(",
    ", () => {\n      const headers = new Headers()\n      headers.set(": ", () => {\n      const headers = new Headers()\n      headers.set(",
    ")\n\n    expect(onConfirm).toHaveBeenCalledTimes(1)\n  })\n})\n\n  it(": ")\n\n    expect(onConfirm).toHaveBeenCalledTimes(1)\n  })\n})\n\n  it(",
    "mt-4 flex flex-col sm:flex-row gap-3 items-start sm:items-center": "mt-4 flex flex-col sm:flex-row gap-3 items-start sm:items-center",
    ")\n                  a.href = url\n                  a.download = ": ")\n                  a.href = url\n                  a.download = ",
    "\n    }, { status: 201 })\n\n  } catch (error) {\n    console.error(": "\n    }, { status: 201 })\n\n  } catch (error) {\n    console.error(",
    "bg-primary-100 p-4 rounded-lg space-y-2 text-sm text-primary-900": "bg-primary-100 p-4 rounded-lg space-y-2 text-sm text-primary-900",
    "min-h-screen bg-neutral-50 dark:bg-neutral-900 transition-colors": "min-h-screen bg-neutral-50 dark:bg-neutral-900 transition-colors",
    "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-700": "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-700",
    "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500": "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500",
    ";\n  }\n\n  if (value === undefined || value === null || value === ": ";\n  }\n\n  if (value === undefined || value === null || value === ",
    ":\n          console.error(...args)\n          break\n        case ": ":\n          console.error(...args)\n          break\n        case ",
    ")\n  }\n\n  clear() {\n    this.logs = []\n    if (typeof window !== ": ")\n  }\n\n  clear() {\n    this.logs = []\n    if (typeof window !== ",
    ")\n  \n  const scenarios = getDemoScenarios(userId)\n  console.log(": ")\n  \n  const scenarios = getDemoScenarios(userId)\n  console.log(",
    "\n    }\n    \n    return parsed.toString()\n  } catch {\n    return ": "\n    }\n    \n    return parsed.toString()\n  } catch {\n    return ",
    ")) {\n    return errors\n  }\n\n  const numValue = typeof value === ": ")) {\n    return errors\n  }\n\n  const numValue = typeof value === ",
    "text-sm text-gray-600 hover:text-gray-900 flex items-center gap-1": "text-sm text-gray-600 hover:text-gray-900 flex items-center gap-1",
    "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded": "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded",
    "The application encountered a critical error and cannot continue.": "The application encountered a critical error and cannot continue.",
    ")\n        \n        if (!response.ok) {\n          throw new Error(": ")\n        \n        if (!response.ok) {\n          throw new Error(",
    "\n              }\n              priority={ltvInfo.isMIPRequired ? ": "\n              }\n              priority={ltvInfo.isMIPRequired ? ",
    " ? prev.monthlyNetIncome : 0)\n        const expenses = field === ": " ? prev.monthlyNetIncome : 0)\n        const expenses = field === ",
    "flex items-center justify-between p-6 border-b border-neutral-200": "flex items-center justify-between p-6 border-b border-neutral-200",
    "\n  \n  const renderInput = () => {\n    switch (type) {\n      case ": "\n  \n  const renderInput = () => {\n    switch (type) {\n      case ",
    ")\n    errors.push(`Missing required inputs: ${missingFields.join(": ")\n    errors.push(`Missing required inputs: ${missingFields.join(",
    ", {\n      query: query.substring(0, 100) + (query.length > 100 ? ": ", {\n      query: query.substring(0, 100) + (query.length > 100 ? ",
    "t count successful requests\n  skipFailedRequests?: boolean // Don": "t count successful requests\n  skipFailedRequests?: boolean // Don",
    ", async () => {\n        const updateData = {\n          firstName: ": ", async () => {\n        const updateData = {\n          firstName: ",
    ")\n      })\n\n      const headers = new Headers()\n      headers.set(": ")\n      })\n\n      const headers = new Headers()\n      headers.set(",
    ");\n      expect(result.ratio).toBeGreaterThan(7);\n    });\n\n    it(": ");\n      expect(result.ratio).toBeGreaterThan(7);\n    });\n\n    it(",
    "\n                    }`}>\n                      {agent.isActive ? ": "\n                    }`}>\n                      {agent.isActive ? ",
    "\n        })\n        setShowPasswordForm(false)\n        setSuccess(": "\n        })\n        setShowPasswordForm(false)\n        setSuccess(",
    ") {\n      // Allow empty string during typing\n      if (value === ": ") {\n      // Allow empty string during typing\n      if (value === ",
    "text-base font-semibold text-blue-900 mb-4 flex items-center gap-2": "text-base font-semibold text-blue-900 mb-4 flex items-center gap-2",
    "flex justify-between col-span-2 pt-1 border-t border-gray-200 mt-1": "flex justify-between col-span-2 pt-1 border-t border-gray-200 mt-1",
    ")\n    const payment = parseFloat(monthlyPayment?.replace(/[,$]/g, ": ")\n    const payment = parseFloat(monthlyPayment?.replace(/[,$]/g, ",
    ") // Should return error message\n        expect(result).toContain(": ") // Should return error message\n        expect(result).toContain(",
    "Loan amount cannot be negative and property value must be positive": "Loan amount cannot be negative and property value must be positive",
    ") {\n    // Allow localhost in development\n    if (origin.includes(": ") {\n    // Allow localhost in development\n    if (origin.includes(",
    ", async () => {\n        const mockSharedScenario = {\n          id: ": ", async () => {\n        const mockSharedScenario = {\n          id: ",
    ", async () => {\n        const invalidData = {\n          firstName: ": ", async () => {\n        const invalidData = {\n          firstName: ",
    "h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center": "h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center",
    ">\n            Need help? Check out our{' '}\n            <Link href=": ">\n            Need help? Check out our{' '}\n            <Link href=",
    "This shared scenario is no longer available or the link is invalid.": "This shared scenario is no longer available or the link is invalid.",
    ")\n        }, 2000)\n      }\n    } catch (err) {\n      console.error(": ")\n        }, 2000)\n      }\n    } catch (err) {\n      console.error(",
    "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z": "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z",
    ") // Replace special chars with underscore\n    .replace(/\\.{2,}/g, ": ") // Replace special chars with underscore\n    .replace(/\\.{2,}/g, ",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live": "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live",
    ")).toEqual({ r: 255, g: 255, b: 255 });\n      expect(rgbStringToRgb(": ")).toEqual({ r: 255, g: 255, b: 255 });\n      expect(rgbStringToRgb(",
    ");\n      \n      expect(result.isValid).toBe(false);\n    });\n\n    it(": ");\n      \n      expect(result.isValid).toBe(false);\n    });\n\n    it(",
    "bg-white rounded-lg shadow-sm border border-gray-200 p-1 inline-flex": "bg-white rounded-lg shadow-sm border border-gray-200 p-1 inline-flex",
    "h-10 w-10 bg-green-100 rounded-full flex items-center justify-center": "h-10 w-10 bg-green-100 rounded-full flex items-center justify-center",
    "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto": "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto",
    ",\n        })\n\n        if (!response.ok) {\n          throw new Error(": ",\n        })\n\n        if (!response.ok) {\n          throw new Error(",
    "text-sm font-medium text-gray-700 mb-2 pb-1 border-b border-gray-200": "text-sm font-medium text-gray-700 mb-2 pb-1 border-b border-gray-200",
    ", error)\n      if (error instanceof Error && error.message.includes(": ", error)\n      if (error instanceof Error && error.message.includes(",
    "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none": "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none",
    ",\n    showInMobile: true,\n    showInDesktop: true,\n  },\n  {\n    id: ": ",\n    showInMobile: true,\n    showInDesktop: true,\n  },\n  {\n    id: ",
    ")\n    const expenses = parseFloat(monthlyExpenses?.replace(/[,$]/g, ": ")\n    const expenses = parseFloat(monthlyExpenses?.replace(/[,$]/g, ",
    ") // Should return warning message\n        expect(result).toContain(": ") // Should return warning message\n        expect(result).toContain(",
    "Both loan amount and property value are required for LTV calculation": "Both loan amount and property value are required for LTV calculation",
    "}: ${result.recommendation}`;\n    \n    if (process.env.NODE_ENV === ": "}: ${result.recommendation}`;\n    \n    if (process.env.NODE_ENV === ",
    ")\n        expect(data.data.isPublic).toBe(true)\n      })\n\n      test(": ")\n        expect(data.data.isPublic).toBe(true)\n      })\n\n      test(",
    ")\n\n      // Restore localStorage\n      Object.defineProperty(window, ": ")\n\n      // Restore localStorage\n      Object.defineProperty(window, ",
    "h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center": "h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center",
    "bg-primary-100 p-4 rounded-lg font-mono text-sm mb-3 text-primary-900": "bg-primary-100 p-4 rounded-lg font-mono text-sm mb-3 text-primary-900",
    ": Building,\n};\n\nexport interface IconProps extends Omit<LucideProps, ": ": Building,\n};\n\nexport interface IconProps extends Omit<LucideProps, ",
    ", \n  text \n}: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: ": ", \n  text \n}: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: ",
    "absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none": "absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none",
    ",\n              // Error state\n              error\n                ? ": ",\n              // Error state\n              error\n                ? ",
    "absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none": "absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none",
    "bg-white dark:bg-neutral-800 !text-neutral-900 dark:!text-neutral-100": "bg-white dark:bg-neutral-800 !text-neutral-900 dark:!text-neutral-100",
    "))\n    if (isNaN(num)) return value\n    return new Intl.NumberFormat(": "))\n    if (isNaN(num)) return value\n    return new Intl.NumberFormat(",
    ", () => {\n      const formValues = {\n        currentMortgageBalance: ": ", () => {\n      const formValues = {\n        currentMortgageBalance: ",
    "\n      const stack = log.stackTrace ? `\\nStack: ${log.stackTrace}` : ": "\n      const stack = log.stackTrace ? `\\nStack: ${log.stackTrace}` : ",
    "\n      \n      // Remove quotes\n      value = value.replace(/^\"|\"$/g, ": "\n      \n      // Remove quotes\n      value = value.replace(/^\"|\"$/g, ",
    ", () => {\n      // Add some data first\n      localStorageMock.setItem(": ", () => {\n      // Add some data first\n      localStorageMock.setItem(",
    ")\n      })\n\n      expect(() => clearDemoScenarios()).toThrow(\n        ": ")\n      })\n\n      expect(() => clearDemoScenarios()).toThrow(\n        ",
    "animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto": "animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto",
    ",\n        agentName: agent ? `${agent.firstName} ${agent.lastName}` : ": ",\n        agentName: agent ? `${agent.firstName} ${agent.lastName}` : ",
    "inline-flex items-center text-blue-600 hover:text-blue-700 font-medium": "inline-flex items-center text-blue-600 hover:text-blue-700 font-medium",
    "This action cannot be undone. Please type the confirmation text below:": "This action cannot be undone. Please type the confirmation text below:",
    "relative w-full transform rounded-lg bg-white shadow-xl transition-all": "relative w-full transform rounded-lg bg-white shadow-xl transition-all",
    ">\n          {session?.user ? (\n            <button\n              type=": ">\n          {session?.user ? (\n            <button\n              type=",
    "\n  }\n  \n  return fileName\n    .trim()\n    .replace(/[^a-zA-Z0-9.-]/g, ": "\n  }\n  \n  return fileName\n    .trim()\n    .replace(/[^a-zA-Z0-9.-]/g, ",
    ") // Replace multiple dots with single dot\n    .replace(/^\\.+|\\.+$/g, ": ") // Replace multiple dots with single dot\n    .replace(/^\\.+|\\.+$/g, ",
    "); // Card titles should be h2\n      expect(sectionTitle.tagName).toBe(": "); // Card titles should be h2\n      expect(sectionTitle.tagName).toBe(",
    "should show error when incorrect text is entered and confirm is clicked": "should show error when incorrect text is entered and confirm is clicked",
    "inline-flex items-center text-sm text-gray-600 hover:text-gray-900 mb-4": "inline-flex items-center text-sm text-gray-600 hover:text-gray-900 mb-4",
    "flex items-center justify-between p-3 border border-gray-200 rounded-lg": "flex items-center justify-between p-3 border border-gray-200 rounded-lg",
    ", err)\n      const errorMessage = err instanceof Error ? err.message : ": ", err)\n      const errorMessage = err instanceof Error ? err.message : ",
    "\n          })\n        } else {\n          throw new Error(data.error || ": "\n          })\n        } else {\n          throw new Error(data.error || ",
    "disabled:bg-neutral-100 disabled:cursor-not-allowed disabled:opacity-50": "disabled:bg-neutral-100 disabled:cursor-not-allowed disabled:opacity-50",
    " && !inQuotes) {\n        values.push(current.trim())\n        current = ": " && !inQuotes) {\n        values.push(current.trim())\n        current = ",
    ", details: Record<string, any>): void {\n    const level = severity === ": ", details: Record<string, any>): void {\n    const level = severity === ",
    ")\n  const incomeValidation = validateIncomeInputs(input)\n  console.log(": ")\n  const incomeValidation = validateIncomeInputs(input)\n  console.log(",
    ").mockResolvedValueOnce(false)\n\n        const request = new NextRequest(": ").mockResolvedValueOnce(false)\n\n        const request = new NextRequest(",
    "absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400": "absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400",
    ") {\n      filtered = filtered.filter(agent => \n        filterActive === ": ") {\n      filtered = filtered.filter(agent => \n        filterActive === ",
    ")\n        loadScenarios()\n      } else {\n        setError(info.error || ": ")\n        loadScenarios()\n      } else {\n        setError(info.error || ",
    "The page you're looking for doesn't exist in demo mode, but that's okay!": "The page you're looking for doesn't exist in demo mode, but that's okay!",
    "\n          })\n          setShowPasswordForm(false)\n          setSuccess(": "\n          })\n          setShowPasswordForm(false)\n          setSuccess(",
    "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 text-sm": "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 text-sm",
    "button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])": "button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])",
    ",\n      email: assignedAgent.email,\n      phone: assignedAgent.phone || ": ",\n      email: assignedAgent.email,\n      phone: assignedAgent.phone || ",
    "Your discretionary income is too low for the HELOC acceleration strategy": "Your discretionary income is too low for the HELOC acceleration strategy",
    ",\n    min: {\n      value: VALIDATION_RULES.expenses.min,\n      message: ": ",\n    min: {\n      value: VALIDATION_RULES.expenses.min,\n      message: ",
    "should call onConfirm when correct text is entered and confirm is clicked": "should call onConfirm when correct text is entered and confirm is clicked",
    "); // Should pass (threshold 3:1)\n      const result2 = validateContrast(": "); // Should pass (threshold 3:1)\n      const result2 = validateContrast(",
    "localStorage is not available in this browser. Demo data cannot be saved.": "localStorage is not available in this browser. Demo data cannot be saved.",
    "animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mx-auto": "animate-spin rounded-full h-16 w-16 border-b-2 border-primary-600 mx-auto",
    ") as keyof typeof SAFE_COMBINATIONS;\n  const text = textMatch[0].replace(": ") as keyof typeof SAFE_COMBINATIONS;\n  const text = textMatch[0].replace(",
    " }\n  }\n  \n  if (file.size > maxSize) {\n    return { valid: false, error: ": " }\n  }\n  \n  if (file.size > maxSize) {\n    return { valid: false, error: ",
    ");\n    expect(button).toBeInTheDocument();\n    \n    // In a real test, you": ");\n    expect(button).toBeInTheDocument();\n    \n    // In a real test, you",
    ", async () => {\n        const passwordData = {\n          currentPassword: ": ", async () => {\n        const passwordData = {\n          currentPassword: ",
    "\n      const saltRounds = 12\n\n      mockBcrypt.hash.mockResolvedValueOnce(": "\n      const saltRounds = 12\n\n      mockBcrypt.hash.mockResolvedValueOnce(",
    "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100": "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100",
    "text-xs text-gray-500 bg-yellow-50 border border-yellow-200 rounded-lg p-3": "text-xs text-gray-500 bg-yellow-50 border border-yellow-200 rounded-lg p-3",
    "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50": "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50",
    "flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full": "flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full",
    "mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100": "mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100",
    ");\n    onConfirm();\n  };\n\n  const handleClose = () => {\n    setInputValue(": ");\n    onConfirm();\n  };\n\n  const handleClose = () => {\n    setInputValue(",
    "M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z": "M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z",
    "focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2": "focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2",
    ",\n              // Padding adjustments for icons\n              leftIcon ? ": ",\n              // Padding adjustments for icons\n              leftIcon ? ",
    "Use numbers only (e.g., 400000 for loan amount, 500000 for property value)": "Use numbers only (e.g., 400000 for loan amount, 500000 for property value)",
    "\n  const logMessage = (loanAmount == null || propertyValue == null)\n    ? ": "\n  const logMessage = (loanAmount == null || propertyValue == null)\n    ? ",
    "\n        if (balance > 0 && payment < balance * 0.002) {\n          return ": "\n        if (balance > 0 && payment < balance * 0.002) {\n          return ",
    ";\n    \n    const formatOptions: Intl.NumberFormatOptions = {\n      style: ": ";\n    \n    const formatOptions: Intl.NumberFormatOptions = {\n      style: ",
    ")\n      })\n\n      expect(() => {\n        addDemoScenario({\n          name: ": ")\n      })\n\n      expect(() => {\n        addDemoScenario({\n          name: ",
    "\n      })\n    } else {\n      // Disable sharing\n      await query(\n        ": "\n      })\n    } else {\n      // Disable sharing\n      await query(\n        ",
    ")\n        return `demo-user-${emailHash.slice(0, 8)}`\n      }\n      return ": ")\n        return `demo-user-${emailHash.slice(0, 8)}`\n      }\n      return ",
    "absolute inset-0 rounded-full h-16 w-16 border-2 border-primary-200 mx-auto": "absolute inset-0 rounded-full h-16 w-16 border-2 border-primary-200 mx-auto",
    "mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-blue-100": "mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-blue-100",
    "mt-2 p-4 bg-neutral-900 text-neutral-100 rounded-lg overflow-x-auto text-sm": "mt-2 p-4 bg-neutral-900 text-neutral-100 rounded-lg overflow-x-auto text-sm",
    "dark:text-neutral-300 dark:hover:text-neutral-100 dark:hover:bg-neutral-800": "dark:text-neutral-300 dark:hover:text-neutral-100 dark:hover:bg-neutral-800",
    ", formValues)\n        expect(result).toBe(true) // Should pass when LTV can": ", formValues)\n        expect(result).toBe(true) // Should pass when LTV can",
    "Loan amount should be 0 or greater, property value should be greater than 0": "Loan amount should be 0 or greater, property value should be greater than 0",
    ");\n  \n  if (sanitized.length === 3) {\n    const expanded = sanitized.split(": ");\n  \n  if (sanitized.length === 3) {\n    const expanded = sanitized.split(",
    ", (error) => {\n      errorTracker.captureError(error, {\n        component: ": ", (error) => {\n      errorTracker.captureError(error, {\n        component: ",
    ").map(s => s.trim())\n      : row.licenseStates || [],\n    specialties: row[": ").map(s => s.trim())\n      : row.licenseStates || [],\n    specialties: row[",
    "\n        \n        if (income > 0 && expenses >= income) {\n          return ": "\n        \n        if (income > 0 && expenses >= income) {\n          return ",
    ")\n  const payment = parseFloat(formValues.monthlyPayment?.replace(/[,$]/g, ": ")\n  const payment = parseFloat(formValues.monthlyPayment?.replace(/[,$]/g, ",
    ")\n  const mortgageValidation = validateMortgageInputs(input)\n  console.log(": ")\n  const mortgageValidation = validateMortgageInputs(input)\n  console.log(",
    " as any);\n      expect(safeColors).toEqual([]);\n    });\n  });\n});\n\ndescribe(": " as any);\n      expect(safeColors).toEqual([]);\n    });\n  });\n});\n\ndescribe(",
    "\n      )\n\n      // Restore localStorage\n      Object.defineProperty(window, ": "\n      )\n\n      // Restore localStorage\n      Object.defineProperty(window, ",
    "flex items-center justify-center w-12 h-12 mx-auto bg-green-100 rounded-full": "flex items-center justify-center w-12 h-12 mx-auto bg-green-100 rounded-full",
    "\n            />\n            \n            <div>\n              <label htmlFor=": "\n            />\n            \n            <div>\n              <label htmlFor=",
    "absolute right-0 top-1/2 transform -translate-y-1/2 text-xs font-medium pr-2": "absolute right-0 top-1/2 transform -translate-y-1/2 text-xs font-medium pr-2",
    "disabled:opacity-60 disabled:cursor-not-allowed disabled:pointer-events-none": "disabled:opacity-60 disabled:cursor-not-allowed disabled:pointer-events-none",
    ", 500000)\n      expect(result2.success).toBe(false)\n    })\n  })\n\n  describe(": ", 500000)\n      expect(result2.success).toBe(false)\n    })\n  })\n\n  describe(",
    ");\n      expect(button).toBeDisabled();\n      expect(button).toHaveAttribute(": ");\n      expect(button).toBeDisabled();\n      expect(button).toHaveAttribute(",
    ",\n          current_mortgage_balance: 200000,\n          created_at: new Date(": ",\n          current_mortgage_balance: 200000,\n          created_at: new Date(",
    "\n        >\n          Cancel\n        </button>\n        <button\n          type=": "\n        >\n          Cancel\n        </button>\n        <button\n          type=",
    "border border-gray-200 rounded-lg p-6 hover:shadow-md transition duration-200": "border border-gray-200 rounded-lg p-6 hover:shadow-md transition duration-200",
    "\n  }\n\n  return fieldNameMap[fieldName] || fieldName\n    .replace(/([A-Z])/g, ": "\n  }\n\n  return fieldNameMap[fieldName] || fieldName\n    .replace(/([A-Z])/g, ",
    "flex justify-between text-body-sm text-neutral-600 dark:text-neutral-400 mb-2": "flex justify-between text-body-sm text-neutral-600 dark:text-neutral-400 mb-2",
    ")\n  const expenses = parseFloat(formValues.monthlyExpenses?.replace(/[,$]/g, ": ")\n  const expenses = parseFloat(formValues.monthlyExpenses?.replace(/[,$]/g, ",
    "\n  }\n  \n  // Allow only safe HTML tags and attributes\n  const allowedTags = [": "\n  }\n  \n  // Allow only safe HTML tags and attributes\n  const allowedTags = [",
    ")\n  }\n  \n  // Handle max age\n  if (config.maxAge) {\n    response.headers.set(": ")\n  }\n  \n  // Handle max age\n  if (config.maxAge) {\n    response.headers.set(",
    "This will permanently delete all your demo data. This action cannot be undone.": "This will permanently delete all your demo data. This action cannot be undone.",
    ">Add notes about this scenario</p>\n              <textarea\n                id=": ">Add notes about this scenario</p>\n              <textarea\n                id=",
    "Interest rates should be between 0.1% and 30%. For example, enter 6.5 for 6.5%": "Interest rates should be between 0.1% and 30%. For example, enter 6.5 for 6.5%",
    ");\n      expect(result.suggestions.length).toBeGreaterThan(0);\n    });\n\n    it(": ");\n      expect(result.suggestions.length).toBeGreaterThan(0);\n    });\n\n    it(",
    " :\n                        storageInfo && storageInfo.used > 2 * 1024 * 1024 ? ": " :\n                        storageInfo && storageInfo.used > 2 * 1024 * 1024 ? ",
    "A critical error occurred that prevented the application from loading properly.": "A critical error occurred that prevented the application from loading properly.",
    "bg-white rounded-lg shadow-lg p-8 border-2 border-green-200 heloc-strategy-card": "bg-white rounded-lg shadow-lg p-8 border-2 border-green-200 heloc-strategy-card",
    "h-4 w-4 rounded border-neutral-300 text-primary-600 transition-all duration-200": "h-4 w-4 rounded border-neutral-300 text-primary-600 transition-all duration-200",
    "focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500": "focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500",
    "fixed inset-0 bg-black/50 backdrop-blur-sm z-40 transition-opacity duration-300": "fixed inset-0 bg-black/50 backdrop-blur-sm z-40 transition-opacity duration-300",
    " && !item.showInDesktop) {\n        return false;\n      }\n      if (context === ": " && !item.showInDesktop) {\n        return false;\n      }\n      if (context === ",
    ")\n        const income = parseFloat(formValues.monthlyIncome?.replace(/[,$]/g, ": ")\n        const income = parseFloat(formValues.monthlyIncome?.replace(/[,$]/g, ",
    ")\n      } else {\n        // Update via API\n        const response = await fetch(": ")\n      } else {\n        // Update via API\n        const response = await fetch(",
    "\n                  \n                  const blob = new Blob([template], { type: ": "\n                  \n                  const blob = new Blob([template], { type: ",
    "bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4": "bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4",
    "bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4": "bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4",
    "bg-white dark:bg-neutral-800 border-b border-neutral-200 dark:border-neutral-700": "bg-white dark:bg-neutral-800 border-b border-neutral-200 dark:border-neutral-700",
    "bg-gradient-to-br from-blue-50 to-blue-100 p-6 rounded-lg border border-blue-200": "bg-gradient-to-br from-blue-50 to-blue-100 p-6 rounded-lg border border-blue-200",
    "bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border border-blue-200": "bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border border-blue-200",
    ")\n    }\n  }\n\n  disable() {\n    this.isEnabled = false\n    if (typeof window !== ": ")\n    }\n  }\n\n  disable() {\n    this.isEnabled = false\n    if (typeof window !== ",
    "Review the highlighted fields and ensure all values are within acceptable ranges": "Review the highlighted fields and ensure all values are within acceptable ranges",
    "))\n        const income = parseFloat(formValues.monthlyIncome?.replace(/[,$]/g, ": "))\n        const income = parseFloat(formValues.monthlyIncome?.replace(/[,$]/g, ",
    "\n  }\n  \n  return email\n    .trim()\n    .toLowerCase()\n    .replace(/[^\\w@.-]/g, ": "\n  }\n  \n  return email\n    .trim()\n    .toLowerCase()\n    .replace(/[^\\w@.-]/g, ",
    "\n  }\n  \n  // Remove common SQL injection patterns\n  return input\n    .replace(/[": "\n  }\n  \n  // Remove common SQL injection patterns\n  return input\n    .replace(/[",
    "UPDATE users SET password_hash = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2": "UPDATE users SET password_hash = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2",
    ",\n          },\n        })\n\n        if (!response.ok) {\n          throw new Error(": ",\n          },\n        })\n\n        if (!response.ok) {\n          throw new Error(",
    "\n                  />\n                  <NavigationLink\n                    href=": "\n                  />\n                  <NavigationLink\n                    href=",
    "text-body-sm font-medium text-neutral-700 dark:text-neutral-300 truncate max-w-32": "text-body-sm font-medium text-neutral-700 dark:text-neutral-300 truncate max-w-32",
    "should display LTV analysis when both loan amount and property value are provided": "should display LTV analysis when both loan amount and property value are provided",
    ")\n        const payment = parseFloat(formValues.monthlyPayment?.replace(/[,$]/g, ": ")\n        const payment = parseFloat(formValues.monthlyPayment?.replace(/[,$]/g, ",
    ")\n  \n  // Handle origin\n  if (config.origin === true) {\n    response.headers.set(": ")\n  \n  // Handle origin\n  if (config.origin === true) {\n    response.headers.set(",
    ");\n      expect(alert).toBeInTheDocument();\n      expect(alert).toHaveTextContent(": ");\n      expect(alert).toBeInTheDocument();\n      expect(alert).toHaveTextContent(",
    ", () => {\n    // Mock high contrast media query\n    Object.defineProperty(window, ": ", () => {\n    // Mock high contrast media query\n    Object.defineProperty(window, ",
    "\n    })\n  }\n\n  const formatMonths = (months: number) => {\n    if (!months) return ": "\n    })\n  }\n\n  const formatMonths = (months: number) => {\n    if (!months) return ",
    "grid grid-cols-1 lg:grid-cols-2 divide-y lg:divide-y-0 lg:divide-x divide-gray-200": "grid grid-cols-1 lg:grid-cols-2 divide-y lg:divide-y-0 lg:divide-x divide-gray-200",
    ")\n      return\n    }\n\n    if (scenarioName.trim().length < 3) {\n      console.log(": ")\n      return\n    }\n\n    if (scenarioName.trim().length < 3) {\n      console.log(",
    "s a quota exceeded error\n    if (error instanceof Error && (\n      error.name === ": "s a quota exceeded error\n    if (error instanceof Error && (\n      error.name === ",
    ">Give this scenario a memorable name</p>\n              <input\n                type=": ">Give this scenario a memorable name</p>\n              <input\n                type=",
    "}\n${formData.pmiMonthly ? `- MIP/PMI: ${formatCurrency(formData.pmiMonthly)}/mo` : ": "}\n${formData.pmiMonthly ? `- MIP/PMI: ${formatCurrency(formData.pmiMonthly)}/mo` : ",
    "bg-gradient-to-br from-green-50 to-green-100 p-6 rounded-lg border border-green-200": "bg-gradient-to-br from-green-50 to-green-100 p-6 rounded-lg border border-green-200",
    ":\n        return <CurrencyInput name={name} label={label} {...props} />\n      case ": ":\n        return <CurrencyInput name={name} label={label} {...props} />\n      case ",
    "\n): ContrastResult {\n  // Convert colors to RGB\n  const fg = foreground.startsWith(": "\n): ContrastResult {\n  // Convert colors to RGB\n  const fg = foreground.startsWith(",
    "\n        }\n      )\n    })\n\n    // Handle global errors\n    window.addEventListener(": "\n        }\n      )\n    })\n\n    // Handle global errors\n    window.addEventListener(",
    ")\n        const expenses = parseFloat(formValues.monthlyExpenses?.replace(/[,$]/g, ": ")\n        const expenses = parseFloat(formValues.monthlyExpenses?.replace(/[,$]/g, ",
    "HELOC limit must be greater than $0. Please enter your approved HELOC credit limit.": "HELOC limit must be greater than $0. Please enter your approved HELOC credit limit.",
    "\n      }\n\n      // Mock new token generation\n      mockJwt.sign.mockReturnValueOnce(": "\n      }\n\n      // Mock new token generation\n      mockJwt.sign.mockReturnValueOnce(",
    ", {\n        value: localStorageMock,\n        writable: true\n      })\n    })\n\n    it(": ", {\n        value: localStorageMock,\n        writable: true\n      })\n    })\n\n    it(",
    "Don't worry, this is just demo mode. You can try again or go back to the calculator.": "Don't worry, this is just demo mode. You can try again or go back to the calculator.",
    "A critical error occurred in demo mode. This is unusual but not a cause for concern.": "A critical error occurred in demo mode. This is unusual but not a cause for concern.",
    "\n            />\n            \n            <EnhancedCurrencyInput\n              field=": "\n            />\n            \n            <EnhancedCurrencyInput\n              field=",
    "bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg p-6 border border-green-200": "bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg p-6 border border-green-200",
    "mb-6 bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg border border-blue-300": "mb-6 bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg border border-blue-300",
    "bg-gradient-to-r from-yellow-50 to-orange-50 p-4 rounded-lg border border-yellow-200": "bg-gradient-to-r from-yellow-50 to-orange-50 p-4 rounded-lg border border-yellow-200",
    ", description.trim().length)\n    \n    if (!scenarioName.trim()) {\n      console.log(": ", description.trim().length)\n    \n    if (!scenarioName.trim()) {\n      console.log(",
    "absolute z-50 min-w-48 rounded-lg !bg-white shadow-lg border border-neutral-200 py-1": "absolute z-50 min-w-48 rounded-lg !bg-white shadow-lg border border-neutral-200 py-1",
    "flex items-center space-x-3 pt-6 border-t border-neutral-200 dark:border-neutral-700": "flex items-center space-x-3 pt-6 border-t border-neutral-200 dark:border-neutral-700",
    ").map(s => s.trim())\n      : row.specialties || [],\n    yearsExperience: Number(row[": ").map(s => s.trim())\n      : row.specialties || [],\n    yearsExperience: Number(row[",
    "\n        }\n        return true\n      }\n    }\n  },\n\n  monthlyIncome: {\n    required: ": "\n        }\n        return true\n      }\n    }\n  },\n\n  monthlyIncome: {\n    required: ",
    "bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4 mb-6": "bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4 mb-6",
    "bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6 mb-8": "bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6 mb-8",
    ")\n        \n        setTimeout(() => {\n          button.textContent = originalText || ": ")\n        \n        setTimeout(() => {\n          button.textContent = originalText || ",
    "btn-danger bg-red-500 hover:bg-red-600 focus:bg-red-600 text-white border-transparent": "btn-danger bg-red-500 hover:bg-red-600 focus:bg-red-600 text-white border-transparent",
    "M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z": "M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z",
    ":\n        return <PercentageInput name={name} label={label} {...props} />\n      case ": ":\n        return <PercentageInput name={name} label={label} {...props} />\n      case ",
    ") as HTMLCanvasElement;\n      if (!canvas) {\n        canvas = document.createElement(": ") as HTMLCanvasElement;\n      if (!canvas) {\n        canvas = document.createElement(",
    ").mockResolvedValueOnce(true).mockResolvedValueOnce(false)\n        jest.spyOn(bcrypt, ": ").mockResolvedValueOnce(true).mockResolvedValueOnce(false)\n        jest.spyOn(bcrypt, ",
    "Mortgage balance must be greater than $0. Please enter your current principal balance.": "Mortgage balance must be greater than $0. Please enter your current principal balance.",
    "SELECT id, is_public, public_share_token FROM scenarios WHERE id = $1 AND user_id = $2": "SELECT id, is_public, public_share_token FROM scenarios WHERE id = $1 AND user_id = $2",
    "\n            />\n            \n            <EnhancedPercentageInput\n              field=": "\n            />\n            \n            <EnhancedPercentageInput\n              field=",
    "bg-gradient-to-br from-purple-50 to-purple-100 p-6 rounded-lg border border-purple-200": "bg-gradient-to-br from-purple-50 to-purple-100 p-6 rounded-lg border border-purple-200",
    ")\n      expect(result1.success).toBe(false)\n\n      const result2 = safeLTVCalculation(": ")\n      expect(result1.success).toBe(false)\n\n      const result2 = safeLTVCalculation(",
    "HELOC rate is significantly higher than mortgage rate - strategy may not be beneficial": "HELOC rate is significantly higher than mortgage rate - strategy may not be beneficial",
    ")\n        const propertyValue = parseFloat(formValues.propertyValue?.replace(/[,$]/g, ": ")\n        const propertyValue = parseFloat(formValues.propertyValue?.replace(/[,$]/g, ",
    "))\n  }\n  \n  // Handle headers\n  if (config.allowedHeaders) {\n    response.headers.set(": "))\n  }\n  \n  // Handle headers\n  if (config.allowedHeaders) {\n    response.headers.set(",
    ", () => {\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = ": ", () => {\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = ",
    ")\n    await user.click(clearButton)\n\n    const firstConfirmButton = screen.getByTestId(": ")\n    await user.click(clearButton)\n\n    const firstConfirmButton = screen.getByTestId(",
    "bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200 rounded-lg p-4 mb-8": "bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-200 rounded-lg p-4 mb-8",
    ">\n              Specialties\n            </label>\n            <input\n              type=": ">\n              Specialties\n            </label>\n            <input\n              type=",
    ")\n\n    try {\n      // Direct API call to test login\n      const response = await fetch(": ")\n\n    try {\n      // Direct API call to test login\n      const response = await fetch(",
    ", processedData)\n        try {\n          onSubmit(processedData)\n          addDebugLog(": ", processedData)\n        try {\n          onSubmit(processedData)\n          addDebugLog(",
    "mb-6 bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg border border-green-300": "mb-6 bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg border border-green-300",
    "absolute right-0 top-1/2 transform -translate-y-1/2 text-xs font-medium pr-2 text-white": "absolute right-0 top-1/2 transform -translate-y-1/2 text-xs font-medium pr-2 text-white",
    " }\n  }\n  \n  if (!allowedTypes.includes(file.type)) {\n    return { valid: false, error: ": " }\n  }\n  \n  if (!allowedTypes.includes(file.type)) {\n    return { valid: false, error: ",
    "))\n  }\n  \n  // Handle credentials\n  if (config.credentials) {\n    response.headers.set(": "))\n  }\n  \n  // Handle credentials\n  if (config.credentials) {\n    response.headers.set(",
    "].includes(request.method)) {\n    const csrfToken = request.cookies.get(CSRFProtection[": "].includes(request.method)) {\n    const csrfToken = request.cookies.get(CSRFProtection[",
    "Interest rate must be between 0.1% and 30%. Enter as a percentage (e.g., 6.5 for 6.5%).": "Interest rate must be between 0.1% and 30%. Enter as a percentage (e.g., 6.5 for 6.5%).",
    "Interest rate must be at least 0.1%. Please enter as a percentage (e.g., 6.5 for 6.5%).": "Interest rate must be at least 0.1%. Please enter as a percentage (e.g., 6.5 for 6.5%).",
    ");\n      \n      expect(result.isAccessible).toBe(true);\n      expect(result.level).toBe(": ");\n      \n      expect(result.isAccessible).toBe(true);\n      expect(result.level).toBe(",
    ");\n      }).toThrow();\n      \n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it(": ");\n      }).toThrow();\n      \n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it(",
    ")).toBeInTheDocument()\n\n    // Click cancel\n    const cancelButton = screen.getByTestId(": ")).toBeInTheDocument()\n\n    // Click cancel\n    const cancelButton = screen.getByTestId(",
    ", () => {\n      // Mock localStorage as unavailable\n      Object.defineProperty(window, ": ", () => {\n      // Mock localStorage as unavailable\n      Object.defineProperty(window, ",
    ", error)\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: ": ", error)\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: ",
    "mt-4 p-4 bg-green-50 border border-green-200 rounded-lg max-w-2xl mx-auto demo-mode-info": "mt-4 p-4 bg-green-50 border border-green-200 rounded-lg max-w-2xl mx-auto demo-mode-info",
    ");\n  \n  // Check for dangerous combinations\n  const dangerousCombinations = [\n    { bg: ": ");\n  \n  // Check for dangerous combinations\n  const dangerousCombinations = [\n    { bg: ",
    ")\n\n    // Click confirm on second modal\n    const secondConfirmButton = screen.getByText(": ")\n\n    // Click confirm on second modal\n    const secondConfirmButton = screen.getByText(",
    ");\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining(": ");\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining(",
    ">\n              Display Order\n            </label>\n            <input\n              type=": ">\n              Display Order\n            </label>\n            <input\n              type=",
    ", error)\n\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: ": ", error)\n\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: ",
    "text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300": "text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300",
    "flex items-center justify-between p-4 border-b border-neutral-200 dark:border-neutral-800": "flex items-center justify-between p-4 border-b border-neutral-200 dark:border-neutral-800",
    "M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1": "M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1",
    ")\n  if (lines.length < 2) return []\n\n  // Parse headers\n  const headers = lines[0].split(": ")\n  if (lines.length < 2) return []\n\n  // Parse headers\n  const headers = lines[0].split(",
    ", options?: Intl.NumberFormatOptions) {\n  if (value === undefined || value === 0) return ": ", options?: Intl.NumberFormatOptions) {\n  if (value === undefined || value === 0) return ",
    ", () => {\n    render(<SuccessModal {...defaultProps} />)\n    \n    expect(screen.getByRole(": ", () => {\n    render(<SuccessModal {...defaultProps} />)\n    \n    expect(screen.getByRole(",
    ", () => {\n    render(<SuccessModal {...defaultProps} />)\n    \n    expect(screen.getByText(": ", () => {\n    render(<SuccessModal {...defaultProps} />)\n    \n    expect(screen.getByText(",
    "\n        throw error\n      })\n\n      expect(() => saveDemoScenarios([])).toThrow(\n        ": "\n        throw error\n      })\n\n      expect(() => saveDemoScenarios([])).toThrow(\n        ",
    "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center": "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center",
    "></div>\n            </label>\n          </div>\n\n          <div>\n            <label htmlFor=": "></div>\n            </label>\n          </div>\n\n          <div>\n            <label htmlFor=",
    ", err)\n      // Fallback for older browsers\n      const textArea = document.createElement(": ", err)\n      // Fallback for older browsers\n      const textArea = document.createElement(",
    ")\n    loadScenarios()\n    setShowSuccessModal(false)\n  }\n\n  if (!isDemoMode && status === ": ")\n    loadScenarios()\n    setShowSuccessModal(false)\n  }\n\n  if (!isDemoMode && status === ",
    ")\n    try {\n      await onSave(scenarioName.trim(), description.trim())\n      console.log(": ")\n    try {\n      await onSave(scenarioName.trim(), description.trim())\n      console.log(",
    "))\n        const balance = parseFloat(formValues.currentMortgageBalance?.replace(/[,$]/g, ": "))\n        const balance = parseFloat(formValues.currentMortgageBalance?.replace(/[,$]/g, ",
    ">\n              Licensed States\n            </label>\n            <input\n              type=": ">\n              Licensed States\n            </label>\n            <input\n              type=",
    "bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-5 shadow-md border border-blue-200": "bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-5 shadow-md border border-blue-200",
    ") // Empty strings convert to 0, which triggers the \"positive values\" error\n    })\n\n    it(": ") // Empty strings convert to 0, which triggers the \"positive values\" error\n    })\n\n    it(",
    ");\n    expect(result.isAccessible).toBe(false);\n    expect(result.recommendation).toContain(": ");\n    expect(result.isAccessible).toBe(false);\n    expect(result.recommendation).toContain(",
    "\n    })\n\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByText(": "\n    })\n\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByText(",
    "}\n${formData.hoaFeesMonthly ? `- HOA Fees: ${formatCurrency(formData.hoaFeesMonthly)}/mo` : ": "}\n${formData.hoaFeesMonthly ? `- HOA Fees: ${formatCurrency(formData.hoaFeesMonthly)}/mo` : ",
    "mt-6 mb-6 bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg border border-green-300": "mt-6 mb-6 bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg border border-green-300",
    ",\n    requiresAuth: true,\n    showInMobile: true,\n    showInDesktop: true,\n  },\n  {\n    id: ": ",\n    requiresAuth: true,\n    showInMobile: true,\n    showInDesktop: true,\n  },\n  {\n    id: ",
    ") {\n      this.sendToExternalService(errorReport).catch(sendError => {\n        logger.error(": ") {\n      this.sendToExternalService(errorReport).catch(sendError => {\n        logger.error(",
    ", origin)\n    }\n  }\n  \n  // Handle methods\n  if (config.methods) {\n    response.headers.set(": ", origin)\n    }\n  }\n  \n  // Handle methods\n  if (config.methods) {\n    response.headers.set(",
    ",\n            headers: new Headers()\n          }),\n          { params: Promise.resolve({ id: ": ",\n            headers: new Headers()\n          }),\n          { params: Promise.resolve({ id: ",
    ");\n      \n      expect(result.isValid).toBe(false);\n      expect(result.issues[0]).toContain(": ");\n      \n      expect(result.isValid).toBe(false);\n      expect(result.issues[0]).toContain(",
    ")\n    })\n\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByText(": ")\n    })\n\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByText(",
    ", {\n        value: localStorageMock,\n        writable: true\n      })\n    })\n  })\n\n  describe(": ", {\n        value: localStorageMock,\n        writable: true\n      })\n    })\n  })\n\n  describe(",
    "Calculate potential savings using HELOC acceleration strategy to pay off your mortgage faster": "Calculate potential savings using HELOC acceleration strategy to pay off your mortgage faster",
    ")\n      } else {\n        router.push(callbackUrl)\n      }\n    } catch (err) {\n      setError(": ")\n      } else {\n        router.push(callbackUrl)\n      }\n    } catch (err) {\n      setError(",
    ">\n              Interest Rate (%)\n            </label>\n            <input\n              type=": ">\n              Interest Rate (%)\n            </label>\n            <input\n              type=",
    ")\n  const discretionary = parseFloat(formValues.monthlyDiscretionaryIncome?.replace(/[,$]/g, ": ")\n  const discretionary = parseFloat(formValues.monthlyDiscretionaryIncome?.replace(/[,$]/g, ",
    "HELOC limit must be between $1,000 and $5,000,000. This is your maximum approved credit line.": "HELOC limit must be between $1,000 and $5,000,000. This is your maximum approved credit line.",
    ">\n              Go to Home Page\n            </Button>\n          </Link>\n\n          <Link href=": ">\n              Go to Home Page\n            </Button>\n          </Link>\n\n          <Link href=",
    "text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800": "text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800",
    "]): string {\n  const logs = debugLogger.getFormattedLogs(category)\n  \n  if (typeof window !== ": "]): string {\n  const logs = debugLogger.getFormattedLogs(category)\n  \n  if (typeof window !== ",
    "\n  \n  // Include user agent for additional uniqueness\n  const userAgent = request.headers.get(": "\n  \n  // Include user agent for additional uniqueness\n  const userAgent = request.headers.get(",
    "Interest rate cannot exceed 30%. Please verify and enter as a percentage (e.g., 6.5 for 6.5%).": "Interest rate cannot exceed 30%. Please verify and enter as a percentage (e.g., 6.5 for 6.5%).",
    ", {\n            headers: new Headers()\n          }),\n          { params: Promise.resolve({ id: ": ", {\n            headers: new Headers()\n          }),\n          { params: Promise.resolve({ id: ",
    ")\n    await user.click(firstConfirmButton)\n\n    const secondConfirmButton = screen.getByTestId(": ")\n    await user.click(firstConfirmButton)\n\n    const secondConfirmButton = screen.getByTestId(",
    "Compare traditional mortgage payments with HELOC acceleration strategy to see potential savings": "Compare traditional mortgage payments with HELOC acceleration strategy to see potential savings",
    "We're sorry for the inconvenience. Please try again or contact support if the problem persists.": "We're sorry for the inconvenience. Please try again or contact support if the problem persists.",
    ")\n      } else {\n        // Production mode - send to API\n        const response = await fetch(": ")\n      } else {\n        // Production mode - send to API\n        const response = await fetch(",
    ">\n            {ltvInfo.canCalculateLTV\n              ? ltvInfo.isMIPRequired\n                ? ": ">\n            {ltvInfo.canCalculateLTV\n              ? ltvInfo.isMIPRequired\n                ? ",
    "\n\n    if (rule.required && (!value || value <= 0)) {\n      return `${field.replace(/([A-Z])/g, ": "\n\n    if (rule.required && (!value || value <= 0)) {\n      return `${field.replace(/([A-Z])/g, ",
    ")\n      }\n    }\n  }\n\n  const handleClose = () => {\n    if (!isLoading) {\n      setScenarioName(": ")\n      }\n    }\n  }\n\n  const handleClose = () => {\n    if (!isLoading) {\n      setScenarioName(",
    "absolute left-0 top-1 w-6 h-0.5 bg-current rounded-full transition-all duration-300 ease-in-out": "absolute left-0 top-1 w-6 h-0.5 bg-current rounded-full transition-all duration-300 ease-in-out",
    "absolute left-0 top-4 w-6 h-0.5 bg-current rounded-full transition-all duration-300 ease-in-out": "absolute left-0 top-4 w-6 h-0.5 bg-current rounded-full transition-all duration-300 ease-in-out",
    ")).not.toBeInTheDocument()\n    expect(mockClearDemoScenarios).not.toHaveBeenCalled()\n  })\n\n  it(": ")).not.toBeInTheDocument()\n    expect(mockClearDemoScenarios).not.toHaveBeenCalled()\n  })\n\n  it(",
    ")\n    }\n\n    // Re-throw custom errors\n    if (error instanceof Error && error.message.includes(": ")\n    }\n\n    // Re-throw custom errors\n    if (error instanceof Error && error.message.includes(",
    "\n  }),\n\n  [ErrorCode.INTERNAL_ERROR]: () => ({\n    code: ErrorCode.INTERNAL_ERROR,\n    message: ": "\n  }),\n\n  [ErrorCode.INTERNAL_ERROR]: () => ({\n    code: ErrorCode.INTERNAL_ERROR,\n    message: ",
    "\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=": "\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=",
    "}\n${formData.insuranceMonthly ? `- Insurance: ${formatCurrency(formData.insuranceMonthly)}/mo` : ": "}\n${formData.insuranceMonthly ? `- Insurance: ${formatCurrency(formData.insuranceMonthly)}/mo` : ",
    "absolute left-0 top-2.5 w-6 h-0.5 bg-current rounded-full transition-all duration-300 ease-in-out": "absolute left-0 top-2.5 w-6 h-0.5 bg-current rounded-full transition-all duration-300 ease-in-out",
    ", formValues)\n        expect(result).toBe(true) // Should pass validation\n      }\n    })\n\n    it(": ", formValues)\n        expect(result).toBe(true) // Should pass validation\n      }\n    })\n\n    it(",
    "Did you mean to enter years instead of months? A typical mortgage is 15-30 years (180-360 months)": "Did you mean to enter years instead of months? A typical mortgage is 15-30 years (180-360 months)",
    ")\n    const helocValidation = validateHELOCInputs(input as HELOCValidationInput)\n    console.log(": ")\n    const helocValidation = validateHELOCInputs(input as HELOCValidationInput)\n    console.log(",
    ", {\n            headers: new Headers()\n          }),\n          { params: Promise.resolve({ token: ": ", {\n            headers: new Headers()\n          }),\n          { params: Promise.resolve({ token: ",
    ")).toBeInTheDocument()\n    })\n\n    // Should show storage usage in KB\n    expect(screen.getByText(": ")).toBeInTheDocument()\n    })\n\n    // Should show storage usage in KB\n    expect(screen.getByText(",
    "\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=": "\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=",
    ")) {\n      return\n    }\n\n    try {\n      const isDemoMode = process.env.NEXT_PUBLIC_DEMO_MODE === ": ")) {\n      return\n    }\n\n    try {\n      const isDemoMode = process.env.NEXT_PUBLIC_DEMO_MODE === ",
    ",\n        [shareToken, scenarioId]\n      )\n\n      const shareUrl = `${process.env.NEXTAUTH_URL || ": ",\n        [shareToken, scenarioId]\n      )\n\n      const shareUrl = `${process.env.NEXTAUTH_URL || ",
    "btn-primary bg-primary-500 hover:bg-primary-600 focus:bg-primary-600 text-white border-transparent": "btn-primary bg-primary-500 hover:bg-primary-600 focus:bg-primary-600 text-white border-transparent",
    " && navigator.clipboard) {\n    navigator.clipboard.writeText(logs).then(() => {\n      console.log(": " && navigator.clipboard) {\n    navigator.clipboard.writeText(logs).then(() => {\n      console.log(",
    "))\n        const mortgageBalance = parseFloat(formValues.currentMortgageBalance?.replace(/[,$]/g, ": "))\n        const mortgageBalance = parseFloat(formValues.currentMortgageBalance?.replace(/[,$]/g, ",
    ", metrics)\n  }\n}\n\n// Health check logging\nexport function logHealthCheck(service: string, status: ": ", metrics)\n  }\n}\n\n// Health check logging\nexport function logHealthCheck(service: string, status: ",
    "Property value must be between $10,000 and $50,000,000. Use a recent appraisal or market estimate.": "Property value must be between $10,000 and $50,000,000. Use a recent appraisal or market estimate.",
    ");\n    \n    expect(decorativeIcon).toBeInTheDocument();\n    expect(decorativeIcon).toHaveAttribute(": ");\n    \n    expect(decorativeIcon).toBeInTheDocument();\n    expect(decorativeIcon).toHaveAttribute(",
    ", () => {\n    render(<SuccessModal {...defaultProps} />)\n    \n    const message = screen.getByText(": ", () => {\n    render(<SuccessModal {...defaultProps} />)\n    \n    const message = screen.getByText(",
    "absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900": "absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900",
    ")\n      if (button) {\n        const originalText = button.textContent\n        button.textContent = ": ")\n      if (button) {\n        const originalText = button.textContent\n        button.textContent = ",
    "\n  })\n  \n  // Remove all attributes for simplicity\n  sanitized = sanitized.replace(/\\s+\\w+\\s*=\\s*[\"": "\n  })\n  \n  // Remove all attributes for simplicity\n  sanitized = sanitized.replace(/\\s+\\w+\\s*=\\s*[\"",
    ")\n      setStorageInfo(info)\n\n      if (info.available) {\n        generateSampleScenarios(userId || ": ")\n      setStorageInfo(info)\n\n      if (info.available) {\n        generateSampleScenarios(userId || ",
    "text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800": "text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800",
    "disabled:bg-neutral-100 dark:disabled:bg-neutral-800 disabled:cursor-not-allowed disabled:opacity-50": "disabled:bg-neutral-100 dark:disabled:bg-neutral-800 disabled:cursor-not-allowed disabled:opacity-50",
    ") \n    ? hexToRgb(foreground) \n    : rgbStringToRgb(foreground);\n  const bg = background.startsWith(": ") \n    ? hexToRgb(foreground) \n    : rgbStringToRgb(foreground);\n  const bg = background.startsWith(",
    "Monthly income must be between $1,000 and $1,000,000. Include all sources of regular monthly income.": "Monthly income must be between $1,000 and $1,000,000. Include all sources of regular monthly income.",
    "t worry, this is just demo mode. You can try again or go back to the calculator.\"\n              : \"We": "t worry, this is just demo mode. You can try again or go back to the calculator.\"\n              : \"We",
    ">\n              Remaining Term (months) *\n            </label>\n            <input\n              type=": ">\n              Remaining Term (months) *\n            </label>\n            <input\n              type=",
    ">{errors.helocLimit}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=": ">{errors.helocLimit}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=",
    ">\n                Interest Rate (%)\n              </label>\n              <input\n                type=": ">\n                Interest Rate (%)\n              </label>\n              <input\n                type=",
    ">\n              {ltvInfo.canCalculateLTV\n                ? ltvInfo.isMIPRequired\n                  ? ": ">\n              {ltvInfo.canCalculateLTV\n                ? ltvInfo.isMIPRequired\n                  ? ",
    "btn inline-flex items-center justify-center rounded-lg border font-medium transition-all duration-200": "btn inline-flex items-center justify-center rounded-lg border font-medium transition-all duration-200",
    ", { limit: input.helocLimit, available: input.helocAvailableCredit })\n    errors.push({\n      field: ": ", { limit: input.helocLimit, available: input.helocAvailableCredit })\n    errors.push({\n      field: ",
    ",\n            updated_at: new Date()\n          }]\n        })\n\n        const request = new NextRequest(": ",\n            updated_at: new Date()\n          }]\n        })\n\n        const request = new NextRequest(",
    "btn-ghost bg-transparent hover:bg-neutral-100 focus:bg-neutral-100 text-neutral-700 border-transparent": "btn-ghost bg-transparent hover:bg-neutral-100 focus:bg-neutral-100 text-neutral-700 border-transparent",
    ">Sign Out</span>\n            </button>\n          ) : (\n            <NavigationLink\n              href=": ">Sign Out</span>\n            </button>\n          ) : (\n            <NavigationLink\n              href=",
    ")\n    }\n\n    // Browser/client tags\n    if (context.userAgent) {\n      if (context.userAgent.includes(": ")\n    }\n\n    // Browser/client tags\n    if (context.userAgent) {\n      if (context.userAgent.includes(",
    ");\n    expect(lightResult.isValid).toBe(true);\n    \n    const darkResult = validateTailwindCombination(": ");\n    expect(lightResult.isValid).toBe(true);\n    \n    const darkResult = validateTailwindCombination(",
    ")\n    await user.click(secondConfirmButton)\n\n    expect(onConfirm).toHaveBeenCalledTimes(2)\n  })\n\n  it(": ")\n    await user.click(secondConfirmButton)\n\n    expect(onConfirm).toHaveBeenCalledTimes(2)\n  })\n\n  it(",
    ", () => {\n      const originalEnv = process.env.NODE_ENV;\n      const consoleSpy = jest.spyOn(console, ": ", () => {\n      const originalEnv = process.env.NODE_ENV;\n      const consoleSpy = jest.spyOn(console, ",
    ", () => {\n    // Test primary button combinations\n    const primaryResult = validateTailwindCombination(": ", () => {\n    // Test primary button combinations\n    const primaryResult = validateTailwindCombination(",
    "\n        }\n\n        // Mock email already exists\n        mockQuery.mockResolvedValueOnce({ rows: [{ id: ": "\n        }\n\n        // Mock email already exists\n        mockQuery.mockResolvedValueOnce({ rows: [{ id: ",
    ")).toBeInTheDocument()\n\n    // Type the confirmation text\n    const input = screen.getByPlaceholderText(": ")).toBeInTheDocument()\n\n    // Type the confirmation text\n    const input = screen.getByPlaceholderText(",
    ")).toBeInTheDocument()\n\n    // Click cancel on second modal\n    const cancelButton = screen.getByTestId(": ")).toBeInTheDocument()\n\n    // Click cancel on second modal\n    const cancelButton = screen.getByTestId(",
    "}\n${formData.propertyTaxMonthly ? `- Property Tax: ${formatCurrency(formData.propertyTaxMonthly)}/mo` : ": "}\n${formData.propertyTaxMonthly ? `- Property Tax: ${formatCurrency(formData.propertyTaxMonthly)}/mo` : ",
    "\n            >\n              Try the Calculator\n            </Link>\n            <Link\n              href=": "\n            >\n              Try the Calculator\n            </Link>\n            <Link\n              href=",
    "\n              >\n                Copy\n              </button>\n              <button\n                type=": "\n              >\n                Copy\n              </button>\n              <button\n                type=",
    "M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z": "M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z",
    ", {\n        headers\n      })\n\n      // expect(() => {\n      //   requireAuth(request)\n      // }).toThrow(": ", {\n        headers\n      })\n\n      // expect(() => {\n      //   requireAuth(request)\n      // }).toThrow(",
    ")).toBeInTheDocument()\n    })\n\n    // Complete the clearing flow\n    const clearButton = screen.getByText(": ")).toBeInTheDocument()\n    })\n\n    // Complete the clearing flow\n    const clearButton = screen.getByText(",
    ">{errors.monthlyExpenses}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=": ">{errors.monthlyExpenses}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=",
    "btn-secondary bg-secondary-500 hover:bg-secondary-600 focus:bg-secondary-600 text-white border-transparent": "btn-secondary bg-secondary-500 hover:bg-secondary-600 focus:bg-secondary-600 text-white border-transparent",
    "text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800": "text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800",
    " } \n      })\n      fireEvent.change(screen.getByLabelText(/property value/i), { \n        target: { value: ": " } \n      })\n      fireEvent.change(screen.getByLabelText(/property value/i), { \n        target: { value: ",
    "\n  }),\n\n  [ErrorCode.RATE_LIMIT_EXCEEDED]: () => ({\n    code: ErrorCode.RATE_LIMIT_EXCEEDED,\n    message: ": "\n  }),\n\n  [ErrorCode.RATE_LIMIT_EXCEEDED]: () => ({\n    code: ErrorCode.RATE_LIMIT_EXCEEDED,\n    message: ",
    "\n  }\n  \n  try {\n    const parsed = new URL(url)\n    \n    // Only allow http and https protocols\n    if (![": "\n  }\n  \n  try {\n    const parsed = new URL(url)\n    \n    // Only allow http and https protocols\n    if (![",
    "MIP/PMI must be between $0 and $5,000 per month. This is required if your loan-to-value ratio exceeds 80%.": "MIP/PMI must be between $0 and $5,000 per month. This is required if your loan-to-value ratio exceeds 80%.",
    ", {\n      writable: true,\n      value: jest.fn().mockImplementation(query => ({\n        matches: query === ": ", {\n      writable: true,\n      value: jest.fn().mockImplementation(query => ({\n        matches: query === ",
    "\n      }\n\n      // Mock user lookup\n      mockQuery.mockResolvedValueOnce({\n        rows: [{\n          id: ": "\n      }\n\n      // Mock user lookup\n      mockQuery.mockResolvedValueOnce({\n        rows: [{\n          id: ",
    ")).toBeInTheDocument()\n    })\n\n    // Click clear all data button\n    const clearButton = screen.getByText(": ")).toBeInTheDocument()\n    })\n\n    // Click clear all data button\n    const clearButton = screen.getByText(",
    ">{errors.monthlyNetIncome}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=": ">{errors.monthlyNetIncome}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=",
    "\n            }`}\n          >\n            {tab.charAt(0).toUpperCase() + tab.slice(1)}\n            {tab === ": "\n            }`}\n          >\n            {tab.charAt(0).toUpperCase() + tab.slice(1)}\n            {tab === ",
    ">\n                  Remaining Term\n                </label>\n                <button\n                  type=": ">\n                  Remaining Term\n                </label>\n                <button\n                  type=",
    ")\n    const parsed = parseFloat(cleaned)\n    return isNaN(parsed) ? 0 : parsed\n  }\n\n  if (typeof value === ": ")\n    const parsed = parseFloat(cleaned)\n    return isNaN(parsed) ? 0 : parsed\n  }\n\n  if (typeof value === ",
    "Monthly payment must be between $100 and $100,000. This should be your principal and interest payment only.": "Monthly payment must be between $100 and $100,000. This should be your principal and interest payment only.",
    "\n    })\n  }\n\n  if (input.scenarioName && input.scenarioName.length > 255) {\n    errors.push({\n      field: ": "\n    })\n  }\n\n  if (input.scenarioName && input.scenarioName.length > 255) {\n    errors.push({\n      field: ",
    ")\n      );\n      \n      consoleSpy.mockRestore();\n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it(": ")\n      );\n      \n      consoleSpy.mockRestore();\n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it(",
    "w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500": "w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
    " }\n        const mockProfile: UserProfile = {\n          id: demoUser.id,\n          email: demoUser.email || ": " }\n        const mockProfile: UserProfile = {\n          id: demoUser.id,\n          email: demoUser.email || ",
    "\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=": "\n                />\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=",
    ", async () => {\n        // Mock scenario exists check\n        mockQuery.mockResolvedValueOnce({ rows: [{ id: ": ", async () => {\n        // Mock scenario exists check\n        mockQuery.mockResolvedValueOnce({ rows: [{ id: ",
    ", async () => {\n    mockGetStorageInfo.mockReturnValue({\n      used: 0,\n      available: false,\n      error: ": ", async () => {\n    mockGetStorageInfo.mockReturnValue({\n      used: 0,\n      available: false,\n      error: ",
    ")).toBeInTheDocument()\n    })\n\n    // Go through first confirmation\n    const clearButton = screen.getByText(": ")).toBeInTheDocument()\n    })\n\n    // Go through first confirmation\n    const clearButton = screen.getByText(",
    ">{errors.monthlyGrossIncome}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=": ">{errors.monthlyGrossIncome}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=",
    ", helocValidation)\n    errors.push(...helocValidation.errors)\n  }\n\n  // Validate income inputs\n  console.log(": ", helocValidation)\n    errors.push(...helocValidation.errors)\n  }\n\n  // Validate income inputs\n  console.log(",
    ", async () => {\n    const { container } = render(<TestInput />);\n    \n    const input = screen.getByLabelText(": ", async () => {\n    const { container } = render(<TestInput />);\n    \n    const input = screen.getByLabelText(",
    ")\n    await user.click(closeButton)\n    \n    expect(defaultProps.onClose).toHaveBeenCalledTimes(1)\n  })\n\n  it(": ")\n    await user.click(closeButton)\n    \n    expect(defaultProps.onClose).toHaveBeenCalledTimes(1)\n  })\n\n  it(",
    ")).toBeInTheDocument()\n\n    // Click confirm on first modal\n    const firstConfirmButton = screen.getByTestId(": ")).toBeInTheDocument()\n\n    // Click confirm on first modal\n    const firstConfirmButton = screen.getByTestId(",
    ")).toBeInTheDocument()\n    })\n\n    // Click regenerate button\n    const regenerateButton = screen.getByTestId(": ")).toBeInTheDocument()\n    })\n\n    // Click regenerate button\n    const regenerateButton = screen.getByTestId(",
    ">{errors.currentInterestRate}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=": ">{errors.currentInterestRate}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=",
    "fixed bottom-0 right-0 w-full max-w-4xl h-96 bg-white border-t-2 border-gray-300 shadow-2xl z-50 flex flex-col": "fixed bottom-0 right-0 w-full max-w-4xl h-96 bg-white border-t-2 border-gray-300 shadow-2xl z-50 flex flex-col",
    ";\n  };\n\n  const getUserInitials = () => {\n    const name = getUserDisplayName();\n    const parts = name.split(": ";\n  };\n\n  const getUserInitials = () => {\n    const name = getUserDisplayName();\n    const parts = name.split(",
    " ? parseFloat(value) : value\n\n  if (isNaN(numValue)) {\n    const friendlyName = fieldName.replace(/([A-Z])/g, ": " ? parseFloat(value) : value\n\n  if (isNaN(numValue)) {\n    const friendlyName = fieldName.replace(/([A-Z])/g, ",
    "Interest rate cannot be negative. Please enter your current mortgage rate as a percentage (e.g., 6.5 for 6.5%).": "Interest rate cannot be negative. Please enter your current mortgage rate as a percentage (e.g., 6.5 for 6.5%).",
    " })\n                  const url = URL.createObjectURL(blob)\n                  const a = document.createElement(": " })\n                  const url = URL.createObjectURL(blob)\n                  const a = document.createElement(",
    " ? 0 : parseFloat(value)) : value\n    \n    // Update formData to ensure numeric value\n    if (typeof value === ": " ? 0 : parseFloat(value)) : value\n    \n    // Update formData to ensure numeric value\n    if (typeof value === ",
    "\n                onClick={handleLinkClick}\n              />\n              <NavigationLink\n                href=": "\n                onClick={handleLinkClick}\n              />\n              <NavigationLink\n                href=",
    ",\n    ...params\n  }),\n\n  [ErrorCode.DATABASE_ERROR]: () => ({\n    code: ErrorCode.DATABASE_ERROR,\n    message: ": ",\n    ...params\n  }),\n\n  [ErrorCode.DATABASE_ERROR]: () => ({\n    code: ErrorCode.DATABASE_ERROR,\n    message: ",
    ")) {\n      return createErrorResponse(ErrorCode.AUTHENTICATION_REQUIRED)\n    }\n\n    if (error.message.includes(": ")) {\n      return createErrorResponse(ErrorCode.AUTHENTICATION_REQUIRED)\n    }\n\n    if (error.message.includes(",
    ");\n    \n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n});\n\ndescribe(": ");\n    \n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n});\n\ndescribe(",
    ");\n      \n      expect(result.isValid).toBe(true);\n      expect(result.issues).toHaveLength(0);\n    });\n\n    it(": ");\n      \n      expect(result.isValid).toBe(true);\n      expect(result.issues).toHaveLength(0);\n    });\n\n    it(",
    ")).toBeInTheDocument()\n\n    // Click confirm on second modal\n    const secondConfirmButton = screen.getByTestId(": ")).toBeInTheDocument()\n\n    // Click confirm on second modal\n    const secondConfirmButton = screen.getByTestId(",
    ">Enter state abbreviations separated by commas</p>\n          </div>\n\n          <div>\n            <label htmlFor=": ">Enter state abbreviations separated by commas</p>\n          </div>\n\n          <div>\n            <label htmlFor=",
    ")\n\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const callbackUrl = searchParams.get(": ")\n\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const callbackUrl = searchParams.get(",
    "text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800": "text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800",
    "M9 19V6l3-3 3 3v13M9 19h6M9 19H7a2 2 0 01-2-2V9a2 2 0 012-2h2M15 19h2a2 2 0 002-2V9a2 2 0 00-2-2h-2m-6 9l2 2 4-4": "M9 19V6l3-3 3 3v13M9 19h6M9 19H7a2 2 0 01-2-2V9a2 2 0 012-2h2M15 19h2a2 2 0 002-2V9a2 2 0 00-2-2h-2m-6 9l2 2 4-4",
    ")\n  }\n}\n\n// Add a new scenario for a specific user\nexport function addDemoScenario(scenario: Omit<DemoScenario, ": ")\n  }\n}\n\n// Add a new scenario for a specific user\nexport function addDemoScenario(scenario: Omit<DemoScenario, ",
    ", {\n      userId,\n      calculationType,\n      duration\n    })\n  }\n\n  logSecurityEvent(event: string, severity: ": ", {\n      userId,\n      calculationType,\n      duration\n    })\n  }\n\n  logSecurityEvent(event: string, severity: ",
    ").trim()}`\n    })\n    return errors\n  }\n\n  if (!required && (value === undefined || value === null || value === ": ").trim()}`\n    })\n    return errors\n  }\n\n  if (!required && (value === undefined || value === null || value === ",
    ")\n    await user.click(clearButton)\n\n    // First confirmation modal should appear\n    expect(screen.getByTestId(": ")\n    await user.click(clearButton)\n\n    // First confirmation modal should appear\n    expect(screen.getByTestId(",
    ">{errors.currentMortgageBalance}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=": ">{errors.currentMortgageBalance}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=",
    "Monthly expenses must be between $0 and $500,000. Include all regular monthly bills except your mortgage payment.": "Monthly expenses must be between $0 and $500,000. Include all regular monthly bills except your mortgage payment.",
    ");\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it(": ");\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it(",
    "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z": "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z",
    ",\n        },\n        body: JSON.stringify({ enable })\n      })\n\n      if (!response.ok) {\n        throw new Error(": ",\n        },\n        body: JSON.stringify({ enable })\n      })\n\n      if (!response.ok) {\n        throw new Error(",
    ",\n              // Background and text colors - white background with black text as per style guide\n              ": ",\n              // Background and text colors - white background with black text as per style guide\n              ",
    "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z": "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z",
    " } \n      })\n\n      // Trigger form submission to activate validation\n      const submitButton = screen.getByRole(": " } \n      })\n\n      // Trigger form submission to activate validation\n      const submitButton = screen.getByRole(",
    "\n  }),\n\n  [ErrorCode.AUTHENTICATION_REQUIRED]: () => ({\n    code: ErrorCode.AUTHENTICATION_REQUIRED,\n    message: ": "\n  }),\n\n  [ErrorCode.AUTHENTICATION_REQUIRED]: () => ({\n    code: ErrorCode.AUTHENTICATION_REQUIRED,\n    message: ",
    ")) {\n    errors.push({\n      field: fieldName,\n      message: `Please enter the ${fieldName.toLowerCase().replace(": ")) {\n    errors.push({\n      field: fieldName,\n      message: `Please enter the ${fieldName.toLowerCase().replace(",
    "Interest rate seems too high (maximum 30%). Please verify your rate and enter as a percentage (e.g., 6.5 for 6.5%).": "Interest rate seems too high (maximum 30%). Please verify your rate and enter as a percentage (e.g., 6.5 for 6.5%).",
    "bg-gradient-to-r from-blue-500 via-green-500 to-purple-500 h-2 rounded-full transition-all duration-300 ease-in-out": "bg-gradient-to-r from-blue-500 via-green-500 to-purple-500 h-2 rounded-full transition-all duration-300 ease-in-out",
    ";\n  const isAuthenticated = Boolean(session?.user) || isDemoMode;\n  const isDevelopment = process.env.NODE_ENV === ": ";\n  const isAuthenticated = Boolean(session?.user) || isDemoMode;\n  const isDevelopment = process.env.NODE_ENV === ",
    ", {\n      method,\n      url,\n      statusCode,\n      duration,\n      userId\n    })\n  }\n\n  logAuthentication(event: ": ", {\n      method,\n      url,\n      statusCode,\n      duration,\n      userId\n    })\n  }\n\n  logAuthentication(event: ",
    " })\n      ]))\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ": " })\n      ]))\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ",
    "\n\n      if (isDemoMode) {\n        // Update demo assignments\n        const storedAssignments = localStorage.getItem(": "\n\n      if (isDemoMode) {\n        // Update demo assignments\n        const storedAssignments = localStorage.getItem(",
    "\n    }\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: publicScenario,\n      message: ": "\n    }\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: publicScenario,\n      message: ",
    ", {\n        email,\n        password,\n        redirect: false,\n      })\n\n      if (result?.error) {\n        setError(": ", {\n        email,\n        password,\n        redirect: false,\n      })\n\n      if (result?.error) {\n        setError(",
    "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z": "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z",
    ", incomeValidation)\n  errors.push(...incomeValidation.errors)\n\n  // Cross-validation between sections\n  console.log(": ", incomeValidation)\n  errors.push(...incomeValidation.errors)\n\n  // Cross-validation between sections\n  console.log(",
    "\n      )\n\n      // Restore original setItem\n      localStorageMock.setItem = originalSetItem\n    })\n  })\n\n  describe(": "\n      )\n\n      // Restore original setItem\n      localStorageMock.setItem = originalSetItem\n    })\n  })\n\n  describe(",
    "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z": "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z",
    ": `Bearer ${apiKey}`\n        },\n        body: JSON.stringify(errorReport)\n      })\n    } catch (error) {\n      // Don": ": `Bearer ${apiKey}`\n        },\n        body: JSON.stringify(errorReport)\n      })\n    } catch (error) {\n      // Don",
    " }\n  ]\n\n  const csv = arrayToCSV(agents, columns)\n  const filename = `agents-export-${new Date().toISOString().split(": " }\n  ]\n\n  const csv = arrayToCSV(agents, columns)\n  const filename = `agents-export-${new Date().toISOString().split(",
    "]) })\n      ]))\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ": "]) })\n      ]))\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ",
    "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z": "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z",
    " />\n          <span>Clear Form</span>\n        </button>\n\n        {/* Submit Button */}\n        <button\n          type=": " />\n          <span>Clear Form</span>\n        </button>\n\n        {/* Submit Button */}\n        <button\n          type=",
    "\n                    }, 1000)\n                  }).catch(() => {\n                    // Fallback for browsers that don": "\n                    }, 1000)\n                  }).catch(() => {\n                    // Fallback for browsers that don",
    ", async () => {\n    const { container } = render(<TestInput hasError />);\n    \n    const input = screen.getByLabelText(": ", async () => {\n    const { container } = render(<TestInput hasError />);\n    \n    const input = screen.getByLabelText(",
    ", () => {\n    render(<SecondConfirmationModal {...defaultProps} />)\n    \n    const input = screen.getByPlaceholderText(": ", () => {\n    render(<SecondConfirmationModal {...defaultProps} />)\n    \n    const input = screen.getByPlaceholderText(",
    ")\n      return\n    }\n\n    setAssigning(true)\n\n    try {\n      const isDemoMode = process.env.NEXT_PUBLIC_DEMO_MODE === ": ")\n      return\n    }\n\n    setAssigning(true)\n\n    try {\n      const isDemoMode = process.env.NEXT_PUBLIC_DEMO_MODE === ",
    ")\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(": ")\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(",
    ")[0] // YYYY-MM-DD format\n  const baseName = scenarioName \n    ? `HELOC-Report-${scenarioName.replace(/[^a-zA-Z0-9]/g, ": ")[0] // YYYY-MM-DD format\n  const baseName = scenarioName \n    ? `HELOC-Report-${scenarioName.replace(/[^a-zA-Z0-9]/g, ",
    ")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function getCsrfToken() {\n    const response = await fetch(": ")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function getCsrfToken() {\n    const response = await fetch(",
    " && window.console) {\n      console.clear()\n    }\n  }\n\n  enable() {\n    this.isEnabled = true\n    if (typeof window !== ": " && window.console) {\n      console.clear()\n    }\n  }\n\n  enable() {\n    this.isEnabled = true\n    if (typeof window !== ",
    ", {\n        headers: new Headers()\n      })\n\n      // expect(() => {\n      //   requireAuth(request)\n      // }).toThrow(": ", {\n        headers: new Headers()\n      })\n\n      // expect(() => {\n      //   requireAuth(request)\n      // }).toThrow(",
    ", () => {\n  const defaultProps = {\n    isOpen: true,\n    onClose: jest.fn(),\n    onRegenerateData: jest.fn(),\n    title: ": ", () => {\n  const defaultProps = {\n    isOpen: true,\n    onClose: jest.fn(),\n    onRegenerateData: jest.fn(),\n    title: ",
    ", () => {\n    render(<SuccessModal {...defaultProps} showRegenerateOption={false} />)\n    \n    expect(screen.queryByText(": ", () => {\n    render(<SuccessModal {...defaultProps} showRegenerateOption={false} />)\n    \n    expect(screen.queryByText(",
    ")\n    await user.click(firstConfirmButton)\n\n    // Second confirmation modal should appear\n    expect(screen.getByTestId(": ")\n    await user.click(firstConfirmButton)\n\n    // Second confirmation modal should appear\n    expect(screen.getByTestId(",
    ", {\n        value: undefined,\n        writable: true\n      })\n\n      expect(() => clearDemoScenarios()).toThrow(\n        ": ", {\n        value: undefined,\n        writable: true\n      })\n\n      expect(() => clearDemoScenarios()).toThrow(\n        ",
    ") },\n          ]\n\n          // Get assignments from localStorage\n          const storedAssignments = localStorage.getItem(": ") },\n          ]\n\n          // Get assignments from localStorage\n          const storedAssignments = localStorage.getItem(",
    "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number": "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number",
    "}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Scenario Details */}\n      <Card variant=": "}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Scenario Details */}\n      <Card variant=",
    ") {\n    // Remove currency symbols, commas, and other non-numeric characters\n    const cleaned = value.replace(/[$,\\s%]/g, ": ") {\n    // Remove currency symbols, commas, and other non-numeric characters\n    const cleaned = value.replace(/[$,\\s%]/g, ",
    ") // Remove quotes and backslashes\n    .replace(/\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b/gi, ": ") // Remove quotes and backslashes\n    .replace(/\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b/gi, ",
    ");\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n  });\n\n  describe(": ");\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n  });\n\n  describe(",
    ");\n      \n      expect(result.isValid).toBe(true);\n      expect(result.issues).toHaveLength(0);\n    });\n  });\n});\n\ndescribe(": ");\n      \n      expect(result.isValid).toBe(true);\n      expect(result.issues).toHaveLength(0);\n    });\n  });\n});\n\ndescribe(",
    "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16": "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16",
    "Consider:\\n• Increasing your HELOC limit\\n• Reducing your monthly discretionary income\\n• Using a smaller initial HELOC draw": "Consider:\\n• Increasing your HELOC limit\\n• Reducing your monthly discretionary income\\n• Using a smaller initial HELOC draw",
    ", () => {\n      // Mock JWT verification failure\n      mockJwt.verify.mockImplementationOnce(() => {\n        throw new Error(": ", () => {\n      // Mock JWT verification failure\n      mockJwt.verify.mockImplementationOnce(() => {\n        throw new Error(",
    "\n    };\n  }\n  \n  const ratio = getContrastRatio(fg, bg);\n  \n  // WCAG thresholds\n  const thresholds = {\n    AA: textSize === ": "\n    };\n  }\n  \n  const ratio = getContrastRatio(fg, bg);\n  \n  // WCAG thresholds\n  const thresholds = {\n    AA: textSize === ",
    " }\n  ]\n\n  const csv = arrayToCSV(assignments, columns)\n  const filename = `user-assignments-${new Date().toISOString().split(": " }\n  ]\n\n  const csv = arrayToCSV(assignments, columns)\n  const filename = `user-assignments-${new Date().toISOString().split(",
    "\n        }\n        return true\n      }\n    }\n  },\n\n  monthlyDiscretionaryIncome: {\n    min: {\n      value: 0,\n      message: ": "\n        }\n        return true\n      }\n    }\n  },\n\n  monthlyDiscretionaryIncome: {\n    min: {\n      value: 0,\n      message: ",
    "),\n      duration,\n      rowCount\n    })\n  }\n\n  logError(error: Error, context?: Record<string, any>): void {\n    this.error(": "),\n      duration,\n      rowCount\n    })\n  }\n\n  logError(error: Error, context?: Record<string, any>): void {\n    this.error(",
    "\n  }\n}\n\n/**\n * Sanitize file name\n */\nexport function sanitizeFileName(fileName: string): string {\n  if (typeof fileName !== ": "\n  }\n}\n\n/**\n * Sanitize file name\n */\nexport function sanitizeFileName(fileName: string): string {\n  if (typeof fileName !== ",
    ")\n    await user.click(cancelButton)\n\n    // Modal should close and no clearing should happen\n    expect(screen.queryByTestId(": ")\n    await user.click(cancelButton)\n\n    // Modal should close and no clearing should happen\n    expect(screen.queryByTestId(",
    ")\n      } else {\n        // Delete via API\n        const response = await fetch(`/api/agents/${agentId}`, {\n          method: ": ")\n      } else {\n        // Delete via API\n        const response = await fetch(`/api/agents/${agentId}`, {\n          method: ",
    ">\n              Try the Calculator\n            </Button>\n          </Link>\n\n          {isDemoMode && (\n            <Link href=": ">\n              Try the Calculator\n            </Button>\n          </Link>\n\n          {isDemoMode && (\n            <Link href=",
    ",\n  tooltip,\n  label,\n  ...props\n}: FormFieldWithTooltipProps) {\n  const helpContent = tooltip || FIELD_HELP_CONTENT[name] || ": ",\n  tooltip,\n  label,\n  ...props\n}: FormFieldWithTooltipProps) {\n  const helpContent = tooltip || FIELD_HELP_CONTENT[name] || ",
    ")\n      expect(result.success).toBe(false)\n      expect(result.canCalculate).toBe(false)\n      expect(result.error).toContain(": ")\n      expect(result.success).toBe(false)\n      expect(result.canCalculate).toBe(false)\n      expect(result.error).toContain(",
    "\n    let inQuotes = false\n    \n    for (let j = 0; j < row.length; j++) {\n      const char = row[j]\n      \n      if (char === ": "\n    let inQuotes = false\n    \n    for (let j = 0; j < row.length; j++) {\n      const char = row[j]\n      \n      if (char === ",
    "\n        return true\n      },\n      positive: (value: string) => {\n        const numValue = parseFloat(value.replace(/[,$]/g, ": "\n        return true\n      },\n      positive: (value: string) => {\n        const numValue = parseFloat(value.replace(/[,$]/g, ",
    ")\n  \n  if (input.helocLimit && input.helocAvailableCredit && input.helocAvailableCredit > input.helocLimit) {\n    console.log(": ")\n  \n  if (input.helocLimit && input.helocAvailableCredit && input.helocAvailableCredit > input.helocLimit) {\n    console.log(",
    ", async () => {\n    const user = userEvent.setup()\n    mockClearDemoScenarios.mockImplementation(() => {\n      throw new Error(": ", async () => {\n    const user = userEvent.setup()\n    mockClearDemoScenarios.mockImplementation(() => {\n      throw new Error(",
    "New password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number": "New password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number",
    ">\n              ← Back to home\n            </Link>\n            {isDemoMode && (\n              <div>\n                <Link href=": ">\n              ← Back to home\n            </Link>\n            {isDemoMode && (\n              <div>\n                <Link href=",
    ")\n      textArea.value = shareUrl\n      document.body.appendChild(textArea)\n      textArea.select()\n      document.execCommand(": ")\n      textArea.value = shareUrl\n      document.body.appendChild(textArea)\n      textArea.select()\n      document.execCommand(",
    "M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z": "M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z",
    "btn-outline bg-transparent hover:bg-primary-50 focus:bg-primary-50 text-primary-700 border-primary-300 hover:border-primary-400": "btn-outline bg-transparent hover:bg-primary-50 focus:bg-primary-50 text-primary-700 border-primary-300 hover:border-primary-400",
    "Mortgage balance must be between $1,000 and $10,000,000. Please check your latest mortgage statement for the principal balance.": "Mortgage balance must be between $1,000 and $10,000,000. Please check your latest mortgage statement for the principal balance.",
    ")\n    await user.click(regenerateButton)\n    \n    expect(defaultProps.onRegenerateData).toHaveBeenCalledTimes(1)\n  })\n\ndescribe(": ")\n    await user.click(regenerateButton)\n    \n    expect(defaultProps.onRegenerateData).toHaveBeenCalledTimes(1)\n  })\n\ndescribe(",
    "\n        })\n        \n        if (response.ok) {\n          setAgents(prev => prev.filter(a => a.id !== agentId))\n          alert(": "\n        })\n        \n        if (response.ok) {\n          setAgents(prev => prev.filter(a => a.id !== agentId))\n          alert(",
    "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z": "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",
    ",\n    requiresAuth: true,\n    showInMobile: true,\n    showInDesktop: false, // Handled by user menu on desktop\n  },\n  {\n    id: ": ",\n    requiresAuth: true,\n    showInMobile: true,\n    showInDesktop: false, // Handled by user menu on desktop\n  },\n  {\n    id: ",
    ", (event) => {\n      errorTracker.captureError(\n        event.error || new Error(event.message),\n        {\n          component: ": ", (event) => {\n      errorTracker.captureError(\n        event.error || new Error(event.message),\n        {\n          component: ",
    "Please enter a valid monthly payment amount. This should be a positive number representing your current monthly mortgage payment.": "Please enter a valid monthly payment amount. This should be a positive number representing your current monthly mortgage payment.",
    ",\n    ...params\n  }),\n\n  [ErrorCode.CALCULATION_OVERFLOW]: (params) => ({\n    code: ErrorCode.CALCULATION_OVERFLOW,\n    message: ": ",\n    ...params\n  }),\n\n  [ErrorCode.CALCULATION_OVERFLOW]: (params) => ({\n    code: ErrorCode.CALCULATION_OVERFLOW,\n    message: ",
    ", () => {\n      render(\n        <Badge variant=\"primary\">New Feature</Badge>\n      );\n      \n      const badge = screen.getByText(": ", () => {\n      render(\n        <Badge variant=\"primary\">New Feature</Badge>\n      );\n      \n      const badge = screen.getByText(",
    ");\n    }\n  }, [isOpen]);\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === ": ");\n    }\n  }, [isOpen]);\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === ",
    "rounded-md p-2 text-neutral-400 hover:text-neutral-600 hover:bg-neutral-100 focus:outline-none focus:ring-2 focus:ring-primary-500": "rounded-md p-2 text-neutral-400 hover:text-neutral-600 hover:bg-neutral-100 focus:outline-none focus:ring-2 focus:ring-primary-500",
    "border-red-300 dark:border-red-600 focus:border-red-500 dark:focus:border-red-400 focus:ring-red-500/20 dark:focus:ring-red-400/20": "border-red-300 dark:border-red-600 focus:border-red-500 dark:focus:border-red-400 focus:ring-red-500/20 dark:focus:ring-red-400/20",
    ", // Empty name should fail validation\n          currentMortgageBalance: 250000\n        }\n\n        const request = new NextRequest(": ", // Empty name should fail validation\n          currentMortgageBalance: 250000\n        }\n\n        const request = new NextRequest(",
    "\n          }]\n        })\n\n        // Mock bcrypt compare to return false for wrong current password\n        const bcrypt = require(": "\n          }]\n        })\n\n        // Mock bcrypt compare to return false for wrong current password\n        const bcrypt = require(",
    "\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* HELOC Information Section */}\n      <Card variant=": "\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* HELOC Information Section */}\n      <Card variant=",
    ", config.origin)\n  } else if (Array.isArray(config.origin) && origin && config.origin.includes(origin)) {\n    response.headers.set(": ", config.origin)\n  } else if (Array.isArray(config.origin) && origin && config.origin.includes(origin)) {\n    response.headers.set(",
    "], // Green tones for success\n          ...defaults,\n        },\n        savings: {\n          particleCount: 150,\n          colors: [": "], // Green tones for success\n          ...defaults,\n        },\n        savings: {\n          particleCount: 150,\n          colors: [",
    "s full name\nexport function getAgentFullName(agent: Agent): string {\n  return `${agent.firstName} ${agent.lastName}`\n}\n\n// Get agent": "s full name\nexport function getAgentFullName(agent: Agent): string {\n  return `${agent.firstName} ${agent.lastName}`\n}\n\n// Get agent",
    ").substring(0, 16)\n  }\n\n  /**\n   * Determine error severity\n   */\n  private determineSeverity(error: Error, context: ErrorContext): ": ").substring(0, 16)\n  }\n\n  /**\n   * Determine error severity\n   */\n  private determineSeverity(error: Error, context: ErrorContext): ",
    "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z": "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z",
    "\n                    setTimeout(() => {\n                      btn.textContent = originalText\n                      btn.style.color = ": "\n                    setTimeout(() => {\n                      btn.textContent = originalText\n                      btn.style.color = ",
    "\n                onClick={handleLinkClick}\n              />\n            </>\n          )}\n\n          <NavigationLink\n            href=": "\n                onClick={handleLinkClick}\n              />\n            </>\n          )}\n\n          <NavigationLink\n            href=",
    ", async () => {\n    const user = userEvent.setup()\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByText(": ", async () => {\n    const user = userEvent.setup()\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByText(",
    "text-lg font-semibold text-blue-900 dark:text-blue-200 mb-4 pb-2 border-b border-blue-200 dark:border-blue-700 flex items-center gap-2": "text-lg font-semibold text-blue-900 dark:text-blue-200 mb-4 pb-2 border-b border-blue-200 dark:border-blue-700 flex items-center gap-2",
    "}\n              description={\n                ltvInfo.canCalculateLTV\n                  ? ltvInfo.isMIPRequired\n                    ? ": "}\n              description={\n                ltvInfo.canCalculateLTV\n                  ? ltvInfo.isMIPRequired\n                    ? ",
    ", () => {\n      // Mock localStorage to throw errors\n      localStorageMock.setItem.mockImplementation(() => {\n        throw new Error(": ", () => {\n      // Mock localStorage to throw errors\n      localStorageMock.setItem.mockImplementation(() => {\n        throw new Error(",
    "\n        }\n\n        // Mock current user lookup\n        mockQuery.mockResolvedValueOnce({\n          rows: [{\n            password_hash: ": "\n        }\n\n        // Mock current user lookup\n        mockQuery.mockResolvedValueOnce({\n          rows: [{\n            password_hash: ",
    "This will permanently delete all your saved scenarios and calculations. This action cannot be undone. Are you sure you want to continue?": "This will permanently delete all your saved scenarios and calculations. This action cannot be undone. Are you sure you want to continue?",
    ",\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(Math.max(0, discretionary))\n      \n      setValue(": ",\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(Math.max(0, discretionary))\n      \n      setValue(",
    ", async () => {\n    render(<SuccessModal {...defaultProps} />)\n    \n    await waitFor(() => {\n      const closeButton = screen.getByText(": ", async () => {\n    render(<SuccessModal {...defaultProps} />)\n    \n    await waitFor(() => {\n      const closeButton = screen.getByText(",
    "t exist\n      let shareToken = scenario.public_share_token\n      \n      if (!shareToken) {\n        shareToken = randomBytes(32).toString(": "t exist\n      let shareToken = scenario.public_share_token\n      \n      if (!shareToken) {\n        shareToken = randomBytes(32).toString(",
    "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z": "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z",
    "M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1": "M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1",
    "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z": "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z",
    ">\n              🎮 Debug mode active - errors shown above\n            </span>\n          )}\n        </div>\n        <button\n          type=": ">\n              🎮 Debug mode active - errors shown above\n            </span>\n          )}\n        </div>\n        <button\n          type=",
    "\n  }\n  \n  return Boolean(input)\n}\n\n/**\n * Sanitize URL input\n */\nexport function sanitizeUrl(url: string): string {\n  if (typeof url !== ": "\n  }\n  \n  return Boolean(input)\n}\n\n/**\n * Sanitize URL input\n */\nexport function sanitizeUrl(url: string): string {\n  if (typeof url !== ",
    ");\n      \n      expect(result.isValid).toBe(false);\n      expect(result.issues).toHaveLength(1);\n      expect(result.issues[0]).toContain(": ");\n      \n      expect(result.isValid).toBe(false);\n      expect(result.issues).toHaveLength(1);\n      expect(result.issues[0]).toContain(",
    ")\n    await user.click(secondConfirmButton)\n\n    // Success modal should appear\n    await waitFor(() => {\n      expect(screen.getByTestId(": ")\n    await user.click(secondConfirmButton)\n\n    // Success modal should appear\n    await waitFor(() => {\n      expect(screen.getByTestId(",
    "\n    }, { status: 200 })\n\n    return applySecurityHeaders(successResponse, defaultSecurityHeaders)\n\n  } catch (error) {\n    console.error(": "\n    }, { status: 200 })\n\n    return applySecurityHeaders(successResponse, defaultSecurityHeaders)\n\n  } catch (error) {\n    console.error(",
    "\n      return `[${log.timestamp}] [${log.level.toUpperCase()}] [${log.category.toUpperCase()}] ${log.message}${data}${stack}`\n    }).join(": "\n      return `[${log.timestamp}] [${log.level.toUpperCase()}] [${log.category.toUpperCase()}] ${log.message}${data}${stack}`\n    }).join(",
    "\n})\n\nexport const apiRateLimit = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  maxRequests: 100, // 100 requests per minute\n  message: ": "\n})\n\nexport const apiRateLimit = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  maxRequests: 100, // 100 requests per minute\n  message: ",
    ")\n    await user.click(cancelButton)\n\n    expect(onClose).toHaveBeenCalledTimes(1)\n    expect(onConfirm).not.toHaveBeenCalled()\n  })\n\n  it(": ")\n    await user.click(cancelButton)\n\n    expect(onClose).toHaveBeenCalledTimes(1)\n    expect(onConfirm).not.toHaveBeenCalled()\n  })\n\n  it(",
    "\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Monthly Income & Expenses Section */}\n      <Card variant=": "\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Monthly Income & Expenses Section */}\n      <Card variant=",
    "All demo data has been successfully cleared from your browser. You can now start fresh or regenerate sample data to explore the application.": "All demo data has been successfully cleared from your browser. You can now start fresh or regenerate sample data to explore the application.",
    ");\n    expect(secondaryResult.isValid).toBe(true);\n    \n    // Test neutral combinations\n    const lightResult = validateTailwindCombination(": ");\n    expect(secondaryResult.isValid).toBe(true);\n    \n    // Test neutral combinations\n    const lightResult = validateTailwindCombination(",
    ", async () => {\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        const response = await getScenario(\n          new NextRequest(": ", async () => {\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        const response = await getScenario(\n          new NextRequest(",
    "w-full pl-8 pr-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent": "w-full pl-8 pr-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent",
    "\n    },\n    agent: assignedAgent ? {\n      name: `${assignedAgent.firstName} ${assignedAgent.lastName}`,\n      title: assignedAgent.title || ": "\n    },\n    agent: assignedAgent ? {\n      name: `${assignedAgent.firstName} ${assignedAgent.lastName}`,\n      title: assignedAgent.title || ",
    ");\n      \n      expect(result.isAccessible).toBe(false);\n      expect(result.level).toBeNull();\n      expect(result.recommendation).toContain(": ");\n      \n      expect(result.isAccessible).toBe(false);\n      expect(result.level).toBeNull();\n      expect(result.recommendation).toContain(",
    "border-green-300 dark:border-green-600 focus:border-green-500 dark:focus:border-green-400 focus:ring-green-500/20 dark:focus:ring-green-400/20": "border-green-300 dark:border-green-600 focus:border-green-500 dark:focus:border-green-400 focus:ring-green-500/20 dark:focus:ring-green-400/20",
    ");\n    expect(input).toBeInTheDocument();\n    \n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  it(": ");\n    expect(input).toBeInTheDocument();\n    \n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  it(",
    ", async () => {\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        const response = await deleteScenario(\n          new NextRequest(": ", async () => {\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        const response = await deleteScenario(\n          new NextRequest(",
    ", async () => {\n    const user = userEvent.setup()\n    render(<SuccessModal {...defaultProps} />)\n    \n    const closeButton = screen.getByText(": ", async () => {\n    const user = userEvent.setup()\n    render(<SuccessModal {...defaultProps} />)\n    \n    const closeButton = screen.getByText(",
    ")\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(": ")\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(",
    "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6": "M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6",
    "Your trusted partner in mortgage acceleration strategies. We help homeowners save thousands in interest and pay off their mortgages years early.": "Your trusted partner in mortgage acceleration strategies. We help homeowners save thousands in interest and pay off their mortgages years early.",
    "\n    },\n    validate: {\n      calculated: (value: string, formValues: any) => {\n        const discretionary = parseFloat(value.replace(/[,$]/g, ": "\n    },\n    validate: {\n      calculated: (value: string, formValues: any) => {\n        const discretionary = parseFloat(value.replace(/[,$]/g, ",
    "\n              }\n              tooltip={\n                ltvInfo.canCalculateLTV\n                  ? ltvInfo.isMIPRequired\n                    ? ": "\n              }\n              tooltip={\n                ltvInfo.canCalculateLTV\n                  ? ltvInfo.isMIPRequired\n                    ? ",
    "M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z": "M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z",
    "}`\n\n    try {\n      await navigator.clipboard.writeText(summaryText)\n      \n      // Visual feedback\n      const button = document.getElementById(": "}`\n\n    try {\n      await navigator.clipboard.writeText(summaryText)\n      \n      // Visual feedback\n      const button = document.getElementById(",
    ", (event) => {\n      errorTracker.captureError(\n        new Error(`Unhandled Promise Rejection: ${event.reason}`),\n        {\n          component: ": ", (event) => {\n      errorTracker.captureError(\n        new Error(`Unhandled Promise Rejection: ${event.reason}`),\n        {\n          component: ",
    ", async () => {\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        const response = await getSharedScenario(\n          new NextRequest(": ", async () => {\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        const response = await getSharedScenario(\n          new NextRequest(",
    "\n    return `${value.toFixed(2)}%`\n  }\n\n  const formatMonths = (value: number | undefined) => {\n    if (value === undefined || value === 0) return ": "\n    return `${value.toFixed(2)}%`\n  }\n\n  const formatMonths = (value: number | undefined) => {\n    if (value === undefined || value === 0) return ",
    "\n})\n\nexport const calculationRateLimit = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  maxRequests: 20, // 20 calculations per minute\n  message: ": "\n})\n\nexport const calculationRateLimit = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  maxRequests: 20, // 20 calculations per minute\n  message: ",
    ",\n          body: JSON.stringify({ enable: true })\n        })\n\n        const response = await shareScenario(request, { params: Promise.resolve({ id: ": ",\n          body: JSON.stringify({ enable: true })\n        })\n\n        const response = await shareScenario(request, { params: Promise.resolve({ id: ",
    ")\n\n      const newToken = mockJwt.sign(\n        { userId: mockUser.id, email: mockUser.email },\n        process.env.JWT_SECRET,\n        { expiresIn: ": ")\n\n      const newToken = mockJwt.sign(\n        { userId: mockUser.id, email: mockUser.email },\n        process.env.JWT_SECRET,\n        { expiresIn: ",
    ", async () => {\n    const user = userEvent.setup()\n    render(<SuccessModal {...defaultProps} />)\n    \n    const regenerateButton = screen.getByText(": ", async () => {\n    const user = userEvent.setup()\n    render(<SuccessModal {...defaultProps} />)\n    \n    const regenerateButton = screen.getByText(",
    ",\n          },\n          body: JSON.stringify(formData),\n        })\n\n        if (response.ok) {\n          await refreshCompanyData()\n          alert(": ",\n          },\n          body: JSON.stringify(formData),\n        })\n\n        if (response.ok) {\n          await refreshCompanyData()\n          alert(",
    "}\n                    onChange={(e) => {\n                      const years = parseFloat(e.target.value) || 0\n                      handleInputChange(": "}\n                    onChange={(e) => {\n                      const years = parseFloat(e.target.value) || 0\n                      handleInputChange(",
    "M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z": "M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z",
    ";\n  };\n\n  // Get user initials for avatar\n  const getUserInitials = () => {\n    const name = getUserDisplayName();\n    \n    const parts = name.split(": ";\n  };\n\n  // Get user initials for avatar\n  const getUserInitials = () => {\n    const name = getUserDisplayName();\n    \n    const parts = name.split(",
    ")\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockScenario] })\n\n        const response = await getScenario(\n          new NextRequest(": ")\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockScenario] })\n\n        const response = await getScenario(\n          new NextRequest(",
    ",\n          body: JSON.stringify({ enable: false })\n        })\n\n        const response = await shareScenario(request, { params: Promise.resolve({ id: ": ",\n          body: JSON.stringify({ enable: false })\n        })\n\n        const response = await shareScenario(request, { params: Promise.resolve({ id: ",
    "\n\n      if (isDemoMode) {\n        // Update demo storage\n        updateDemoCompanySettings(formData)\n        await refreshCompanyData()\n        alert(": "\n\n      if (isDemoMode) {\n        // Update demo storage\n        updateDemoCompanySettings(formData)\n        await refreshCompanyData()\n        alert(",
    ")\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(": ")\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(",
    ", `Calculation error: ${error.message}`, context, error)\n}\n\n// Copy-friendly debug output functions\nexport function copyDebugLogs(category?: DebugLog[": ", `Calculation error: ${error.message}`, context, error)\n}\n\n// Copy-friendly debug output functions\nexport function copyDebugLogs(category?: DebugLog[",
    ");\n    \n    expect(closeButton).toBeInTheDocument();\n    expect(likeButton).toBeInTheDocument();\n    expect(helpLink).toBeInTheDocument();\n  });\n\n  it(": ");\n    \n    expect(closeButton).toBeInTheDocument();\n    expect(likeButton).toBeInTheDocument();\n    expect(helpLink).toBeInTheDocument();\n  });\n\n  it(",
    "),\n          email_verified: true\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockProfile] })\n\n        const request = new NextRequest(": "),\n          email_verified: true\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockProfile] })\n\n        const request = new NextRequest(",
    ">\n                {isAuthenticated ? (\n                  <UserMenu />\n                ) : (\n                  <NavigationLink\n                    href=": ">\n                {isAuthenticated ? (\n                  <UserMenu />\n                ) : (\n                  <NavigationLink\n                    href=",
    "s print dialog for the current page\n * This allows users to save as PDF or print the report\n */\nexport function printReport() {\n  if (typeof window !== ": "s print dialog for the current page\n * This allows users to save as PDF or print the report\n */\nexport function printReport() {\n  if (typeof window !== ",
    ";\n      \n      // Should have either outline or box-shadow for focus indication\n      expect(hasOutline || hasBoxShadow).toBe(true);\n    });\n  });\n\n  it(": ";\n      \n      // Should have either outline or box-shadow for focus indication\n      expect(hasOutline || hasBoxShadow).toBe(true);\n    });\n  });\n\n  it(",
    ");\n    expect(primaryResult.isValid).toBe(true);\n    \n    // Test secondary button combinations  \n    const secondaryResult = validateTailwindCombination(": ");\n    expect(primaryResult.isValid).toBe(true);\n    \n    // Test secondary button combinations  \n    const secondaryResult = validateTailwindCombination(",
    "\n      }\n\n      // Mock JWT verification success\n      mockJwt.verify.mockReturnValueOnce(mockUser)\n\n      const headers = new Headers()\n      headers.set(": "\n      }\n\n      // Mock JWT verification success\n      mockJwt.verify.mockReturnValueOnce(mockUser)\n\n      const headers = new Headers()\n      headers.set(",
    "\n            onClick={handleLinkClick}\n          />\n\n          {process.env.NODE_ENV === 'development' && (\n            <NavigationLink\n              href=": "\n            onClick={handleLinkClick}\n          />\n\n          {process.env.NODE_ENV === 'development' && (\n            <NavigationLink\n              href=",
    "\n        \n        // HELOC rates are typically higher than mortgage rates\n        if (mortgageRate > 0 && helocRate < mortgageRate - 2) {\n          return ": "\n        \n        // HELOC rates are typically higher than mortgage rates\n        if (mortgageRate > 0 && helocRate < mortgageRate - 2) {\n          return ",
    "inline-flex items-center justify-center rounded-md p-2 text-gray-700 bg-white shadow-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500": "inline-flex items-center justify-center rounded-md p-2 text-gray-700 bg-white shadow-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500",
    "\n      \n      if (isDemoMode) {\n        // Remove from local state in demo mode\n        setAgents(prev => prev.filter(a => a.id !== agentId))\n        alert(": "\n      \n      if (isDemoMode) {\n        // Remove from local state in demo mode\n        setAgents(prev => prev.filter(a => a.id !== agentId))\n        alert(",
    ")\n}\n\n/**\n * Download data as CSV file\n */\nexport function downloadCSV(filename: string, csvContent: string) {\n  const blob = new Blob([csvContent], { type: ": ")\n}\n\n/**\n * Download data as CSV file\n */\nexport function downloadCSV(filename: string, csvContent: string) {\n  const blob = new Blob([csvContent], { type: ",
    ",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value);\n}\n\nexport function formatNumberStatic(value: number | undefined, locale = ": ",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value);\n}\n\nexport function formatNumberStatic(value: number | undefined, locale = ",
    "\n})\n\nexport const registrationRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  maxRequests: 3, // 3 registrations per hour per IP\n  message: ": "\n})\n\nexport const registrationRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  maxRequests: 3, // 3 registrations per hour per IP\n  message: ",
    ")) return `\"${value}\"`\n          if (value instanceof Date) return value.toISOString()\n          return String(value)\n        })\n    \n    return values.join(": ")) return `\"${value}\"`\n          if (value instanceof Date) return value.toISOString()\n          return String(value)\n        })\n    \n    return values.join(",
    ");\n      expect(badge).toBeInTheDocument();\n      \n      // Badges should be readable but not necessarily interactive\n      expect(badge).not.toHaveAttribute(": ");\n      expect(badge).toBeInTheDocument();\n      \n      // Badges should be readable but not necessarily interactive\n      expect(badge).not.toHaveAttribute(",
    ", async () => {\n    mockGetDemoScenarios.mockReturnValue([])\n\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      const clearButton = screen.getByText(": ", async () => {\n    mockGetDemoScenarios.mockReturnValue([])\n\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      const clearButton = screen.getByText(",
    "\n            onClick={handleLinkClick}\n          />\n          \n          {session?.user && (\n            <>\n              <NavigationLink\n                href=": "\n            onClick={handleLinkClick}\n          />\n          \n          {session?.user && (\n            <>\n              <NavigationLink\n                href=",
    ",\n      nodeEnv: process.env.NODE_ENV\n    }\n  }\n\n  return JSON.stringify(data, null, 2)\n}\n\n// Global debug utilities for browser console\nif (typeof window !== ": ",\n      nodeEnv: process.env.NODE_ENV\n    }\n  }\n\n  return JSON.stringify(data, null, 2)\n}\n\n// Global debug utilities for browser console\nif (typeof window !== ",
    ", (reason, promise) => {\n      errorTracker.captureError(\n        reason instanceof Error ? reason : new Error(String(reason)),\n        {\n          component: ": ", (reason, promise) => {\n      errorTracker.captureError(\n        reason instanceof Error ? reason : new Error(String(reason)),\n        {\n          component: ",
    ";\n}\n\n/**\n * Parse formatted number back to number for calculations\n */\nexport function parseFormattedNumber(value: string): number {\n  if (!value || value === ": ";\n}\n\n/**\n * Parse formatted number back to number for calculations\n */\nexport function parseFormattedNumber(value: string): number {\n  if (!value || value === ",
    ")\n      expect(mockJwt.sign).toHaveBeenCalledWith(\n        { userId: mockUser.id, email: mockUser.email },\n        process.env.JWT_SECRET,\n        { expiresIn: ": ")\n      expect(mockJwt.sign).toHaveBeenCalledWith(\n        { userId: mockUser.id, email: mockUser.email },\n        process.env.JWT_SECRET,\n        { expiresIn: ",
    ":\n          console.debug(...args)\n          break\n        default:\n          console.log(...args)\n      }\n    }\n  }\n\n  private getConsoleStyle(level: DebugLog[": ":\n          console.debug(...args)\n          break\n        default:\n          console.log(...args)\n      }\n    }\n  }\n\n  private getConsoleStyle(level: DebugLog[",
    "\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockSharedScenario] })\n\n        const response = await getSharedScenario(\n          new NextRequest(": "\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockSharedScenario] })\n\n        const response = await getSharedScenario(\n          new NextRequest(",
    ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount)\n  }\n\n  const formatMonths = (months: number) => {\n    if (!months) return ": ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount)\n  }\n\n  const formatMonths = (months: number) => {\n    if (!months) return ",
    "]): string {\n    const logs = this.getLogs(category)\n    return logs.map(log => {\n      const data = log.data ? `\\nData: ${JSON.stringify(log.data, null, 2)}` : ": "]): string {\n    const logs = this.getLogs(category)\n    return logs.map(log => {\n      const data = log.data ? `\\nData: ${JSON.stringify(log.data, null, 2)}` : ",
    ", {\n      operation,\n      duration,\n      ...metadata\n    })\n  }\n\n  logDatabaseQuery(query: string, duration: number, rowCount?: number): void {\n    this.debug(": ", {\n      operation,\n      duration,\n      ...metadata\n    })\n  }\n\n  logDatabaseQuery(query: string, duration: number, rowCount?: number): void {\n    this.debug(",
    ", async () => {\n      const { container } = render(\n        <Button variant=\"primary\">Keyboard Test</Button>\n      );\n      \n      const button = screen.getByRole(": ", async () => {\n      const { container } = render(\n        <Button variant=\"primary\">Keyboard Test</Button>\n      );\n      \n      const button = screen.getByRole(",
    ")\n    \n    if (income > 0 && expenses >= 0 && payment > 0) {\n      const discretionary = income - expenses - payment\n      const formatted = new Intl.NumberFormat(": ")\n    \n    if (income > 0 && expenses >= 0 && payment > 0) {\n      const discretionary = income - expenses - payment\n      const formatted = new Intl.NumberFormat(",
    "Emily specializes in helping families maximize their home equity potential. Fluent in English and Spanish, she provides personalized service to diverse communities.": "Emily specializes in helping families maximize their home equity potential. Fluent in English and Spanish, she provides personalized service to diverse communities.",
    ", () => {\n      render(\n        <Alert variant=\"warning\">\n          This is a warning message.\n        </Alert>\n      );\n      \n      const alert = screen.getByRole(": ", () => {\n      render(\n        <Alert variant=\"warning\">\n          This is a warning message.\n        </Alert>\n      );\n      \n      const alert = screen.getByRole(",
    ", error, context)\n  }\n}\n\n// Create logger instances for different environments\nconst createLogger = (): Logger => {\n  const isDevelopment = process.env.NODE_ENV === ": ", error, context)\n  }\n}\n\n// Create logger instances for different environments\nconst createLogger = (): Logger => {\n  const isDevelopment = process.env.NODE_ENV === ",
    ",\n      [scenarioId, session.user.id]\n    )\n\n    if (result.rows.length === 0) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: ": ",\n      [scenarioId, session.user.id]\n    )\n\n    if (result.rows.length === 0) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: ",
    ",\n      message: `Scenario name is too long (${input.scenarioName.length} characters). Please use a shorter name (maximum 255 characters).`\n    })\n  }\n\n  console.log(": ",\n      message: `Scenario name is too long (${input.scenarioName.length} characters). Please use a shorter name (maximum 255 characters).`\n    })\n  }\n\n  console.log(",
    ", `Form validation: ${formName}.${fieldName}`, debugInfo)\n\n  return debugInfo\n}\n\nexport function debugCalculationError(error: Error, context: any) {\n  debugLogger.log(": ", `Form validation: ${formName}.${fieldName}`, debugInfo)\n\n  return debugInfo\n}\n\nexport function debugCalculationError(error: Error, context: any) {\n  debugLogger.log(",
    " }] })\n        // Mock delete operation\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        const response = await deleteScenario(\n          new NextRequest(": " }] })\n        // Mock delete operation\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        const response = await deleteScenario(\n          new NextRequest(",
    ", async () => {\n    const user = userEvent.setup()\n    render(<Dashboard />)\n\n    // Wait for component to load\n    await waitFor(() => {\n      expect(screen.getByText(": ", async () => {\n    const user = userEvent.setup()\n    render(<Dashboard />)\n\n    // Wait for component to load\n    await waitFor(() => {\n      expect(screen.getByText(",
    ",\n        inputs: sanitizedInputs\n      }\n    }\n\n    const successResponse = NextResponse.json<ApiResponse>({\n      success: true,\n      data: response,\n      message: ": ",\n        inputs: sanitizedInputs\n      }\n    }\n\n    const successResponse = NextResponse.json<ApiResponse>({\n      success: true,\n      data: response,\n      message: ",
    "\n      }, { status: 401 })\n    }\n    const { id: scenarioId } = await params\n\n    // Check if scenario exists and belongs to user\n    const result = await query(\n      ": "\n      }, { status: 401 })\n    }\n    const { id: scenarioId } = await params\n\n    // Check if scenario exists and belongs to user\n    const result = await query(\n      ",
    ")\n        }\n      } else {\n        // Delete via API in normal mode\n        const response = await fetch(`/heloc/api/scenario/${scenarioToDelete}`, {\n          method: ": ")\n        }\n      } else {\n        // Delete via API in normal mode\n        const response = await fetch(`/heloc/api/scenario/${scenarioToDelete}`, {\n          method: ",
    "The HELOC strategy requires positive discretionary income. Try:\\n• Reducing your monthly expenses\\n• Increasing your income\\n• Considering a traditional payoff approach": "The HELOC strategy requires positive discretionary income. Try:\\n• Reducing your monthly expenses\\n• Increasing your income\\n• Considering a traditional payoff approach",
    ")\n  \n  return sanitized.slice(0, 5000) // Limit length\n}\n\n/**\n * Sanitize email input\n */\nexport function sanitizeEmail(email: string): string {\n  if (typeof email !== ": ")\n  \n  return sanitized.slice(0, 5000) // Limit length\n}\n\n/**\n * Sanitize email input\n */\nexport function sanitizeEmail(email: string): string {\n  if (typeof email !== ",
    ", newData)\n      return newData\n    })\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ": ", newData)\n      return newData\n    })\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: ",
    " }: QuickInputSummaryProps) {\n  if (!formData) return null\n\n  const formatCurrency = (value: number | undefined) => {\n    if (value === undefined || value === 0) return ": " }: QuickInputSummaryProps) {\n  if (!formData) return null\n\n  const formatCurrency = (value: number | undefined) => {\n    if (value === undefined || value === 0) return ",
    "])?.value\n    \n    if (!csrfToken || !CSRFProtection.validateToken(request, csrfToken)) {\n      return new NextResponse(\n        JSON.stringify({ success: false, error: ": "])?.value\n    \n    if (!csrfToken || !CSRFProtection.validateToken(request, csrfToken)) {\n      return new NextResponse(\n        JSON.stringify({ success: false, error: ",
    "M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.467-.881-6.08-2.33m0 0L3 15l2.92-2.33M21 15l-2.92-2.33M15 11a3 3 0 11-6 0 3 3 0 016 0z": "M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.467-.881-6.08-2.33m0 0L3 15l2.92-2.33M21 15l-2.92-2.33M15 11a3 3 0 11-6 0 3 3 0 016 0z",
    "\n  }\n}\n\n/**\n * Validate request origin\n */\nexport function validateOrigin(request: NextRequest, allowedOrigins: string[]): boolean {\n  const origin = request.headers.get(": "\n  }\n}\n\n/**\n * Validate request origin\n */\nexport function validateOrigin(request: NextRequest, allowedOrigins: string[]): boolean {\n  const origin = request.headers.get(",
    ",\n        [scenarioId]\n      )\n\n      return NextResponse.json<ApiResponse>({\n        success: true,\n        data: {\n          isPublic: false\n        },\n        message: ": ",\n        [scenarioId]\n      )\n\n      return NextResponse.json<ApiResponse>({\n        success: true,\n        data: {\n          isPublic: false\n        },\n        message: ",
    "))\n  \n  // Parse rows\n  const data = []\n  for (let i = 1; i < lines.length; i++) {\n    const row = lines[i]\n    if (!row.trim()) continue\n\n    // Simple CSV parsing (doesn": "))\n  \n  // Parse rows\n  const data = []\n  for (let i = 1; i < lines.length; i++) {\n    const row = lines[i]\n    if (!row.trim()) continue\n\n    // Simple CSV parsing (doesn",
    "))\n}\n\n/**\n * IP whitelist validation\n */\nexport function validateIPWhitelist(request: NextRequest, whitelist: string[]): boolean {\n  const forwarded = request.headers.get(": "))\n}\n\n/**\n * IP whitelist validation\n */\nexport function validateIPWhitelist(request: NextRequest, whitelist: string[]): boolean {\n  const forwarded = request.headers.get(",
    ", async () => {\n      const { container } = render(\n        <Button variant=\"primary\" loading>Loading Button</Button>\n      );\n      \n      const button = screen.getByRole(": ", async () => {\n      const { container } = render(\n        <Button variant=\"primary\" loading>Loading Button</Button>\n      );\n      \n      const button = screen.getByRole(",
    "\n      }\n\n      const result = validateCalculatorInput(edgeCaseInput)\n\n      expect(result.isValid).toBe(true)\n      expect(result.errors).toHaveLength(0)\n    })\n\n    test(": "\n      }\n\n      const result = validateCalculatorInput(edgeCaseInput)\n\n      expect(result.isValid).toBe(true)\n      expect(result.errors).toHaveLength(0)\n    })\n\n    test(",
    "\n              />\n\n              {/* Development only */}\n              {process.env.NODE_ENV === 'development' && (\n                <NavigationLink\n                  href=": "\n              />\n\n              {/* Development only */}\n              {process.env.NODE_ENV === 'development' && (\n                <NavigationLink\n                  href=",
    "], // Coral/orange tones from design system\n          scalar: 1.2,\n          ...defaults,\n        },\n        celebration: {\n          particleCount: 200,\n          colors: [": "], // Coral/orange tones from design system\n          scalar: 1.2,\n          ...defaults,\n        },\n        celebration: {\n          particleCount: 200,\n          colors: [",
    ", async () => {\n      const { container } = render(\n        <Button variant=\"primary\" disabled>Disabled Button</Button>\n      );\n      \n      const button = screen.getByRole(": ", async () => {\n      const { container } = render(\n        <Button variant=\"primary\" disabled>Disabled Button</Button>\n      );\n      \n      const button = screen.getByRole(",
    " }) }\n        )\n        const data = await response.json()\n\n        expect(response.status).toBe(404)\n        expect(data.success).toBe(false)\n        expect(data.error).toBe(": " }) }\n        )\n        const data = await response.json()\n\n        expect(response.status).toBe(404)\n        expect(data.success).toBe(false)\n        expect(data.error).toBe(",
    ")\n    await user.click(firstConfirmButton)\n\n    expect(onConfirm).toHaveBeenCalledTimes(1)\n\n    // Now we should see the second confirmation modal\n    expect(screen.getByText(": ")\n    await user.click(firstConfirmButton)\n\n    expect(onConfirm).toHaveBeenCalledTimes(1)\n\n    // Now we should see the second confirmation modal\n    expect(screen.getByText(",
    ")\n        }\n\n        const data = await response.json()\n        if (data.success) {\n          setScenarios(data.data)\n        } else {\n          throw new Error(data.error || ": ")\n        }\n\n        const data = await response.json()\n        if (data.success) {\n          setScenarios(data.data)\n        } else {\n          throw new Error(data.error || ",
    ");\n    }\n  };\n\n  const handleConfirm = () => {\n    if (!isValid) {\n      setError(`Please type \"${confirmationText}\" exactly as shown`);\n      return;\n    }\n    \n    setError(": ");\n    }\n  };\n\n  const handleConfirm = () => {\n    if (!isValid) {\n      setError(`Please type \"${confirmationText}\" exactly as shown`);\n      return;\n    }\n    \n    setError(",
    " }) }\n        )\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.id).toBe(": " }) }\n        )\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.id).toBe(",
    " }) }\n        )\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.message).toBe(": " }) }\n        )\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.message).toBe(",
    ",\n        loanAmount: 400000,\n        propertyValue: 500000,\n        expectedLTV: 80,\n        expectedPMI: 0,\n        expectedMIPRequired: false\n      },\n      {\n        name: ": ",\n        loanAmount: 400000,\n        propertyValue: 500000,\n        expectedLTV: 80,\n        expectedPMI: 0,\n        expectedMIPRequired: false\n      },\n      {\n        name: ",
    ",\n        loanAmount: 300000,\n        propertyValue: 500000,\n        expectedLTV: 60,\n        expectedPMI: 0,\n        expectedMIPRequired: false\n      },\n      {\n        name: ": ",\n        loanAmount: 300000,\n        propertyValue: 500000,\n        expectedLTV: 60,\n        expectedPMI: 0,\n        expectedMIPRequired: false\n      },\n      {\n        name: ",
    ")\n  }\n}\n\n// Generate sample scenarios for demo for a specific user\nexport function generateSampleScenarios(userId?: string): void {\n  const sampleScenarios: Omit<DemoScenario, ": ")\n  }\n}\n\n// Generate sample scenarios for demo for a specific user\nexport function generateSampleScenarios(userId?: string): void {\n  const sampleScenarios: Omit<DemoScenario, ",
    "\n                    />\n                  )}\n                </>\n              )}\n\n              {/* Always show formulas */}\n              <NavigationLink\n                href=": "\n                    />\n                  )}\n                </>\n              )}\n\n              {/* Always show formulas */}\n              <NavigationLink\n                href=",
    ",\n        loanAmount: 450000,\n        propertyValue: 500000,\n        expectedLTV: 90,\n        expectedPMI: 281,\n        expectedMIPRequired: true\n      },\n      {\n        name: ": ",\n        loanAmount: 450000,\n        propertyValue: 500000,\n        expectedLTV: 90,\n        expectedPMI: 281,\n        expectedMIPRequired: true\n      },\n      {\n        name: ",
    ",\n        loanAmount: 800000,\n        propertyValue: 1000000,\n        expectedLTV: 80,\n        expectedPMI: 0,\n        expectedMIPRequired: false\n      },\n      {\n        name: ": ",\n        loanAmount: 800000,\n        propertyValue: 1000000,\n        expectedLTV: 80,\n        expectedPMI: 0,\n        expectedMIPRequired: false\n      },\n      {\n        name: ",
    ") return undefined\n      return data\n    }\n\n    const formattedData = formatData(log.data)\n    const formattedStackTrace = formatData(log.stackTrace)\n\n    if (typeof window !== ": ") return undefined\n      return data\n    }\n\n    const formattedData = formatData(log.data)\n    const formattedStackTrace = formatData(log.stackTrace)\n\n    if (typeof window !== ",
    " }) })\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.shareUrl).toContain(": " }) })\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.shareUrl).toContain(",
    " }) }\n        )\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.name).toBe(": " }) }\n        )\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.name).toBe(",
    ", () => {\n      // Start with empty storage\n      expect(getDemoScenarios()).toEqual([])\n      \n      // Add a scenario\n      const newScenario = addDemoScenario({\n        name: ": ", () => {\n      // Start with empty storage\n      expect(getDemoScenarios()).toEqual([])\n      \n      // Add a scenario\n      const newScenario = addDemoScenario({\n        name: ",
    " } \n      })\n\n      // Should not crash\n      await waitFor(() => {\n        expect(screen.queryByText(/loan-to-value analysis/i)).not.toBeInTheDocument()\n      })\n    })\n\n    it(": " } \n      })\n\n      // Should not crash\n      await waitFor(() => {\n        expect(screen.queryByText(/loan-to-value analysis/i)).not.toBeInTheDocument()\n      })\n    })\n\n    it(",
    ",\n        loanAmount: 950000,\n        propertyValue: 1000000,\n        expectedLTV: 95,\n        expectedPMI: 792,\n        expectedMIPRequired: true\n      },\n      {\n        name: ": ",\n        loanAmount: 950000,\n        propertyValue: 1000000,\n        expectedLTV: 95,\n        expectedPMI: 792,\n        expectedMIPRequired: true\n      },\n      {\n        name: ",
    ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num)\n  }\n  \n  const parseCurrency = (value: string): string => {\n    return value.replace(/[,$]/g, ": ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(num)\n  }\n  \n  const parseCurrency = (value: string): string => {\n    return value.replace(/[,$]/g, ",
    " }\n  ]\n\n  const testLogin = async (email: string, password: string) => {\n    setLoading(true)\n    setResult(`Testing ${email}...`)\n    \n    try {\n      const result = await signIn(": " }\n  ]\n\n  const testLogin = async (email: string, password: string) => {\n    setLoading(true)\n    setResult(`Testing ${email}...`)\n    \n    try {\n      const result = await signIn(",
    "\n              />\n\n              {/* Authenticated user links */}\n              {isAuthenticated && (\n                <>\n                  <NavigationLink\n                    href=": "\n              />\n\n              {/* Authenticated user links */}\n              {isAuthenticated && (\n                <>\n                  <NavigationLink\n                    href=",
    " } \n      })\n      \n      // Leave PMI field empty (should trigger validation error)\n      fireEvent.change(screen.getByLabelText(/monthly mip\\/pmi/i), { \n        target: { value: ": " } \n      })\n      \n      // Leave PMI field empty (should trigger validation error)\n      fireEvent.change(screen.getByLabelText(/monthly mip\\/pmi/i), { \n        target: { value: ",
    ")[0]}.csv`\n  \n  downloadCSV(filename, csv)\n}\n\n/**\n * Export user assignments to CSV\n */\nexport function exportAssignmentsToCSV(assignments: any[]) {\n  const columns = [\n    { key: ": ")[0]}.csv`\n  \n  downloadCSV(filename, csv)\n}\n\n/**\n * Export user assignments to CSV\n */\nexport function exportAssignmentsToCSV(assignments: any[]) {\n  const columns = [\n    { key: ",
    "\n      }, { status: 404 })\n    }\n\n    const scenario = result.rows[0]\n    const shareUrl = scenario.is_public && scenario.public_share_token \n      ? `${process.env.NEXTAUTH_URL || ": "\n      }, { status: 404 })\n    }\n\n    const scenario = result.rows[0]\n    const shareUrl = scenario.is_public && scenario.public_share_token \n      ? `${process.env.NEXTAUTH_URL || ",
    "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z": "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z",
    "inline-flex items-center justify-center w-5 h-5 text-gray-400 hover:text-gray-600 rounded-full border border-gray-300 hover:border-gray-400 bg-white hover:bg-gray-50 transition-colors": "inline-flex items-center justify-center w-5 h-5 text-gray-400 hover:text-gray-600 rounded-full border border-gray-300 hover:border-gray-400 bg-white hover:bg-gray-50 transition-colors",
    " }\n  }\n  \n  return { valid: true }\n}\n\n/**\n * Rate limit key sanitization\n */\nexport function sanitizeRateLimitKey(key: string): string {\n  return key\n    .replace(/[^a-zA-Z0-9:.-]/g, ": " }\n  }\n  \n  return { valid: true }\n}\n\n/**\n * Rate limit key sanitization\n */\nexport function sanitizeRateLimitKey(key: string): string {\n  return key\n    .replace(/[^a-zA-Z0-9:.-]/g, ",
    "\n        }]\n      })\n\n      // Mock password comparison\n      mockBcrypt.compare.mockResolvedValueOnce(true)\n\n      // Mock JWT token generation\n      mockJwt.sign.mockReturnValueOnce(": "\n        }]\n      })\n\n      // Mock password comparison\n      mockBcrypt.compare.mockResolvedValueOnce(true)\n\n      // Mock JWT token generation\n      mockJwt.sign.mockReturnValueOnce(",
    ") \n    ? hexToRgb(background) \n    : rgbStringToRgb(background);\n    \n  if (!fg || !bg) {\n    return {\n      ratio: 0,\n      isAccessible: false,\n      level: null,\n      recommendation: ": ") \n    ? hexToRgb(background) \n    : rgbStringToRgb(background);\n    \n  if (!fg || !bg) {\n    return {\n      ratio: 0,\n      isAccessible: false,\n      level: null,\n      recommendation: ",
    "\n\n  // If no columns specified, use all keys from first object\n  const headers = columns \n    ? columns.map(col => col.label)\n    : Object.keys(data[0])\n\n  const headerRow = headers.join(": "\n\n  // If no columns specified, use all keys from first object\n  const headers = columns \n    ? columns.map(col => col.label)\n    : Object.keys(data[0])\n\n  const headerRow = headers.join(",
    "\n  }),\n\n  [ErrorCode.INVALID_CALCULATION_INPUT]: (params) => ({\n    code: ErrorCode.INVALID_CALCULATION_INPUT,\n    message: `Invalid calculation input: ${params?.field}`,\n    userMessage: ": "\n  }),\n\n  [ErrorCode.INVALID_CALCULATION_INPUT]: (params) => ({\n    code: ErrorCode.INVALID_CALCULATION_INPUT,\n    message: `Invalid calculation input: ${params?.field}`,\n    userMessage: ",
    "\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockScenario] })\n        mockQuery.mockResolvedValueOnce({ rows: [] }) // Update query\n\n        const request = new NextRequest(": "\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockScenario] })\n        mockQuery.mockResolvedValueOnce({ rows: [] }) // Update query\n\n        const request = new NextRequest(",
    ")\n        }\n\n        const data = await response.json()\n        if (data.success) {\n          setProfile(data.data)\n          setProfileForm({\n            firstName: data.data.firstName || ": ")\n        }\n\n        const data = await response.json()\n        if (data.success) {\n          setProfile(data.data)\n          setProfileForm({\n            firstName: data.data.firstName || ",
    ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount)\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(": ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount)\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(",
    "\n              value={formData.helocLimit || 0}\n              error={errors.helocLimit}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.helocLimit || 0}\n              error={errors.helocLimit}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "Michael brings a unique analytical approach to mortgage acceleration, with a background in financial engineering. He excels at creating customized strategies for complex financial situations.": "Michael brings a unique analytical approach to mortgage acceleration, with a background in financial engineering. He excels at creating customized strategies for complex financial situations.",
    ", formData)\n    \n    try {\n      // Convert all form data to proper types and validate\n      const processedData: CalculatorValidationInput = {\n        // Required numeric fields - ensure they": ", formData)\n    \n    try {\n      // Convert all form data to proper types and validate\n      const processedData: CalculatorValidationInput = {\n        // Required numeric fields - ensure they",
    ", newErrors)\n\n      setErrors(newErrors)\n      setTouched(Object.fromEntries(requiredFields.map(field => [field, true])))\n\n      if (Object.keys(newErrors).length === 0) {\n        addDebugLog(": ", newErrors)\n\n      setErrors(newErrors)\n      setTouched(Object.fromEntries(requiredFields.map(field => [field, true])))\n\n      if (Object.keys(newErrors).length === 0) {\n        addDebugLog(",
    "M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01": "M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01",
    ", () => {\n      // A combo that passes for large text but not normal (AA standards)\n      // Using a medium gray that has about 3.5:1 contrast with white\n      const result1 = validateContrast(": ", () => {\n      // A combo that passes for large text but not normal (AA standards)\n      // Using a medium gray that has about 3.5:1 contrast with white\n      const result1 = validateContrast(",
    "w-full pl-8 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent !text-gray-900 dark:!text-white bg-white dark:bg-neutral-800": "w-full pl-8 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent !text-gray-900 dark:!text-white bg-white dark:bg-neutral-800",
    ";\n    return `${value.toFixed(decimals)}%`;\n  };\n\n  const formatNumber = (value: number | undefined, options?: Intl.NumberFormatOptions) => {\n    if (value === undefined || value === 0) return ": ";\n    return `${value.toFixed(decimals)}%`;\n  };\n\n  const formatNumber = (value: number | undefined, options?: Intl.NumberFormatOptions) => {\n    if (value === undefined || value === 0) return ",
    " ? agent.isActive : !agent.isActive\n      )\n    }\n\n    setFilteredAgents(filtered)\n  }, [searchTerm, filterActive, agents])\n\n  const handleDelete = async (agentId: number) => {\n    if (!confirm(": " ? agent.isActive : !agent.isActive\n      )\n    }\n\n    setFilteredAgents(filtered)\n  }, [searchTerm, filterActive, agents])\n\n  const handleDelete = async (agentId: number) => {\n    if (!confirm(",
    ").toLowerCase()} is required`\n    }\n\n    if (rule.min && value < rule.min) {\n      return rule.message\n    }\n\n    if (rule.max && value > rule.max) {\n      return rule.message\n    }\n\n    return ": ").toLowerCase()} is required`\n    }\n\n    if (rule.min && value < rule.min) {\n      return rule.message\n    }\n\n    if (rule.max && value > rule.max) {\n      return rule.message\n    }\n\n    return ",
    "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z": "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
    "\n        \n        // Typical HELOC limits are 80% of home value, warn if seems high relative to mortgage\n        if (mortgageBalance > 0 && helocLimit > mortgageBalance * 1.2) {\n          return ": "\n        \n        // Typical HELOC limits are 80% of home value, warn if seems high relative to mortgage\n        if (mortgageBalance > 0 && helocLimit > mortgageBalance * 1.2) {\n          return ",
    "); // White on white\n      \n      expect(result.isAccessible).toBe(false);\n      expect(result.level).toBeNull();\n      expect(result.ratio).toBe(1);\n      expect(result.recommendation).toContain(": "); // White on white\n      \n      expect(result.isAccessible).toBe(false);\n      expect(result.level).toBeNull();\n      expect(result.ratio).toBe(1);\n      expect(result.recommendation).toContain(",
    "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z": "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z",
    ")[0]}.csv`\n  \n  downloadCSV(filename, csv)\n}\n\n/**\n * Parse CSV file to array of objects\n */\nexport function parseCSV(csvText: string): Record<string, any>[] {\n  const lines = csvText.trim().split(": ")[0]}.csv`\n  \n  downloadCSV(filename, csv)\n}\n\n/**\n * Parse CSV file to array of objects\n */\nexport function parseCSV(csvText: string): Record<string, any>[] {\n  const lines = csvText.trim().split(",
    "\n              value={formData.propertyValue || 0}\n              error={errors.propertyValue}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.propertyValue || 0}\n              error={errors.propertyValue}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "];\n    \n    darkBackgrounds.forEach(bg => {\n      const safeTexts = SAFE_COMBINATIONS[bg as keyof typeof SAFE_COMBINATIONS];\n      expect(safeTexts).toBeDefined();\n      expect(safeTexts).toContain(": "];\n    \n    darkBackgrounds.forEach(bg => {\n      const safeTexts = SAFE_COMBINATIONS[bg as keyof typeof SAFE_COMBINATIONS];\n      expect(safeTexts).toBeDefined();\n      expect(safeTexts).toContain(",
    "];\n    \n    lightBackgrounds.forEach(bg => {\n      const safeTexts = SAFE_COMBINATIONS[bg as keyof typeof SAFE_COMBINATIONS];\n      expect(safeTexts).toBeDefined();\n      expect(safeTexts).toContain(": "];\n    \n    lightBackgrounds.forEach(bg => {\n      const safeTexts = SAFE_COMBINATIONS[bg as keyof typeof SAFE_COMBINATIONS];\n      expect(safeTexts).toBeDefined();\n      expect(safeTexts).toContain(",
    "\n              value={formData.monthlyPayment || 0}\n              error={errors.monthlyPayment}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.monthlyPayment || 0}\n              error={errors.monthlyPayment}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "\n              value={formData.hoaFeesMonthly || 0}\n              error={errors.hoaFeesMonthly}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.hoaFeesMonthly || 0}\n              error={errors.hoaFeesMonthly}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value)\n  }\n\n  const formatPercent = (value: number | undefined) => {\n    if (value === undefined || value === 0) return ": ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value)\n  }\n\n  const formatPercent = (value: number | undefined) => {\n    if (value === undefined || value === 0) return ",
    ";\n}\n\n/**\n * Format percentage display\n */\nexport function formatPercentage(value: number | string): string {\n  const formatted = formatNumberWithCommas(value);\n  return formatted ? `${formatted}%` : ": ";\n}\n\n/**\n * Format percentage display\n */\nexport function formatPercentage(value: number | string): string {\n  const formatted = formatNumberWithCommas(value);\n  return formatted ? `${formatted}%` : ",
    ") // Remove event handlers\n    .slice(0, 1000) // Limit length\n}\n\n/**\n * Sanitize HTML content (basic implementation)\n */\nexport function sanitizeHtml(input: string): string {\n  if (typeof input !== ": ") // Remove event handlers\n    .slice(0, 1000) // Limit length\n}\n\n/**\n * Sanitize HTML content (basic implementation)\n */\nexport function sanitizeHtml(input: string): string {\n  if (typeof input !== ",
    ",\n          },\n          body: JSON.stringify(passwordForm)\n        })\n\n        const data = await response.json()\n        if (data.success) {\n          setPasswordForm({\n            currentPassword: ": ",\n          },\n          body: JSON.stringify(passwordForm)\n        })\n\n        const data = await response.json()\n        if (data.success) {\n          setPasswordForm({\n            currentPassword: ",
    " && !item.showInMobile) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n\n  // Find active navigation item\n  const activeItem = allNavigationItems.find(item => {\n    if (item.href === ": " && !item.showInMobile) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n\n  // Find active navigation item\n  const activeItem = allNavigationItems.find(item => {\n    if (item.href === ",
    "Sarah has over 15 years of experience in mortgage acceleration strategies and has helped hundreds of families save money on their mortgages. She specializes in HELOC strategies and debt consolidation.": "Sarah has over 15 years of experience in mortgage acceleration strategies and has helped hundreds of families save money on their mortgages. She specializes in HELOC strategies and debt consolidation.",
    ", { name: /dismiss|close/i });\n      expect(dismissButton).toBeInTheDocument();\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n  });\n\n  describe(": ", { name: /dismiss|close/i });\n      expect(dismissButton).toBeInTheDocument();\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n  });\n\n  describe(",
    "\n      }\n\n      const validationRule = FORM_VALIDATION_RULES.pmiMonthly.validate?.ltvBased\n      expect(validationRule).toBeDefined()\n\n      if (validationRule) {\n        const result = validationRule(": "\n      }\n\n      const validationRule = FORM_VALIDATION_RULES.pmiMonthly.validate?.ltvBased\n      expect(validationRule).toBeDefined()\n\n      if (validationRule) {\n        const result = validationRule(",
    ") {\n    const formatted = `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`\n    return extension ? `${formatted} ext. ${extension}` : formatted\n  }\n  \n  // Return original if can": ") {\n    const formatted = `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`\n    return extension ? `${formatted} ext. ${extension}` : formatted\n  }\n  \n  // Return original if can",
    ") // Remove leading/trailing dots\n    .slice(0, 255) // Limit length\n}\n\n/**\n * Sanitize SQL input (basic protection)\n */\nexport function sanitizeSqlInput(input: string): string {\n  if (typeof input !== ": ") // Remove leading/trailing dots\n    .slice(0, 255) // Limit length\n}\n\n/**\n * Sanitize SQL input (basic protection)\n */\nexport function sanitizeSqlInput(input: string): string {\n  if (typeof input !== ",
    ")\n    await user.click(regenerateButton)\n\n    // Verify generateSampleScenarios was called\n    expect(mockGenerateSampleScenarios).toHaveBeenCalledTimes(2) // Once on load, once on regenerate\n  })\n\n  it(": ")\n    await user.click(regenerateButton)\n\n    // Verify generateSampleScenarios was called\n    expect(mockGenerateSampleScenarios).toHaveBeenCalledTimes(2) // Once on load, once on regenerate\n  })\n\n  it(",
    "\n              value={formData.monthlyNetIncome || 0}\n              error={errors.monthlyNetIncome}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.monthlyNetIncome || 0}\n              error={errors.monthlyNetIncome}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "\n              value={formData.insuranceMonthly || 0}\n              error={errors.insuranceMonthly}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.insuranceMonthly || 0}\n              error={errors.insuranceMonthly}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    ", JSON.stringify(allAgents))\n      \n      alert(`Successfully imported ${newAgents.length} agents!`)\n      \n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = ": ", JSON.stringify(allAgents))\n      \n      alert(`Successfully imported ${newAgents.length} agents!`)\n      \n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = ",
    "}/shared/${shareToken}`\n\n      return NextResponse.json<ApiResponse>({\n        success: true,\n        data: {\n          shareUrl,\n          shareToken,\n          isPublic: true\n        },\n        message: ": "}/shared/${shareToken}`\n\n      return NextResponse.json<ApiResponse>({\n        success: true,\n        data: {\n          shareUrl,\n          shareToken,\n          isPublic: true\n        },\n        message: ",
    "\n              value={formData.helocInterestRate || 0}\n              error={errors.helocInterestRate}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.helocInterestRate || 0}\n              error={errors.helocInterestRate}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "\n                >\n                  Use Suggested: ${ltvInfo.suggestedMonthlyPMI}/mo\n                </button>\n              )}\n            </div>\n          )}\n\n          <div>\n            <label htmlFor=": "\n                >\n                  Use Suggested: ${ltvInfo.suggestedMonthlyPMI}/mo\n                </button>\n              )}\n            </div>\n          )}\n\n          <div>\n            <label htmlFor=",
    ", JSON.stringify(scenarios))\n\n      const info = getStorageInfo()\n\n      expect(info.available).toBe(true)\n      expect(info.used).toBeGreaterThan(0)\n      expect(info.error).toBeUndefined()\n    })\n\n    it(": ", JSON.stringify(scenarios))\n\n      const info = getStorageInfo()\n\n      expect(info.available).toBe(true)\n      expect(info.used).toBeGreaterThan(0)\n      expect(info.error).toBeUndefined()\n    })\n\n    it(",
    ", () => {\n      const color = { r: 128, g: 128, b: 128 };\n      \n      const ratio = getContrastRatio(color, color);\n      expect(ratio).toBeCloseTo(1, 5); // Minimum possible contrast ratio\n    });\n\n    it(": ", () => {\n      const color = { r: 128, g: 128, b: 128 };\n      \n      const ratio = getContrastRatio(color, color);\n      expect(ratio).toBeCloseTo(1, 5); // Minimum possible contrast ratio\n    });\n\n    it(",
    "\n              value={formData.monthlyGrossIncome || 0}\n              error={errors.monthlyGrossIncome}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.monthlyGrossIncome || 0}\n              error={errors.monthlyGrossIncome}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "\n              value={formData.propertyTaxMonthly || 0}\n              error={errors.propertyTaxMonthly}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.propertyTaxMonthly || 0}\n              error={errors.propertyTaxMonthly}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    ")\n  \n  if (!origin && !referer) {\n    return false\n  }\n  \n  const requestOrigin = origin || new URL(referer!).origin\n  \n  return allowedOrigins.includes(requestOrigin) || \n         (process.env.NODE_ENV === ": ")\n  \n  if (!origin && !referer) {\n    return false\n  }\n  \n  const requestOrigin = origin || new URL(referer!).origin\n  \n  return allowedOrigins.includes(requestOrigin) || \n         (process.env.NODE_ENV === ",
    " ? prev.monthlyExpenses : 0)\n        \n        if (netIncome > 0 && expenses >= 0) {\n          newData.monthlyDiscretionaryIncome = Math.max(0, netIncome - expenses)\n        }\n      }\n      \n      addDebugLog(": " ? prev.monthlyExpenses : 0)\n        \n        if (netIncome > 0 && expenses >= 0) {\n          newData.monthlyDiscretionaryIncome = Math.max(0, netIncome - expenses)\n        }\n      }\n      \n      addDebugLog(",
    ", mortgageValidation)\n  errors.push(...mortgageValidation.errors)\n\n  // Validate HELOC inputs only if provided\n  if (input.helocLimit !== undefined || input.helocInterestRate !== undefined) {\n    console.log(": ", mortgageValidation)\n  errors.push(...mortgageValidation.errors)\n\n  // Validate HELOC inputs only if provided\n  if (input.helocLimit !== undefined || input.helocInterestRate !== undefined) {\n    console.log(",
    ", {\n        value: undefined,\n        writable: true\n      })\n\n      const info = getStorageInfo()\n      \n      expect(info.available).toBe(false)\n      expect(info.used).toBe(0)\n      expect(info.error).toBe(": ", {\n        value: undefined,\n        writable: true\n      })\n\n      const info = getStorageInfo()\n      \n      expect(info.available).toBe(false)\n      expect(info.used).toBe(0)\n      expect(info.error).toBe(",
    "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z": "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z",
    "\n              value={formData.currentInterestRate || 0}\n              error={errors.currentInterestRate}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.currentInterestRate || 0}\n              error={errors.currentInterestRate}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "border-neutral-300 dark:border-neutral-600 hover:border-neutral-400 dark:hover:border-neutral-500 focus:border-primary-500 dark:focus:border-primary-400 focus:ring-primary-500/20 dark:focus:ring-primary-400/20": "border-neutral-300 dark:border-neutral-600 hover:border-neutral-400 dark:hover:border-neutral-500 focus:border-primary-500 dark:focus:border-primary-400 focus:ring-primary-500/20 dark:focus:ring-primary-400/20",
    "\n}\n\n// Cross-field validation rules\nexport function validateCrossFields(formValues: any) {\n  const errors: Record<string, string> = {}\n  \n  const income = parseFloat(formValues.monthlyIncome?.replace(/[,$]/g, ": "\n}\n\n// Cross-field validation rules\nexport function validateCrossFields(formValues: any) {\n  const errors: Record<string, string> = {}\n  \n  const income = parseFloat(formValues.monthlyIncome?.replace(/[,$]/g, ",
    " }) })\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.isPublic).toBe(false)\n      })\n    })\n\n    describe(": " }) })\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.isPublic).toBe(false)\n      })\n    })\n\n    describe(",
    "\n          }]\n        })\n        // Mock password update\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        // Mock bcrypt compare to return true for current password\n        const bcrypt = require(": "\n          }]\n        })\n        // Mock password update\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n\n        // Mock bcrypt compare to return true for current password\n        const bcrypt = require(",
    ")\n      onClose()\n    }\n  }\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value\n    setScenarioName(value)\n    if (nameError) {\n      setNameError(": ")\n      onClose()\n    }\n  }\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value\n    setScenarioName(value)\n    if (nameError) {\n      setNameError(",
    ")\n  } else {\n    const loan = Number(loanAmount)\n    const value = Number(propertyValue)\n\n    steps.push(`Converted: Loan = ${loan}, Value = ${value}`)\n\n    if (isNaN(loan) || isNaN(value)) {\n      errors.push(": ")\n  } else {\n    const loan = Number(loanAmount)\n    const value = Number(propertyValue)\n\n    steps.push(`Converted: Loan = ${loan}, Value = ${value}`)\n\n    if (isNaN(loan) || isNaN(value)) {\n      errors.push(",
    ").toLowerCase()\n    errors.push({\n      field: fieldName,\n      message: `Please enter your ${friendlyName}`\n    })\n    return errors\n  }\n\n  if (!required && (value === undefined || value === null || value === ": ").toLowerCase()\n    errors.push({\n      field: fieldName,\n      message: `Please enter your ${friendlyName}`\n    })\n    return errors\n  }\n\n  if (!required && (value === undefined || value === null || value === ",
    "\n              value={formData.helocAvailableCredit || 0}\n              error={errors.helocAvailableCredit}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.helocAvailableCredit || 0}\n              error={errors.helocAvailableCredit}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "\n\n  // Debug logging function\n  const addDebugLog = useCallback((message: string, data?: any) => {\n    const timestamp = new Date().toLocaleTimeString()\n    const logMessage = `[${timestamp}] ${message}${data ? ": "\n\n  // Debug logging function\n  const addDebugLog = useCallback((message: string, data?: any) => {\n    const timestamp = new Date().toLocaleTimeString()\n    const logMessage = `[${timestamp}] ${message}${data ? ",
    "\n        }\n\n        // Mock email uniqueness check\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n        // Mock update operation\n        mockQuery.mockResolvedValueOnce({\n          rows: [{\n            id: ": "\n        }\n\n        // Mock email uniqueness check\n        mockQuery.mockResolvedValueOnce({ rows: [] })\n        // Mock update operation\n        mockQuery.mockResolvedValueOnce({\n          rows: [{\n            id: ",
    "\n      }\n\n      const result = validateCalculatorInput(inputWithHeloc)\n\n      expect(result.isValid).toBe(false)\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ": "\n      }\n\n      const result = validateCalculatorInput(inputWithHeloc)\n\n      expect(result.isValid).toBe(false)\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ",
    "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z": "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z",
    "\n              value={formData.currentMortgageBalance || 0}\n              error={errors.currentMortgageBalance}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              value={formData.currentMortgageBalance || 0}\n              error={errors.currentMortgageBalance}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    "];\n    \n    primaryColors.forEach(color => {\n      expect(SAFE_COMBINATIONS[color as keyof typeof SAFE_COMBINATIONS]).toBeDefined();\n      expect(SAFE_COMBINATIONS[color as keyof typeof SAFE_COMBINATIONS]).toContain(": "];\n    \n    primaryColors.forEach(color => {\n      expect(SAFE_COMBINATIONS[color as keyof typeof SAFE_COMBINATIONS]).toBeDefined();\n      expect(SAFE_COMBINATIONS[color as keyof typeof SAFE_COMBINATIONS]).toContain(",
    ");\n}\n\n/**\n * Format currency display (with $ and commas)\n */\nexport function formatCurrency(value: number | string): string {\n  const formatted = formatNumberWithCommas(value);\n  return formatted ? `$${formatted}` : ": ");\n}\n\n/**\n * Format currency display (with $ and commas)\n */\nexport function formatCurrency(value: number | string): string {\n  const formatted = formatNumberWithCommas(value);\n  return formatted ? `$${formatted}` : ",
    "\n      }\n\n      // Mock user not found\n      mockQuery.mockResolvedValueOnce({ rows: [] })\n\n      const userResult = await mockQuery.mock.results[0].value\n      expect(userResult.rows.length).toBe(0)\n    })\n\n    test(": "\n      }\n\n      // Mock user not found\n      mockQuery.mockResolvedValueOnce({ rows: [] })\n\n      const userResult = await mockQuery.mock.results[0].value\n      expect(userResult.rows.length).toBe(0)\n    })\n\n    test(",
    ",\n    data: {\n      from,\n      to,\n      userId\n    }\n  })\n}\n\n/**\n * Global error handler setup\n */\nexport function setupGlobalErrorHandling(): void {\n  // Handle unhandled promise rejections\n  if (typeof window !== ": ",\n    data: {\n      from,\n      to,\n      userId\n    }\n  })\n}\n\n/**\n * Global error handler setup\n */\nexport function setupGlobalErrorHandling(): void {\n  // Handle unhandled promise rejections\n  if (typeof window !== ",
    ")\n  \n  if (navigator.msSaveBlob) {\n    // IE 10+\n    navigator.msSaveBlob(blob, filename)\n  } else {\n    const url = URL.createObjectURL(blob)\n    link.href = url\n    link.download = filename\n    link.style.display = ": ")\n  \n  if (navigator.msSaveBlob) {\n    // IE 10+\n    navigator.msSaveBlob(blob, filename)\n  } else {\n    const url = URL.createObjectURL(blob)\n    link.href = url\n    link.download = filename\n    link.style.display = ",
    ")\n\n      const hashedPassword = await mockBcrypt.hash(password, saltRounds)\n      expect(hashedPassword).toMatch(/^\\$2a\\$12\\$/)\n      expect(mockBcrypt.hash).toHaveBeenCalledWith(password, saltRounds)\n    })\n\n    test(": ")\n\n      const hashedPassword = await mockBcrypt.hash(password, saltRounds)\n      expect(hashedPassword).toMatch(/^\\$2a\\$12\\$/)\n      expect(mockBcrypt.hash).toHaveBeenCalledWith(password, saltRounds)\n    })\n\n    test(",
    "\n      }\n\n      const result = validateCalculatorInput(inputWithProperty)\n\n      expect(result.isValid).toBe(false)\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ": "\n      }\n\n      const result = validateCalculatorInput(inputWithProperty)\n\n      expect(result.isValid).toBe(false)\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ",
    ",\n        },\n        body: JSON.stringify({ email, password }),\n      })\n\n      const data = await response.json()\n\n      if (data.success) {\n        // Redirect to calculator after successful login\n        router.push(": ",\n        },\n        body: JSON.stringify({ email, password }),\n      })\n\n      const data = await response.json()\n\n      if (data.success) {\n        // Redirect to calculator after successful login\n        router.push(",
    ")\n    } finally {\n      setSharingLoading(false)\n    }\n  }\n\n  const copyShareUrl = async () => {\n    try {\n      await navigator.clipboard.writeText(shareUrl)\n      // You could add a toast notification here\n      alert(": ")\n    } finally {\n      setSharingLoading(false)\n    }\n  }\n\n  const copyShareUrl = async () => {\n    try {\n      await navigator.clipboard.writeText(shareUrl)\n      // You could add a toast notification here\n      alert(",
    ">\n              🏘️ Property Information (Optional)\n            </CardTitle>\n            <SectionCompletionIndicator \n              formData={formData}\n              requiredFields={['propertyValue']}\n              color=": ">\n              🏘️ Property Information (Optional)\n            </CardTitle>\n            <SectionCompletionIndicator \n              formData={formData}\n              requiredFields={['propertyValue']}\n              color=",
    "t import any server-side modules\n\nexport interface DummyUser {\n  id: string\n  email: string\n  password: string\n  name: string\n  firstName: string\n  lastName: string\n}\n\nexport const DUMMY_USERS: DummyUser[] = [\n  {\n    id: ": "t import any server-side modules\n\nexport interface DummyUser {\n  id: string\n  email: string\n  password: string\n  name: string\n  firstName: string\n  lastName: string\n}\n\nexport const DUMMY_USERS: DummyUser[] = [\n  {\n    id: ",
    ")\n    await user.click(secondConfirmButton)\n\n    // Error should be handled gracefully\n    expect(mockClearDemoScenarios).toHaveBeenCalledTimes(1)\n    \n    // Success modal should not appear\n    expect(screen.queryByTestId(": ")\n    await user.click(secondConfirmButton)\n\n    // Error should be handled gracefully\n    expect(mockClearDemoScenarios).toHaveBeenCalledTimes(1)\n    \n    // Success modal should not appear\n    expect(screen.queryByTestId(",
    ") || []\n      setSelectedScenarios(preSelected.slice(0, 3)) // Max 3 scenarios\n    }\n  }, [session, searchParams, isDemoMode, loadScenarios])\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(": ") || []\n      setSelectedScenarios(preSelected.slice(0, 3)) // Max 3 scenarios\n    }\n  }, [session, searchParams, isDemoMode, loadScenarios])\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(",
    ">\n              💳 HELOC Information\n            </CardTitle>\n            <SectionCompletionIndicator \n              formData={formData}\n              requiredFields={['helocLimit', 'helocInterestRate']}\n              color=": ">\n              💳 HELOC Information\n            </CardTitle>\n            <SectionCompletionIndicator \n              formData={formData}\n              requiredFields={['helocLimit', 'helocInterestRate']}\n              color=",
    "\n              required\n              value={formData.monthlyExpenses || 0}\n              error={errors.monthlyExpenses}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=": "\n              required\n              value={formData.monthlyExpenses || 0}\n              error={errors.monthlyExpenses}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder=",
    ")\n      }\n\n      // Income validation\n      if (processedData.monthlyNetIncome && processedData.monthlyGrossIncome && processedData.monthlyNetIncome > processedData.monthlyGrossIncome) {\n        newErrors.monthlyNetIncome = ": ")\n      }\n\n      // Income validation\n      if (processedData.monthlyNetIncome && processedData.monthlyGrossIncome && processedData.monthlyNetIncome > processedData.monthlyGrossIncome) {\n        newErrors.monthlyNetIncome = ",
    ";\n    \n    return new Intl.NumberFormat(locale, options).format(value);\n  };\n\n  const formatDate = (date: Date, options?: Intl.DateTimeFormatOptions) => {\n    const defaultOptions: Intl.DateTimeFormatOptions = {\n      year: ": ";\n    \n    return new Intl.NumberFormat(locale, options).format(value);\n  };\n\n  const formatDate = (date: Date, options?: Intl.DateTimeFormatOptions) => {\n    const defaultOptions: Intl.DateTimeFormatOptions = {\n      year: ",
    ", { name: /calculate/i })\n      fireEvent.click(submitButton)\n\n      await waitFor(() => {\n        // Should have logged validation activity\n        expect(debugLogger.log).toHaveBeenCalled()\n      })\n    })\n  })\n\n  describe(": ", { name: /calculate/i })\n      fireEvent.click(submitButton)\n\n      await waitFor(() => {\n        // Should have logged validation activity\n        expect(debugLogger.log).toHaveBeenCalled()\n      })\n    })\n  })\n\n  describe(",
    ")\n\n  const rows = data.map(item => {\n    const values = columns\n      ? columns.map(col => {\n          const value = item[col.key]\n          // Handle special cases\n          if (value === null || value === undefined) return ": ")\n\n  const rows = data.map(item => {\n    const values = columns\n      ? columns.map(col => {\n          const value = item[col.key]\n          // Handle special cases\n          if (value === null || value === undefined) return ",
    ", `FastCalculatorForm input change: ${field}`, { value, type: typeof value })\n\n    let processedValue: string | number = value\n\n    // Handle string inputs - keep as string during typing for better UX\n    if (typeof value === ": ", `FastCalculatorForm input change: ${field}`, { value, type: typeof value })\n\n    let processedValue: string | number = value\n\n    // Handle string inputs - keep as string during typing for better UX\n    if (typeof value === ",
    " // Empty name\n      }\n\n      const result = validateCalculatorInput(invalidInput)\n\n      expect(result.isValid).toBe(false)\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ": " // Empty name\n      }\n\n      const result = validateCalculatorInput(invalidInput)\n\n      expect(result.isValid).toBe(false)\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ",
    ", err)\n    })\n  }\n  \n  return logs\n}\n\nexport function exportDebugData(): string {\n  const data = {\n    timestamp: new Date().toISOString(),\n    logs: debugLogger.getLogs(),\n    environment: {\n      userAgent: typeof window !== ": ", err)\n    })\n  }\n  \n  return logs\n}\n\nexport function exportDebugData(): string {\n  const data = {\n    timestamp: new Date().toISOString(),\n    logs: debugLogger.getLogs(),\n    environment: {\n      userAgent: typeof window !== ",
    ",\n          url: event.filename,\n          metadata: {\n            line: event.lineno,\n            column: event.colno\n          }\n        }\n      )\n    })\n  }\n\n  // Handle Node.js unhandled rejections\n  if (typeof process !== ": ",\n          url: event.filename,\n          metadata: {\n            line: event.lineno,\n            column: event.colno\n          }\n        }\n      )\n    })\n  }\n\n  // Handle Node.js unhandled rejections\n  if (typeof process !== ",
    "); // Should fail (threshold 4.5:1)\n      \n      // This specific combo should pass for large text but fail for normal\n      expect(result1.isAccessible).toBe(true);\n      expect(result2.isAccessible).toBe(false);\n    });\n\n    it(": "); // Should fail (threshold 4.5:1)\n      \n      // This specific combo should pass for large text but fail for normal\n      expect(result1.isAccessible).toBe(true);\n      expect(result2.isAccessible).toBe(false);\n    });\n\n    it(",
    "\n              }\n            </p>\n            {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n              <button\n                type=\"button\"\n                onClick={() => {\n                  handleInputChange(": "\n              }\n            </p>\n            {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n              <button\n                type=\"button\"\n                onClick={() => {\n                  handleInputChange(",
    ").reduce((acc, char) => acc + char.charCodeAt(0), 0) % DUMMY_USERS.length\n  const baseUser = DUMMY_USERS[userIndex]\n  \n  return {\n    id: `demo-user-${emailHash.slice(0, 8)}`,\n    email: email,\n    name: `Demo User (${email.split(": ").reduce((acc, char) => acc + char.charCodeAt(0), 0) % DUMMY_USERS.length\n  const baseUser = DUMMY_USERS[userIndex]\n  \n  return {\n    id: `demo-user-${emailHash.slice(0, 8)}`,\n    email: email,\n    name: `Demo User (${email.split(",
    ", userId?: string, ip?: string): void {\n    this.info(`Authentication: ${event}`, {\n      event,\n      userId,\n      ip\n    })\n  }\n\n  logCalculation(userId: string, calculationType: string, duration: number): void {\n    this.info(": ", userId?: string, ip?: string): void {\n    this.info(`Authentication: ${event}`, {\n      event,\n      userId,\n      ip\n    })\n  }\n\n  logCalculation(userId: string, calculationType: string, duration: number): void {\n    this.info(",
    ")\n          if (response.ok) {\n            const data = await response.json()\n            setAgents(data.data || [])\n            setFilteredAgents(data.data || [])\n          }\n        }\n      } catch (error) {\n        console.error(": ")\n          if (response.ok) {\n            const data = await response.json()\n            setAgents(data.data || [])\n            setFilteredAgents(data.data || [])\n          }\n        }\n      } catch (error) {\n        console.error(",
    ")) return `\"${value}\"`\n          if (value instanceof Date) return value.toISOString()\n          return String(value)\n        })\n      : Object.values(item).map(value => {\n          if (value === null || value === undefined) return ": ")) return `\"${value}\"`\n          if (value instanceof Date) return value.toISOString()\n          return String(value)\n        })\n      : Object.values(item).map(value => {\n          if (value === null || value === undefined) return ",
    ",\n          },\n          body: JSON.stringify(profileForm)\n        })\n\n        const data = await response.json()\n        if (data.success) {\n          setProfile(prev => prev ? { ...prev, ...data.data } : null)\n          setSuccess(": ",\n          },\n          body: JSON.stringify(profileForm)\n        })\n\n        const data = await response.json()\n        if (data.success) {\n          setProfile(prev => prev ? { ...prev, ...data.data } : null)\n          setSuccess(",
    "\n                >\n                  Switch to {useYearsInput ? 'months' : 'years'}\n                </button>\n              </div>\n              {useYearsInput ? (\n                <>\n                  <input\n                    type=": "\n                >\n                  Switch to {useYearsInput ? 'months' : 'years'}\n                </button>\n              </div>\n              {useYearsInput ? (\n                <>\n                  <input\n                    type=",
    ",\n    data: {\n      action,\n      userId,\n      ...metadata\n    }\n  })\n}\n\n/**\n * Navigation tracking\n */\nexport function trackNavigation(from: string, to: string, userId?: string): void {\n  errorTracker.addBreadcrumb({\n    category: ": ",\n    data: {\n      action,\n      userId,\n      ...metadata\n    }\n  })\n}\n\n/**\n * Navigation tracking\n */\nexport function trackNavigation(from: string, to: string, userId?: string): void {\n  errorTracker.addBreadcrumb({\n    category: ",
    "s current value</li>\n        <li>Should be between $1,000 and $10,000,000</li>\n      </ul>\n    </div>\n  `,\n  currentInterestRate: `\n    <div class=\"space-y-2\">\n      <p><strong>Current Interest Rate</strong></p>\n      <p>Your mortgage": "s current value</li>\n        <li>Should be between $1,000 and $10,000,000</li>\n      </ul>\n    </div>\n  `,\n  currentInterestRate: `\n    <div class=\"space-y-2\">\n      <p><strong>Current Interest Rate</strong></p>\n      <p>Your mortgage",
    "\n        \n        if (isDemoMode) {\n          // Load demo data\n          const demoAgents = getDemoActiveAgents()\n          setAgents(demoAgents)\n\n          // Create demo users\n          const demoUsers: User[] = [\n            { id: ": "\n        \n        if (isDemoMode) {\n          // Load demo data\n          const demoAgents = getDemoActiveAgents()\n          setAgents(demoAgents)\n\n          // Create demo users\n          const demoUsers: User[] = [\n            { id: ",
    " ? 4.5 : 7\n  };\n  \n  const isAccessible = ratio >= thresholds[level];\n  const meetsAA = ratio >= thresholds.AA;\n  const meetsAAA = ratio >= thresholds.AAA;\n  \n  let achievedLevel: WCAGLevel | null = null;\n  if (meetsAAA) achievedLevel = ": " ? 4.5 : 7\n  };\n  \n  const isAccessible = ratio >= thresholds[level];\n  const meetsAA = ratio >= thresholds.AA;\n  const meetsAAA = ratio >= thresholds.AAA;\n  \n  let achievedLevel: WCAGLevel | null = null;\n  if (meetsAAA) achievedLevel = ",
    " ? parseFloat(value) : value\n\n  if (isNaN(numValue)) {\n    errors.push({\n      field: fieldName,\n      message: `Please enter a valid percentage (e.g., 6.5 for 6.5%)`\n    })\n    return errors\n  }\n\n  // Convert percentage to decimal if it": " ? parseFloat(value) : value\n\n  if (isNaN(numValue)) {\n    errors.push({\n      field: fieldName,\n      message: `Please enter a valid percentage (e.g., 6.5 for 6.5%)`\n    })\n    return errors\n  }\n\n  // Convert percentage to decimal if it",
    ", async () => {\n    // Test large storage usage\n    mockGetStorageInfo.mockReturnValue({\n      used: 2 * 1024 * 1024, // 2MB\n      available: true\n    })\n\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByText(": ", async () => {\n    // Test large storage usage\n    mockGetStorageInfo.mockReturnValue({\n      used: 2 * 1024 * 1024, // 2MB\n      available: true\n    })\n\n    render(<Dashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByText(",
    ") {\n    window.print()\n  }\n}\n\n/**\n * Generates a filename for the report based on current date\n */\nexport function generateReportFilename(scenarioName?: string): string {\n  const date = new Date()\n  const dateStr = date.toISOString().split(": ") {\n    window.print()\n  }\n}\n\n/**\n * Generates a filename for the report based on current date\n */\nexport function generateReportFilename(scenarioName?: string): string {\n  const date = new Date()\n  const dateStr = date.toISOString().split(",
    " ? LogLevel.WARN : LogLevel.INFO\n    \n    this.log(level, `Security Event: ${event}`, {\n      severity,\n      ...details\n    })\n  }\n\n  logPerformance(operation: string, duration: number, metadata?: Record<string, any>): void {\n    this.info(": " ? LogLevel.WARN : LogLevel.INFO\n    \n    this.log(level, `Security Event: ${event}`, {\n      severity,\n      ...details\n    })\n  }\n\n  logPerformance(operation: string, duration: number, metadata?: Record<string, any>): void {\n    this.info(",
    "\n    ];\n    \n    dangerousCombinations.forEach(combination => {\n      const result = validateTailwindCombination(combination);\n      expect(result.isValid).toBe(false);\n      expect(result.issues).toHaveLength(1);\n    });\n  });\n});\n\ndescribe(": "\n    ];\n    \n    dangerousCombinations.forEach(combination => {\n      const result = validateTailwindCombination(combination);\n      expect(result.isValid).toBe(false);\n      expect(result.issues).toHaveLength(1);\n    });\n  });\n});\n\ndescribe(",
    ")\n    await user.click(secondConfirmButton)\n\n    // Verify clearDemoScenarios was called\n    expect(mockClearDemoScenarios).toHaveBeenCalledTimes(1)\n\n    // Success modal should appear\n    await waitFor(() => {\n      expect(screen.getByTestId(": ")\n    await user.click(secondConfirmButton)\n\n    // Verify clearDemoScenarios was called\n    expect(mockClearDemoScenarios).toHaveBeenCalledTimes(1)\n\n    // Success modal should appear\n    await waitFor(() => {\n      expect(screen.getByTestId(",
    ",\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          csrfToken: await getCsrfToken(),\n        }),\n      })\n\n      if (response.ok) {\n        // If login successful, redirect\n        window.location.href = ": ",\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          csrfToken: await getCsrfToken(),\n        }),\n      })\n\n      if (response.ok) {\n        // If login successful, redirect\n        window.location.href = ",
    "\n                }\n              </p>\n              {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    handleInputChange(": "\n                }\n              </p>\n              {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    handleInputChange(",
    "),\n      paramCount: params?.length || 0\n    }\n  })\n}\n\n/**\n * Authentication error handler\n */\nexport function captureAuthError(error: Error, action: string, userId?: string): string {\n  return errorTracker.captureError(error, {\n    component: ": "),\n      paramCount: params?.length || 0\n    }\n  })\n}\n\n/**\n * Authentication error handler\n */\nexport function captureAuthError(error: Error, action: string, userId?: string): string {\n  return errorTracker.captureError(error, {\n    component: ",
    "\n                  />\n                  {/* Admin link for demo mode or admin users */}\n                  {(isDemoMode || session?.user?.email === 'admin@helocaccelerator.com') && (\n                    <NavigationLink\n                      href=": "\n                  />\n                  {/* Admin link for demo mode or admin users */}\n                  {(isDemoMode || session?.user?.email === 'admin@helocaccelerator.com') && (\n                    <NavigationLink\n                      href=",
    " && content.length <= maxLength\n}\n\n/**\n * Validate file upload\n */\nexport function validateFileUpload(file: File, allowedTypes: string[], maxSize: number): {\n  valid: boolean\n  error?: string\n} {\n  if (!file) {\n    return { valid: false, error: ": " && content.length <= maxLength\n}\n\n/**\n * Validate file upload\n */\nexport function validateFileUpload(file: File, allowedTypes: string[], maxSize: number): {\n  valid: boolean\n  error?: string\n} {\n  if (!file) {\n    return { valid: false, error: ",
    " });\n      \n      // Test focus\n      button.focus();\n      expect(button).toHaveFocus();\n      \n      // Test axe for keyboard accessibility\n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it(": " });\n      \n      // Test focus\n      button.focus();\n      expect(button).toHaveFocus();\n      \n      // Test axe for keyboard accessibility\n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it(",
    " },\n                    ]}\n                    helperText=\"Select one option from the list\"\n                  />\n                  <Select\n                    label=\"Select with Error\"\n                    options={[\n                      { value: ": " },\n                    ]}\n                    helperText=\"Select one option from the list\"\n                  />\n                  <Select\n                    label=\"Select with Error\"\n                    options={[\n                      { value: ",
    "\n      } else {\n        current += char\n      }\n    }\n    values.push(current.trim())\n\n    // Create object from headers and values\n    const obj: Record<string, any> = {}\n    headers.forEach((header, index) => {\n      let value = values[index] || ": "\n      } else {\n        current += char\n      }\n    }\n    values.push(current.trim())\n\n    // Create object from headers and values\n    const obj: Record<string, any> = {}\n    headers.forEach((header, index) => {\n      let value = values[index] || ",
    " : String(value));\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    onBlur(field);\n    if (value && value !== 0) {\n      setDisplayValue(formatNumberWithCommas(value));\n    }\n  };\n\n  const isEmpty = !value || value === 0 || value === ": " : String(value));\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    onBlur(field);\n    if (value && value !== 0) {\n      setDisplayValue(formatNumberWithCommas(value));\n    }\n  };\n\n  const isEmpty = !value || value === 0 || value === ",
    ", () => {\n      const white = { r: 255, g: 255, b: 255 };\n      const black = { r: 0, g: 0, b: 0 };\n      \n      const ratio = getContrastRatio(white, black);\n      expect(ratio).toBeCloseTo(21, 0); // Maximum possible contrast ratio\n    });\n\n    it(": ", () => {\n      const white = { r: 255, g: 255, b: 255 };\n      const black = { r: 0, g: 0, b: 0 };\n      \n      const ratio = getContrastRatio(white, black);\n      expect(ratio).toBeCloseTo(21, 0); // Maximum possible contrast ratio\n    });\n\n    it(",
    " && window.console) {\n      const args = [`${prefix} ${log.message}`]\n      if (formattedData !== undefined) args.push(formattedData)\n      if (formattedStackTrace !== undefined) args.push(formattedStackTrace)\n\n      switch (log.level) {\n        case ": " && window.console) {\n      const args = [`${prefix} ${log.message}`]\n      if (formattedData !== undefined) args.push(formattedData)\n      if (formattedStackTrace !== undefined) args.push(formattedStackTrace)\n\n      switch (log.level) {\n        case ",
    ");\n    \n    // Skip link should be hidden by default but become visible on focus\n    skipLink.focus();\n    expect(skipLink).toHaveFocus();\n    \n    const results = await axe(document.body);\n    expect(results).toHaveNoViolations();\n  });\n});\n\ndescribe(": ");\n    \n    // Skip link should be hidden by default but become visible on focus\n    skipLink.focus();\n    expect(skipLink).toHaveFocus();\n    \n    const results = await axe(document.body);\n    expect(results).toHaveNoViolations();\n  });\n});\n\ndescribe(",
    ",\n          is_public: false,\n          public_share_token: null\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockScenario] })\n        mockQuery.mockResolvedValueOnce({ rows: [] }) // Update query\n\n        const request = new NextRequest(": ",\n          is_public: false,\n          public_share_token: null\n        }\n\n        mockQuery.mockResolvedValueOnce({ rows: [mockScenario] })\n        mockQuery.mockResolvedValueOnce({ rows: [] }) // Update query\n\n        const request = new NextRequest(",
    ")\n\n      // Update local state\n      setScenarios([])\n      setSelectedForComparison([])\n\n      // Close second confirmation and show success\n      setShowSecondConfirmation(false)\n      setShowSuccessModal(true)\n    } catch (err) {\n      console.error(": ")\n\n      // Update local state\n      setScenarios([])\n      setSelectedForComparison([])\n\n      // Close second confirmation and show success\n      setShowSecondConfirmation(false)\n      setShowSuccessModal(true)\n    } catch (err) {\n      console.error(",
    ", scenarios.length)\n  \n  const newScenario: DemoScenario = {\n    ...scenario,\n    id: `demo-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n  \n  console.log(": ", scenarios.length)\n  \n  const newScenario: DemoScenario = {\n    ...scenario,\n    id: `demo-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n  \n  console.log(",
    "}\n\nHELOC Details:\n- Credit Limit: ${formatCurrency(formData.helocLimit)}\n- Interest Rate: ${formatPercent(formData.helocInterestRate)}\n${formData.helocAvailableCredit !== undefined ? `- Available Credit: ${formatCurrency(formData.helocAvailableCredit)}` : ": "}\n\nHELOC Details:\n- Credit Limit: ${formatCurrency(formData.helocLimit)}\n- Interest Rate: ${formatPercent(formData.helocInterestRate)}\n${formData.helocAvailableCredit !== undefined ? `- Available Credit: ${formatCurrency(formData.helocAvailableCredit)}` : ",
    ",\n            assignedAt: new Date()\n          }\n\n          if (existingIndex >= 0) {\n            assignmentData[existingIndex] = assignment\n          } else {\n            assignmentData.push(assignment)\n          }\n        })\n\n        localStorage.setItem(": ",\n            assignedAt: new Date()\n          }\n\n          if (existingIndex >= 0) {\n            assignmentData[existingIndex] = assignment\n          } else {\n            assignmentData.push(assignment)\n          }\n        })\n\n        localStorage.setItem(",
    "\n        \n        if (isDemoMode) {\n          const demoAgents = getDemoAgents()\n          setAgents(demoAgents)\n          setFilteredAgents(demoAgents)\n        } else {\n          // In production, would fetch from API\n          const response = await fetch(": "\n        \n        if (isDemoMode) {\n          const demoAgents = getDemoAgents()\n          setAgents(demoAgents)\n          setFilteredAgents(demoAgents)\n        } else {\n          // In production, would fetch from API\n          const response = await fetch(",
    ">\n              💰 Monthly Income & Expenses\n            </CardTitle>\n            <SectionCompletionIndicator \n              formData={formData}\n              requiredFields={['monthlyGrossIncome', 'monthlyNetIncome', 'monthlyExpenses']}\n              color=": ">\n              💰 Monthly Income & Expenses\n            </CardTitle>\n            <SectionCompletionIndicator \n              formData={formData}\n              requiredFields={['monthlyGrossIncome', 'monthlyNetIncome', 'monthlyExpenses']}\n              color=",
    "\n\n      mockBcrypt.compare.mockResolvedValueOnce(true)\n\n      const isValid = await mockBcrypt.compare(password, hashedPassword)\n      expect(isValid).toBe(true)\n      expect(mockBcrypt.compare).toHaveBeenCalledWith(password, hashedPassword)\n    })\n\n    test(": "\n\n      mockBcrypt.compare.mockResolvedValueOnce(true)\n\n      const isValid = await mockBcrypt.compare(password, hashedPassword)\n      expect(isValid).toBe(true)\n      expect(mockBcrypt.compare).toHaveBeenCalledWith(password, hashedPassword)\n    })\n\n    test(",
    "\n  \n  return `${baseName}-${dateStr}.pdf`\n}\n\n/**\n * Creates a temporary print-only page with the report content\n * This allows printing just the report without other page elements\n */\nexport function printReportInNewWindow(reportHTML: string, title: string = ": "\n  \n  return `${baseName}-${dateStr}.pdf`\n}\n\n/**\n * Creates a temporary print-only page with the report content\n * This allows printing just the report without other page elements\n */\nexport function printReportInNewWindow(reportHTML: string, title: string = ",
    ", {\n          headers: new Headers()\n        })\n        const response = await getProfile(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.email).toBe(": ", {\n          headers: new Headers()\n        })\n        const response = await getProfile(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.email).toBe(",
    "}/shared/${scenario.public_share_token}`\n      : null\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        isPublic: scenario.is_public,\n        shareUrl,\n        shareToken: scenario.public_share_token\n      },\n      message: ": "}/shared/${scenario.public_share_token}`\n      : null\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        isPublic: scenario.is_public,\n        shareUrl,\n        shareToken: scenario.public_share_token\n      },\n      message: ",
    ")\n    }\n  }, [session, status, router, isDemoMode])\n\n  const loadProfile = useCallback(async () => {\n    try {\n      setLoading(true)\n      \n      if (isDemoMode) {\n        // In demo mode, create mock profile data\n        const demoUser = session?.user || { id: ": ")\n    }\n  }, [session, status, router, isDemoMode])\n\n  const loadProfile = useCallback(async () => {\n    try {\n      setLoading(true)\n      \n      if (isDemoMode) {\n        // In demo mode, create mock profile data\n        const demoUser = session?.user || { id: ",
    ", async () => {\n      const onDismiss = jest.fn();\n      \n      const { container } = render(\n        <Alert variant=\"info\" dismissible onDismiss={onDismiss}>\n          Dismissible alert\n        </Alert>\n      );\n      \n      const dismissButton = screen.getByRole(": ", async () => {\n      const onDismiss = jest.fn();\n      \n      const { container } = render(\n        <Alert variant=\"info\" dismissible onDismiss={onDismiss}>\n          Dismissible alert\n        </Alert>\n      );\n      \n      const dismissButton = screen.getByRole(",
    ")}`);\n    }\n  }\n  \n  // Check if combination is pre-validated\n  if (!isSafeCombination(bg, text)) {\n    const safeOptions = getSafeTextColors(bg);\n    if (safeOptions.length > 0) {\n      suggestions.push(`Consider using these tested combinations: ${safeOptions.join(": ")}`);\n    }\n  }\n  \n  // Check if combination is pre-validated\n  if (!isSafeCombination(bg, text)) {\n    const safeOptions = getSafeTextColors(bg);\n    if (safeOptions.length > 0) {\n      suggestions.push(`Consider using these tested combinations: ${safeOptions.join(",
    ", error, {\n      errorId,\n      fingerprint: errorReport.fingerprint,\n      severity: errorReport.severity,\n      tags: errorReport.tags,\n      context: fullContext\n    })\n\n    // Send to external error tracking service in production\n    if (process.env.NODE_ENV === ": ", error, {\n      errorId,\n      fingerprint: errorReport.fingerprint,\n      severity: errorReport.severity,\n      tags: errorReport.tags,\n      context: fullContext\n    })\n\n    // Send to external error tracking service in production\n    if (process.env.NODE_ENV === ",
    ", {\n            provided: processedData.monthlyDiscretionaryIncome,\n            calculated: calculatedDiscretionary,\n            difference: Math.abs(processedData.monthlyDiscretionaryIncome - calculatedDiscretionary)\n          })\n        }\n      }\n\n      addDebugLog(": ", {\n            provided: processedData.monthlyDiscretionaryIncome,\n            calculated: calculatedDiscretionary,\n            difference: Math.abs(processedData.monthlyDiscretionaryIncome - calculatedDiscretionary)\n          })\n        }\n      }\n\n      addDebugLog(",
    ",\n          body: JSON.stringify(updateData)\n        })\n\n        const response = await updateProfile(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(409)\n        expect(data.success).toBe(false)\n        expect(data.error).toBe(": ",\n          body: JSON.stringify(updateData)\n        })\n\n        const response = await updateProfile(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(409)\n        expect(data.success).toBe(false)\n        expect(data.error).toBe(",
    "]\n  const allowedAttributes: string[] = []\n  \n  // Remove all HTML tags except allowed ones\n  let sanitized = input.replace(/<\\/?([a-zA-Z][a-zA-Z0-9]*)\\b[^<>]*>/gi, (match, tag) => {\n    if (allowedTags.includes(tag.toLowerCase())) {\n      return match\n    }\n    return ": "]\n  const allowedAttributes: string[] = []\n  \n  // Remove all HTML tags except allowed ones\n  let sanitized = input.replace(/<\\/?([a-zA-Z][a-zA-Z0-9]*)\\b[^<>]*>/gi, (match, tag) => {\n    if (allowedTags.includes(tag.toLowerCase())) {\n      return match\n    }\n    return ",
    ",\n          body: JSON.stringify(invalidData)\n        })\n\n        const response = await updateProfile(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(400)\n        expect(data.success).toBe(false)\n        expect(data.error).toBe(": ",\n          body: JSON.stringify(invalidData)\n        })\n\n        const response = await updateProfile(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(400)\n        expect(data.success).toBe(false)\n        expect(data.error).toBe(",
    ", {\n        headers\n      })\n\n      // Test requireAuth middleware - commented out as middleware not available in test environment\n      // const result = requireAuth(request)\n      // expect(result).toEqual(mockUser)\n      // expect(mockJwt.verify).toHaveBeenCalledWith(": ", {\n        headers\n      })\n\n      // Test requireAuth middleware - commented out as middleware not available in test environment\n      // const result = requireAuth(request)\n      // expect(result).toEqual(mockUser)\n      // expect(mockJwt.verify).toHaveBeenCalledWith(",
    ",\n          body: JSON.stringify(passwordData)\n        })\n\n        const response = await changePassword(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(400)\n        expect(data.success).toBe(false)\n        expect(data.error).toBe(": ",\n          body: JSON.stringify(passwordData)\n        })\n\n        const response = await changePassword(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(400)\n        expect(data.success).toBe(false)\n        expect(data.error).toBe(",
    ",\n          body: JSON.stringify(passwordData)\n        })\n\n        const response = await changePassword(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.message).toBe(": ",\n          body: JSON.stringify(passwordData)\n        })\n\n        const response = await changePassword(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.message).toBe(",
    ")\n        }\n      }\n\n      // Remove from local state\n      setScenarios(prev => prev.filter(s => s.id !== scenarioToDelete))\n\n      // Close modal and reset state\n      setShowDeleteConfirmation(false)\n      setScenarioToDelete(null)\n    } catch (err) {\n      console.error(": ")\n        }\n      }\n\n      // Remove from local state\n      setScenarios(prev => prev.filter(s => s.id !== scenarioToDelete))\n\n      // Close modal and reset state\n      setShowDeleteConfirmation(false)\n      setScenarioToDelete(null)\n    } catch (err) {\n      console.error(",
    " },\n                    ]}\n                    error=\"Please select an option\"\n                  />\n                </div>\n                <CodeBlock\n                  title=\"select-examples\"\n                  code={`<Select\n  label=\"Select Option\"\n  options={[\n    { value: ": " },\n                    ]}\n                    error=\"Please select an option\"\n                  />\n                </div>\n                <CodeBlock\n                  title=\"select-examples\"\n                  code={`<Select\n  label=\"Select Option\"\n  options={[\n    { value: ",
    ");\n    if (parts.length >= 2) {\n      return `${parts[0][0]}${parts[1][0]}`.toUpperCase();\n    }\n    return name.slice(0, 2).toUpperCase();\n  };\n\n  const handleSignOut = async () => {\n    await signOutAction();\n  };\n\n  const dropdownItems: DropdownItem[] = [\n    {\n      id: ": ");\n    if (parts.length >= 2) {\n      return `${parts[0][0]}${parts[1][0]}`.toUpperCase();\n    }\n    return name.slice(0, 2).toUpperCase();\n  };\n\n  const handleSignOut = async () => {\n    await signOutAction();\n  };\n\n  const dropdownItems: DropdownItem[] = [\n    {\n      id: ",
    ",\n          body: JSON.stringify(invalidData)\n        })\n\n        const response = await createScenario(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(400)\n        expect(data.success).toBe(false)\n        expect(data.error).toContain(": ",\n          body: JSON.stringify(invalidData)\n        })\n\n        const response = await createScenario(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(400)\n        expect(data.success).toBe(false)\n        expect(data.error).toContain(",
    ",\n          body: JSON.stringify(updateData)\n        })\n\n        const response = await updateProfile(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.firstName).toBe(": ",\n          body: JSON.stringify(updateData)\n        })\n\n        const response = await updateProfile(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(200)\n        expect(data.success).toBe(true)\n        expect(data.data.firstName).toBe(",
    ",\n          body: JSON.stringify(passwordData)\n        })\n\n        const response = await changePassword(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(400)\n        expect(data.success).toBe(false)\n        expect(data.error).toContain(": ",\n          body: JSON.stringify(passwordData)\n        })\n\n        const response = await changePassword(request)\n        const data = await response.json()\n\n        expect(response.status).toBe(400)\n        expect(data.success).toBe(false)\n        expect(data.error).toContain(",
    ") {\n    const response = new NextResponse(null, { status: 200 })\n    \n    if (options.corsConfig) {\n      applyCORSHeaders(request, response, options.corsConfig)\n    }\n    \n    return response\n  }\n  \n  // CSRF protection for state-changing methods\n  if (options.requireCSRF && [": ") {\n    const response = new NextResponse(null, { status: 200 })\n    \n    if (options.corsConfig) {\n      applyCORSHeaders(request, response, options.corsConfig)\n    }\n    \n    return response\n  }\n  \n  // CSRF protection for state-changing methods\n  if (options.requireCSRF && [",
    ", async () => {\n      const mockOnSubmit = jest.fn()\n      render(<FastCalculatorForm onSubmit={mockOnSubmit} />)\n\n      // Set up scenario that should trigger validation error\n      fireEvent.change(screen.getByLabelText(/current mortgage balance/i), { \n        target: { value: ": ", async () => {\n      const mockOnSubmit = jest.fn()\n      render(<FastCalculatorForm onSubmit={mockOnSubmit} />)\n\n      // Set up scenario that should trigger validation error\n      fireEvent.change(screen.getByLabelText(/current mortgage balance/i), { \n        target: { value: ",
    ",\n    action,\n    userId,\n    metadata: {\n      authAction: action\n    }\n  })\n}\n\n/**\n * Calculation error handler\n */\nexport function captureCalculationError(error: Error, calculationType: string, inputs?: any): string {\n  return errorTracker.captureError(error, {\n    component: ": ",\n    action,\n    userId,\n    metadata: {\n      authAction: action\n    }\n  })\n}\n\n/**\n * Calculation error handler\n */\nexport function captureCalculationError(error: Error, calculationType: string, inputs?: any): string {\n  return errorTracker.captureError(error, {\n    component: ",
    ")\n    \n    if (sanitizedKey.length > 0) {\n      sanitized[sanitizedKey] = sanitizeObjectKeys(value)\n    }\n  }\n  \n  return sanitized\n}\n\n/**\n * Validate content length\n */\nexport function validateContentLength(content: string, maxLength: number): boolean {\n  return typeof content === ": ")\n    \n    if (sanitizedKey.length > 0) {\n      sanitized[sanitizedKey] = sanitizeObjectKeys(value)\n    }\n  }\n  \n  return sanitized\n}\n\n/**\n * Validate content length\n */\nexport function validateContentLength(content: string, maxLength: number): boolean {\n  return typeof content === ",
    ",\n          },\n          body: JSON.stringify({\n            userIds: selectedUsers,\n            agentId: selectedAgentId\n          }),\n        })\n\n        if (response.ok) {\n          // Reload assignments\n          window.location.reload()\n        } else {\n          throw new Error(": ",\n          },\n          body: JSON.stringify({\n            userIds: selectedUsers,\n            agentId: selectedAgentId\n          }),\n        })\n\n        if (response.ok) {\n          // Reload assignments\n          window.location.reload()\n        } else {\n          throw new Error(",
    "\n      ]\n\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n\n      invalidEmails.forEach(email => {\n        expect(emailRegex.test(email)).toBe(false)\n      })\n\n      validEmails.forEach(email => {\n        expect(emailRegex.test(email)).toBe(true)\n      })\n    })\n  })\n\n  describe(": "\n      ]\n\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n\n      invalidEmails.forEach(email => {\n        expect(emailRegex.test(email)).toBe(false)\n      })\n\n      validEmails.forEach(email => {\n        expect(emailRegex.test(email)).toBe(true)\n      })\n    })\n  })\n\n  describe(",
    "\n                      }\n                    </p>\n                    {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          handleInputChange(": "\n                      }\n                    </p>\n                    {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          handleInputChange(",
    "] as const;\n      \n      for (const variant of variants) {\n        const { container } = render(\n          <Badge variant={variant}>Test Badge</Badge>\n        );\n        \n        const results = await axe(container);\n        expect(results).toHaveNoViolations();\n      }\n    });\n\n    it(": "] as const;\n      \n      for (const variant of variants) {\n        const { container } = render(\n          <Badge variant={variant}>Test Badge</Badge>\n        );\n        \n        const results = await axe(container);\n        expect(results).toHaveNoViolations();\n      }\n    });\n\n    it(",
    "\n    },\n    max: {\n      value: VALIDATION_RULES.expenses.max,\n      message: `Maximum expenses is $${VALIDATION_RULES.expenses.max.toLocaleString()}`\n    },\n    validate: {\n      reasonable: (value: string, formValues: any) => {\n        const expenses = parseFloat(value.replace(/[,$]/g, ": "\n    },\n    max: {\n      value: VALIDATION_RULES.expenses.max,\n      message: `Maximum expenses is $${VALIDATION_RULES.expenses.max.toLocaleString()}`\n    },\n    validate: {\n      reasonable: (value: string, formValues: any) => {\n        const expenses = parseFloat(value.replace(/[,$]/g, ",
    ", () => {\n      const whiteLum = getLuminance({ r: 255, g: 255, b: 255 });\n      const blackLum = getLuminance({ r: 0, g: 0, b: 0 });\n      \n      expect(whiteLum).toBeCloseTo(1, 5);\n      expect(blackLum).toBeCloseTo(0, 5);\n      expect(whiteLum).toBeGreaterThan(blackLum);\n    });\n\n    it(": ", () => {\n      const whiteLum = getLuminance({ r: 255, g: 255, b: 255 });\n      const blackLum = getLuminance({ r: 0, g: 0, b: 0 });\n      \n      expect(whiteLum).toBeCloseTo(1, 5);\n      expect(blackLum).toBeCloseTo(0, 5);\n      expect(whiteLum).toBeGreaterThan(blackLum);\n    });\n\n    it(",
    ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n      ...options\n    };\n\n    return new Intl.NumberFormat(locale, formatOptions).format(value);\n  };\n\n  const formatPercentage = (value: number | undefined, decimals = 2) => {\n    if (value === undefined || value === 0) return ": ",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n      ...options\n    };\n\n    return new Intl.NumberFormat(locale, formatOptions).format(value);\n  };\n\n  const formatPercentage = (value: number | undefined, decimals = 2) => {\n    if (value === undefined || value === 0) return ",
    "\n\n        // If we have both mortgage balance and property value, validate based on LTV\n        if (mortgageBalance > 0 && propertyValue > 0) {\n          try {\n            const ltvRatio = calculateLTV(mortgageBalance, propertyValue)\n\n            // If LTV > 80% and no PMI provided, suggest it": "\n\n        // If we have both mortgage balance and property value, validate based on LTV\n        if (mortgageBalance > 0 && propertyValue > 0) {\n          try {\n            const ltvRatio = calculateLTV(mortgageBalance, propertyValue)\n\n            // If LTV > 80% and no PMI provided, suggest it",
    "})`;\n  \n  return WrappedComponent;\n}\n\n// Form context for easier form state access\nexport const FormContext = React.createContext<UseFormValidationReturn | null>(null);\n\nexport const useFormContext = () => {\n  const context = React.useContext(FormContext);\n  if (!context) {\n    throw new Error(": "})`;\n  \n  return WrappedComponent;\n}\n\n// Form context for easier form state access\nexport const FormContext = React.createContext<UseFormValidationReturn | null>(null);\n\nexport const useFormContext = () => {\n  const context = React.useContext(FormContext);\n  if (!context) {\n    throw new Error(",
    ")\n                  navigator.clipboard.writeText(logText).then(() => {\n                    // Temporarily show copied feedback\n                    const btn = document.activeElement as HTMLButtonElement\n                    const originalText = btn.textContent\n                    btn.textContent = ": ")\n                  navigator.clipboard.writeText(logText).then(() => {\n                    // Temporarily show copied feedback\n                    const btn = document.activeElement as HTMLButtonElement\n                    const originalText = btn.textContent\n                    btn.textContent = ",
    "}\n        error={form.touched[name] ? form.errors[name] : null}\n        onChange={form.handleChange(name)}\n        onBlur={form.handleBlur(name)}\n        {...(componentProps as T)}\n      />\n    );\n  });\n  \n  WrappedComponent.displayName = `WithFormField(${Component.displayName || Component.name || ": "}\n        error={form.touched[name] ? form.errors[name] : null}\n        onChange={form.handleChange(name)}\n        onBlur={form.handleBlur(name)}\n        {...(componentProps as T)}\n      />\n    );\n  });\n  \n  WrappedComponent.displayName = `WithFormField(${Component.displayName || Component.name || ",
    ")\n    }\n  }, [session, status, router, isDemoMode])\n\n  const loadScenarios = useCallback(async () => {\n    try {\n      setLoading(true)\n\n      if (isDemoMode) {\n        // Load from localStorage in demo mode\n        const userId = getUserId()\n        const demoScenarios = getDemoScenarios(userId || ": ")\n    }\n  }, [session, status, router, isDemoMode])\n\n  const loadScenarios = useCallback(async () => {\n    try {\n      setLoading(true)\n\n      if (isDemoMode) {\n        // Load from localStorage in demo mode\n        const userId = getUserId()\n        const demoScenarios = getDemoScenarios(userId || ",
    ", () => {\n      const color1 = { r: 255, g: 255, b: 255 };\n      const color2 = { r: 128, g: 128, b: 128 };\n      \n      const ratio1 = getContrastRatio(color1, color2);\n      const ratio2 = getContrastRatio(color2, color1);\n      \n      expect(ratio1).toBeCloseTo(ratio2, 5);\n    });\n  });\n});\n\ndescribe(": ", () => {\n      const color1 = { r: 255, g: 255, b: 255 };\n      const color2 = { r: 128, g: 128, b: 128 };\n      \n      const ratio1 = getContrastRatio(color1, color2);\n      const ratio2 = getContrastRatio(color2, color1);\n      \n      expect(ratio1).toBeCloseTo(ratio2, 5);\n    });\n  });\n});\n\ndescribe(",
    ", disabled: true },\n                    ]}\n                    defaultValue=\"option1\"\n                  />\n                </div>\n                <CodeBlock\n                  title=\"radio-examples\"\n                  code={`<RadioGroup\n  name=\"example-radio\"\n  label=\"Choose an option\"\n  options={[\n    { value: ": ", disabled: true },\n                    ]}\n                    defaultValue=\"option1\"\n                  />\n                </div>\n                <CodeBlock\n                  title=\"radio-examples\"\n                  code={`<RadioGroup\n  name=\"example-radio\"\n  label=\"Choose an option\"\n  options={[\n    { value: ",
    ", () => {\n      const now = Math.floor(Date.now() / 1000)\n      const expiredToken = { exp: now - 3600 } // Expired 1 hour ago\n      const validToken = { exp: now + 3600 } // Expires in 1 hour\n\n      expect(expiredToken.exp < now).toBe(true)\n      expect(validToken.exp > now).toBe(true)\n    })\n  })\n\n  describe(": ", () => {\n      const now = Math.floor(Date.now() / 1000)\n      const expiredToken = { exp: now - 3600 } // Expired 1 hour ago\n      const validToken = { exp: now + 3600 } // Expires in 1 hour\n\n      expect(expiredToken.exp < now).toBe(true)\n      expect(validToken.exp > now).toBe(true)\n    })\n  })\n\n  describe(",
    "]): DebugLog[] {\n    let filteredLogs = this.logs\n\n    if (category) {\n      filteredLogs = filteredLogs.filter(log => log.category === category)\n    }\n\n    if (level) {\n      filteredLogs = filteredLogs.filter(log => log.level === level)\n    }\n\n    return filteredLogs\n  }\n\n  getFormattedLogs(category?: DebugLog[": "]): DebugLog[] {\n    let filteredLogs = this.logs\n\n    if (category) {\n      filteredLogs = filteredLogs.filter(log => log.category === category)\n    }\n\n    if (level) {\n      filteredLogs = filteredLogs.filter(log => log.level === level)\n    }\n\n    return filteredLogs\n  }\n\n  getFormattedLogs(category?: DebugLog[",
    "\n\n  // Get user ID for demo storage (use session user email hash or fallback to demo user)\n  const getUserId = useCallback(() => {\n    if (isDemoMode) {\n      if (session?.user?.email) {\n        // Create consistent user ID from email\n        const emailHash = session.user.email.toLowerCase().replace(/[^a-z0-9]/g, ": "\n\n  // Get user ID for demo storage (use session user email hash or fallback to demo user)\n  const getUserId = useCallback(() => {\n    if (isDemoMode) {\n      if (session?.user?.email) {\n        // Create consistent user ID from email\n        const emailHash = session.user.email.toLowerCase().replace(/[^a-z0-9]/g, ",
    ")\n  \n  // Format as (XXX) XXX-XXXX\n  if (cleaned.length === 10) {\n    const formatted = `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`\n    return extension ? `${formatted} ext. ${extension}` : formatted\n  }\n  \n  // If 11 digits (with country code)\n  if (cleaned.length === 11 && cleaned[0] === ": ")\n  \n  // Format as (XXX) XXX-XXXX\n  if (cleaned.length === 10) {\n    const formatted = `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`\n    return extension ? `${formatted} ext. ${extension}` : formatted\n  }\n  \n  // If 11 digits (with country code)\n  if (cleaned.length === 11 && cleaned[0] === ",
    "], // Mix of brand colors\n          scalar: 1.5,\n          ...defaults,\n        },\n      };\n\n      const config = configs[type];\n\n      if (origin) {\n        myConfetti({\n          ...config,\n          origin,\n        });\n      } else {\n        // Multiple bursts for bigger celebration\n        const count = type === ": "], // Mix of brand colors\n          scalar: 1.5,\n          ...defaults,\n        },\n      };\n\n      const config = configs[type];\n\n      if (origin) {\n        myConfetti({\n          ...config,\n          origin,\n        });\n      } else {\n        // Multiple bursts for bigger celebration\n        const count = type === ",
    " : String(value));\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    onBlur(field);\n    // Format the display value\n    if (value && value !== 0) {\n      setDisplayValue(formatNumberWithCommas(value));\n    }\n  };\n\n  // Typography classes based on priority\n  const isEmpty = !value || value === 0 || value === ": " : String(value));\n  };\n\n  const handleBlur = () => {\n    setIsFocused(false);\n    onBlur(field);\n    // Format the display value\n    if (value && value !== 0) {\n      setDisplayValue(formatNumberWithCommas(value));\n    }\n  };\n\n  // Typography classes based on priority\n  const isEmpty = !value || value === 0 || value === ",
    ",\n        message\n      })\n    })\n  }, [watchedValues, setError, clearErrors, form])\n\n  // Transform form data to calculation input format\n  const transformToCalculationInput = (data: CalculatorFormData): CalculationInput => {\n    const parseNumber = (value: string): number => {\n      return parseFloat(value.replace(/[,$%]/g, ": ",\n        message\n      })\n    })\n  }, [watchedValues, setError, clearErrors, form])\n\n  // Transform form data to calculation input format\n  const transformToCalculationInput = (data: CalculatorFormData): CalculationInput => {\n    const parseNumber = (value: string): number => {\n      return parseFloat(value.replace(/[,$%]/g, ",
    ",\n        metadata: {\n          metric,\n          value,\n          threshold,\n          exceedBy: value - threshold\n        }\n      }\n    )\n  }\n}\n\n/**\n * User action tracking\n */\nexport function trackUserAction(action: string, userId?: string, metadata?: Record<string, any>): void {\n  errorTracker.addBreadcrumb({\n    category: ": ",\n        metadata: {\n          metric,\n          value,\n          threshold,\n          exceedBy: value - threshold\n        }\n      }\n    )\n  }\n}\n\n/**\n * User action tracking\n */\nexport function trackUserAction(action: string, userId?: string, metadata?: Record<string, any>): void {\n  errorTracker.addBreadcrumb({\n    category: ",
    ",\n    min: {\n      value: VALIDATION_RULES.income.min,\n      message: `Minimum income is $${VALIDATION_RULES.income.min.toLocaleString()}`\n    },\n    max: {\n      value: VALIDATION_RULES.income.max,\n      message: `Maximum income is $${VALIDATION_RULES.income.max.toLocaleString()}`\n    }\n  },\n\n  monthlyExpenses: {\n    required: ": ",\n    min: {\n      value: VALIDATION_RULES.income.min,\n      message: `Minimum income is $${VALIDATION_RULES.income.min.toLocaleString()}`\n    },\n    max: {\n      value: VALIDATION_RULES.income.max,\n      message: `Maximum income is $${VALIDATION_RULES.income.max.toLocaleString()}`\n    }\n  },\n\n  monthlyExpenses: {\n    required: ",
    ",\n      ...options\n    };\n    \n    return new Intl.DateTimeFormat(locale, defaultOptions).format(date);\n  };\n\n  return {\n    formatCurrency,\n    formatPercentage,\n    formatNumber,\n    formatDate,\n    locale\n  };\n}\n\n// Static formatters for server-side usage\nexport function formatCurrencyStatic(value: number | undefined, locale = ": ",\n      ...options\n    };\n    \n    return new Intl.DateTimeFormat(locale, defaultOptions).format(date);\n  };\n\n  return {\n    formatCurrency,\n    formatPercentage,\n    formatNumber,\n    formatDate,\n    locale\n  };\n}\n\n// Static formatters for server-side usage\nexport function formatCurrencyStatic(value: number | undefined, locale = ",
    ")) {\n      const paymentMatch = error.message.match(/\\$(\\d+\\.?\\d*)/)\n      const interestMatch = error.message.match(/interest \\(\\$(\\d+\\.?\\d*)/)\n      return createErrorResponse(ErrorCode.NEGATIVE_AMORTIZATION, {\n        payment: paymentMatch?.[1],\n        interest: interestMatch?.[1]\n      })\n    }\n\n    if (error.message.includes(": ")) {\n      const paymentMatch = error.message.match(/\\$(\\d+\\.?\\d*)/)\n      const interestMatch = error.message.match(/interest \\(\\$(\\d+\\.?\\d*)/)\n      return createErrorResponse(ErrorCode.NEGATIVE_AMORTIZATION, {\n        payment: paymentMatch?.[1],\n        interest: interestMatch?.[1]\n      })\n    }\n\n    if (error.message.includes(",
    "] as const;\n      \n      for (const variant of variants) {\n        const { container } = render(\n          <Alert variant={variant}>\n            This is a {variant} alert message.\n          </Alert>\n        );\n        \n        const results = await axe(container);\n        expect(results).toHaveNoViolations();\n      }\n    });\n\n    it(": "] as const;\n      \n      for (const variant of variants) {\n        const { container } = render(\n          <Alert variant={variant}>\n            This is a {variant} alert message.\n          </Alert>\n        );\n        \n        const results = await axe(container);\n        expect(results).toHaveNoViolations();\n      }\n    });\n\n    it(",
    " // Error 6: Empty name\n      }\n\n      const result = validateCalculatorInput(multipleErrorsInput)\n\n      expect(result.isValid).toBe(false)\n      expect(result.errors.length).toBeGreaterThanOrEqual(5) // Should have multiple errors\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ": " // Error 6: Empty name\n      }\n\n      const result = validateCalculatorInput(multipleErrorsInput)\n\n      expect(result.isValid).toBe(false)\n      expect(result.errors.length).toBeGreaterThanOrEqual(5) // Should have multiple errors\n      expect(result.errors).toEqual(expect.arrayContaining([\n        expect.objectContaining({ field: ",
    ");\n    \n    // Focus each element and verify focus indicators\n    [button, input, link].forEach(element => {\n      element.focus();\n      expect(element).toHaveFocus();\n      \n      // Check for focus ring classes or CSS properties\n      const computedStyle = getComputedStyle(element);\n      const hasOutline = computedStyle.outline !== ": ");\n    \n    // Focus each element and verify focus indicators\n    [button, input, link].forEach(element => {\n      element.focus();\n      expect(element).toHaveFocus();\n      \n      // Check for focus ring classes or CSS properties\n      const computedStyle = getComputedStyle(element);\n      const hasOutline = computedStyle.outline !== ",
    ">Your expenses exceed your net income. Consider reducing expenses or the HELOC strategy may not be suitable.</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Property Information Section */}\n      <Card variant=": ">Your expenses exceed your net income. Consider reducing expenses or the HELOC strategy may not be suitable.</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Property Information Section */}\n      <Card variant=",
    ",\n      ...defaultValues\n    }\n  })\n\n  const { \n    register, \n    handleSubmit, \n    formState: { errors, isValid, touchedFields, isValidating },\n    watch,\n    setValue,\n    trigger,\n    setError,\n    clearErrors\n  } = form\n\n  // Watch key fields for cross-validation\n  const watchedValues = useWatch({\n    control: form.control,\n    name: [": ",\n      ...defaultValues\n    }\n  })\n\n  const { \n    register, \n    handleSubmit, \n    formState: { errors, isValid, touchedFields, isValidating },\n    watch,\n    setValue,\n    trigger,\n    setError,\n    clearErrors\n  } = form\n\n  // Watch key fields for cross-validation\n  const watchedValues = useWatch({\n    control: form.control,\n    name: [",
    ") {\n      setFormData(prev => ({\n        ...prev,\n        [field]: numericValue\n      }))\n    }\n\n    const error = validateField(field, numericValue || 0)\n    setErrors(prev => ({\n      ...prev,\n      [field]: error\n    }))\n  }, [formData, validateField])\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    addDebugLog(": ") {\n      setFormData(prev => ({\n        ...prev,\n        [field]: numericValue\n      }))\n    }\n\n    const error = validateField(field, numericValue || 0)\n    setErrors(prev => ({\n      ...prev,\n      [field]: error\n    }))\n  }, [formData, validateField])\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    addDebugLog(",
    "\n    const years = Math.floor(value / 12)\n    const months = value % 12\n    if (years === 0) return `${months} mo`\n    if (months === 0) return `${years} yr`\n    return `${years} yr ${months} mo`\n  }\n\n  const copyToClipboard = async () => {\n    const summaryText = `Input Summary${timestamp ? ` (as of ${new Date(timestamp).toLocaleTimeString()})` : ": "\n    const years = Math.floor(value / 12)\n    const months = value % 12\n    if (years === 0) return `${months} mo`\n    if (months === 0) return `${years} yr`\n    return `${years} yr ${months} mo`\n  }\n\n  const copyToClipboard = async () => {\n    const summaryText = `Input Summary${timestamp ? ` (as of ${new Date(timestamp).toLocaleTimeString()})` : ",
    ", {\n          credit: processedData.helocAvailableCredit,\n          limit: processedData.helocLimit\n        })\n      }\n\n      // HELOC limit cannot equal initial draw\n      if (processedData.helocLimit && processedData.helocAvailableCredit && processedData.helocLimit === processedData.helocAvailableCredit) {\n        newErrors.helocAvailableCredit = ": ", {\n          credit: processedData.helocAvailableCredit,\n          limit: processedData.helocLimit\n        })\n      }\n\n      // HELOC limit cannot equal initial draw\n      if (processedData.helocLimit && processedData.helocAvailableCredit && processedData.helocLimit === processedData.helocAvailableCredit) {\n        newErrors.helocAvailableCredit = ",
    ": result.reset.toString()\n        }\n      }\n    )\n  }\n  \n  return null // No rate limit hit, continue processing\n}\n\n/**\n * Rate limit headers for successful responses\n */\nexport function getRateLimitHeaders(\n  request: NextRequest,\n  rateLimiter: (req: NextRequest) => any\n): Record<string, string> {\n  const result = rateLimiter(request)\n  \n  return {\n    ": ": result.reset.toString()\n        }\n      }\n    )\n  }\n  \n  return null // No rate limit hit, continue processing\n}\n\n/**\n * Rate limit headers for successful responses\n */\nexport function getRateLimitHeaders(\n  request: NextRequest,\n  rateLimiter: (req: NextRequest) => any\n): Record<string, string> {\n  const result = rateLimiter(request)\n  \n  return {\n    ",
    "\n    }, { status: 500 })\n  }\n}\n\n// GET /api/scenario/[id]/share - Get sharing status for a scenario\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const session = await auth()\n    if (!session?.user?.id) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: ": "\n    }, { status: 500 })\n  }\n}\n\n// GET /api/scenario/[id]/share - Get sharing status for a scenario\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const session = await auth()\n    if (!session?.user?.id) {\n      return NextResponse.json<ApiResponse>({\n        success: false,\n        error: ",
    ", config.maxAge.toString())\n  }\n  \n  return response\n}\n\n/**\n * Security middleware for API routes\n */\nexport function securityMiddleware(\n  request: NextRequest,\n  options: {\n    requireCSRF?: boolean\n    corsConfig?: CORSConfig\n    securityHeaders?: SecurityHeadersConfig\n  } = {}\n): NextResponse | null {\n  // Handle preflight requests\n  if (request.method === ": ", config.maxAge.toString())\n  }\n  \n  return response\n}\n\n/**\n * Security middleware for API routes\n */\nexport function securityMiddleware(\n  request: NextRequest,\n  options: {\n    requireCSRF?: boolean\n    corsConfig?: CORSConfig\n    securityHeaders?: SecurityHeadersConfig\n  } = {}\n): NextResponse | null {\n  // Handle preflight requests\n  if (request.method === ",
    ")\n    return\n  }\n\n  const printDocument = printWindow.document\n  printDocument.write(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>${title}</title>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, ": ")\n    return\n  }\n\n  const printDocument = printWindow.document\n  printDocument.write(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>${title}</title>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, ",
    "}\n\nIncome & Expenses:\n- Gross Income: ${formatCurrency(formData.monthlyGrossIncome)}/mo\n- Net Income: ${formatCurrency(formData.monthlyNetIncome)}/mo\n- Monthly Expenses: ${formatCurrency(formData.monthlyExpenses)}/mo\n- Discretionary Income: ${formatCurrency(formData.monthlyDiscretionaryIncome)}/mo\n\n${formData.scenarioName ? `Scenario: ${formData.scenarioName}` : ": "}\n\nIncome & Expenses:\n- Gross Income: ${formatCurrency(formData.monthlyGrossIncome)}/mo\n- Net Income: ${formatCurrency(formData.monthlyNetIncome)}/mo\n- Monthly Expenses: ${formatCurrency(formData.monthlyExpenses)}/mo\n- Discretionary Income: ${formatCurrency(formData.monthlyDiscretionaryIncome)}/mo\n\n${formData.scenarioName ? `Scenario: ${formData.scenarioName}` : ",
    ",\n    metadata: {\n      calculationType,\n      inputKeys: inputs ? Object.keys(inputs) : []\n    }\n  })\n}\n\n/**\n * Performance monitoring integration\n */\nexport function trackPerformanceIssue(metric: string, value: number, threshold: number): void {\n  if (value > threshold) {\n    errorTracker.captureMessage(\n      `Performance threshold exceeded: ${metric}`,\n      ": ",\n    metadata: {\n      calculationType,\n      inputKeys: inputs ? Object.keys(inputs) : []\n    }\n  })\n}\n\n/**\n * Performance monitoring integration\n */\nexport function trackPerformanceIssue(metric: string, value: number, threshold: number): void {\n  if (value > threshold) {\n    errorTracker.captureMessage(\n      `Performance threshold exceeded: ${metric}`,\n      ",
    ")\n          ])\n\n          if (assignmentsRes.ok && agentsRes.ok) {\n            const assignmentsData = await assignmentsRes.json()\n            const agentsData = await agentsRes.json()\n            \n            setAssignments(assignmentsData.data || [])\n            setAgents(agentsData.data || [])\n          }\n        }\n      } catch (error) {\n        console.error(": ")\n          ])\n\n          if (assignmentsRes.ok && agentsRes.ok) {\n            const assignmentsData = await assignmentsRes.json()\n            const agentsData = await agentsRes.json()\n            \n            setAssignments(assignmentsData.data || [])\n            setAgents(agentsData.data || [])\n          }\n        }\n      } catch (error) {\n        console.error(",
    ", async () => {\n    const user = userEvent.setup()\n    const onConfirm = jest.fn()\n    const onClose = jest.fn()\n\n    render(\n      <SecondConfirmationModal\n        isOpen={true}\n        onClose={onClose}\n        onConfirm={onConfirm}\n        confirmationText=\"DELETE ALL DATA\"\n      />\n    )\n\n    // Tab to input and type\n    await user.tab()\n    await user.keyboard(": ", async () => {\n    const user = userEvent.setup()\n    const onConfirm = jest.fn()\n    const onClose = jest.fn()\n\n    render(\n      <SecondConfirmationModal\n        isOpen={true}\n        onClose={onClose}\n        onConfirm={onConfirm}\n        confirmationText=\"DELETE ALL DATA\"\n      />\n    )\n\n    // Tab to input and type\n    await user.tab()\n    await user.keyboard(",
    ">\n                {ltvInfo.isMIPRequired\n                  ? `MIP/PMI required (LTV > 80%). Suggested: $${ltvInfo.suggestedMonthlyPMI}/month.`\n                  : 'MIP/PMI typically not required (LTV ≤ 80%).'\n                }\n              </p>\n              {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n                <button\n                  type=": ">\n                {ltvInfo.isMIPRequired\n                  ? `MIP/PMI required (LTV > 80%). Suggested: $${ltvInfo.suggestedMonthlyPMI}/month.`\n                  : 'MIP/PMI typically not required (LTV ≤ 80%).'\n                }\n              </p>\n              {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n                <button\n                  type=",
    "\n                      >\n                        Use Suggested: ${ltvInfo.suggestedMonthlyPMI}/mo\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Show PMI field conditionally or always with enhanced messaging */}\n            <EnhancedCurrencyInput\n              field=": "\n                      >\n                        Use Suggested: ${ltvInfo.suggestedMonthlyPMI}/mo\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Show PMI field conditionally or always with enhanced messaging */}\n            <EnhancedCurrencyInput\n              field=",
    "\n        }]\n      })\n\n      // Mock password comparison failure\n      mockBcrypt.compare.mockResolvedValueOnce(false)\n\n      const userResult = await mockQuery.mock.results[0].value\n      const user = userResult.rows[0]\n      const passwordValid = await mockBcrypt.compare(loginData.password, user.password_hash)\n      expect(passwordValid).toBe(false)\n    })\n  })\n\n  describe(": "\n        }]\n      })\n\n      // Mock password comparison failure\n      mockBcrypt.compare.mockResolvedValueOnce(false)\n\n      const userResult = await mockQuery.mock.results[0].value\n      const user = userResult.rows[0]\n      const passwordValid = await mockBcrypt.compare(loginData.password, user.password_hash)\n      expect(passwordValid).toBe(false)\n    })\n  })\n\n  describe(",
    ")\n        const assignmentData = storedAssignments ? JSON.parse(storedAssignments) : []\n\n        // Update or create assignments\n        selectedUsers.forEach(userId => {\n          const existingIndex = assignmentData.findIndex((a: any) => a.userId === userId)\n          const assignment = {\n            userId,\n            agentId: selectedAgentId,\n            assignmentType: ": ")\n        const assignmentData = storedAssignments ? JSON.parse(storedAssignments) : []\n\n        // Update or create assignments\n        selectedUsers.forEach(userId => {\n          const existingIndex = assignmentData.findIndex((a: any) => a.userId === userId)\n          const assignment = {\n            userId,\n            agentId: selectedAgentId,\n            assignmentType: ",
    ">\n              {ltvInfo.isMIPRequired\n                ? `MIP/PMI is required when LTV exceeds 80%. Suggested: $${ltvInfo.suggestedMonthlyPMI}/month.`\n                : 'MIP/PMI is typically not required when LTV is 80% or below.'\n              }\n            </p>\n            {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n              <button\n                type=": ">\n              {ltvInfo.isMIPRequired\n                ? `MIP/PMI is required when LTV exceeds 80%. Suggested: $${ltvInfo.suggestedMonthlyPMI}/month.`\n                : 'MIP/PMI is typically not required when LTV is 80% or below.'\n              }\n            </p>\n            {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n              <button\n                type=",
    ", () => {\n      const redLum = getLuminance({ r: 255, g: 0, b: 0 });\n      const greenLum = getLuminance({ r: 0, g: 255, b: 0 });\n      const blueLum = getLuminance({ r: 0, g: 0, b: 255 });\n      \n      // Green should have highest luminance due to eye sensitivity\n      expect(greenLum).toBeGreaterThan(redLum);\n      expect(greenLum).toBeGreaterThan(blueLum);\n    });\n  });\n\n  describe(": ", () => {\n      const redLum = getLuminance({ r: 255, g: 0, b: 0 });\n      const greenLum = getLuminance({ r: 0, g: 255, b: 0 });\n      const blueLum = getLuminance({ r: 0, g: 0, b: 255 });\n      \n      // Green should have highest luminance due to eye sensitivity\n      expect(greenLum).toBeGreaterThan(redLum);\n      expect(greenLum).toBeGreaterThan(blueLum);\n    });\n  });\n\n  describe(",
    "\n              }\n              value={formData.pmiMonthly || 0}\n              error={errors.pmiMonthly}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder={\n                ltvInfo.canCalculateLTV && ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0\n                  ? `e.g. $${ltvInfo.suggestedMonthlyPMI}`\n                  : ": "\n              }\n              value={formData.pmiMonthly || 0}\n              error={errors.pmiMonthly}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              placeholder={\n                ltvInfo.canCalculateLTV && ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0\n                  ? `e.g. $${ltvInfo.suggestedMonthlyPMI}`\n                  : ",
    ";\n        document.body.appendChild(canvas);\n      }\n\n      const myConfetti = confetti.create(canvas, {\n        resize: true,\n        useWorker: true\n      });\n\n      const defaults = {\n        startVelocity: 30,\n        spread: 360,\n        ticks: 60,\n        disableForReducedMotion: true,\n      };\n\n      const configs = {\n        success: {\n          particleCount: 100,\n          colors: [": ";\n        document.body.appendChild(canvas);\n      }\n\n      const myConfetti = confetti.create(canvas, {\n        resize: true,\n        useWorker: true\n      });\n\n      const defaults = {\n        startVelocity: 30,\n        spread: 360,\n        ticks: 60,\n        disableForReducedMotion: true,\n      };\n\n      const configs = {\n        success: {\n          particleCount: 100,\n          colors: [",
    ", () => {\n      // Temporarily override setItem to throw quota error after first call (for availability check)\n      const originalSetItem = localStorageMock.setItem\n      let callCount = 0\n      localStorageMock.setItem.mockImplementation((key: string, value: string) => {\n        callCount++\n        // Allow the first call (localStorage availability check)\n        if (callCount === 1 && key === ": ", () => {\n      // Temporarily override setItem to throw quota error after first call (for availability check)\n      const originalSetItem = localStorageMock.setItem\n      let callCount = 0\n      localStorageMock.setItem.mockImplementation((key: string, value: string) => {\n        callCount++\n        // Allow the first call (localStorage availability check)\n        if (callCount === 1 && key === ",
    ");\n  if (isAuthPage && !showOnAuthPages) {\n    return null;\n  }\n\n  // Determine if user is authenticated\n  const isAuthenticated = session?.user || isDemoMode;\n\n  const handleMobileMenuToggle = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const handleMobileMenuClose = () => {\n    setIsMobileMenuOpen(false);\n  };\n\n  // Navigation variant styles\n  const variantStyles = {\n    default: ": ");\n  if (isAuthPage && !showOnAuthPages) {\n    return null;\n  }\n\n  // Determine if user is authenticated\n  const isAuthenticated = session?.user || isDemoMode;\n\n  const handleMobileMenuToggle = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const handleMobileMenuClose = () => {\n    setIsMobileMenuOpen(false);\n  };\n\n  // Navigation variant styles\n  const variantStyles = {\n    default: ",
    ", async () => {\n    const user = userEvent.setup()\n    const onConfirm = jest.fn()\n    const onClose = jest.fn()\n\n    render(\n      <FirstConfirmationModal\n        isOpen={true}\n        onClose={onClose}\n        onConfirm={onConfirm}\n        title=\"Clear All Data\"\n        message=\"This will delete all your data. Continue?\"\n      />\n    )\n\n    // Click cancel\n    const cancelButton = screen.getByText(": ", async () => {\n    const user = userEvent.setup()\n    const onConfirm = jest.fn()\n    const onClose = jest.fn()\n\n    render(\n      <FirstConfirmationModal\n        isOpen={true}\n        onClose={onClose}\n        onConfirm={onConfirm}\n        title=\"Clear All Data\"\n        message=\"This will delete all your data. Continue?\"\n      />\n    )\n\n    // Click cancel\n    const cancelButton = screen.getByText(",
    ",\n    licenseStates: agent?.licenseStates || [],\n    specialties: agent?.specialties || [],\n    yearsExperience: agent?.yearsExperience || 0,\n    isActive: agent?.isActive ?? true,\n    displayOrder: agent?.displayOrder || 0\n  })\n\n  const handleChange = (field: keyof Agent, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const handleArrayChange = (field: ": ",\n    licenseStates: agent?.licenseStates || [],\n    specialties: agent?.specialties || [],\n    yearsExperience: agent?.yearsExperience || 0,\n    isActive: agent?.isActive ?? true,\n    displayOrder: agent?.displayOrder || 0\n  })\n\n  const handleChange = (field: keyof Agent, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const handleArrayChange = (field: ",
    ", async () => {\n      const { container } = render(\n        <Card>\n          <Card.Header>\n            <Card.Title>Test Card</Card.Title>\n          </Card.Header>\n          <Card.Content>\n            <p>This is test content for the card.</p>\n          </Card.Content>\n        </Card>\n      );\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it(": ", async () => {\n      const { container } = render(\n        <Card>\n          <Card.Header>\n            <Card.Title>Test Card</Card.Title>\n          </Card.Header>\n          <Card.Content>\n            <p>This is test content for the card.</p>\n          </Card.Content>\n        </Card>\n      );\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it(",
    " },\n  ];\n  \n  const isDangerous = dangerousCombinations.some(combo => \n    bg.includes(combo.bg) && text.includes(combo.text)\n  );\n  \n  if (isDangerous) {\n    issues.push(`Dangerous combination: ${bg} background with ${text} text may be unreadable`);\n    const safeOptions = getSafeTextColors(bg);\n    if (safeOptions.length > 0) {\n      suggestions.push(`Try these text colors instead: ${safeOptions.join(": " },\n  ];\n  \n  const isDangerous = dangerousCombinations.some(combo => \n    bg.includes(combo.bg) && text.includes(combo.text)\n  );\n  \n  if (isDangerous) {\n    issues.push(`Dangerous combination: ${bg} background with ${text} text may be unreadable`);\n    const safeOptions = getSafeTextColors(bg);\n    if (safeOptions.length > 0) {\n      suggestions.push(`Try these text colors instead: ${safeOptions.join(",
    " : String(value));\n    }\n  }, [value, isFocused]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    setDisplayValue(inputValue);\n    onChange(field, inputValue);\n  };\n\n  const handleFocus = () => setIsFocused(true);\n  const handleBlur = () => {\n    setIsFocused(false);\n    onBlur(field);\n  };\n\n  const isEmpty = !value || value === 0 || value === ": " : String(value));\n    }\n  }, [value, isFocused]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    setDisplayValue(inputValue);\n    onChange(field, inputValue);\n  };\n\n  const handleFocus = () => setIsFocused(true);\n  const handleBlur = () => {\n    setIsFocused(false);\n    onBlur(field);\n  };\n\n  const isEmpty = !value || value === 0 || value === ",
    ")} (Net Income: $${input.monthlyNetIncome.toLocaleString()} - Expenses: $${input.monthlyExpenses.toLocaleString()}). This is the amount available for accelerating your mortgage payoff.`\n      })\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  }\n}\n\nexport function validateCalculatorInputs(input: CalculatorValidationInput): ValidationResult {\n  const errors: ValidationError[] = []\n\n  console.log(": ")} (Net Income: $${input.monthlyNetIncome.toLocaleString()} - Expenses: $${input.monthlyExpenses.toLocaleString()}). This is the amount available for accelerating your mortgage payoff.`\n      })\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  }\n}\n\nexport function validateCalculatorInputs(input: CalculatorValidationInput): ValidationResult {\n  const errors: ValidationError[] = []\n\n  console.log(",
    ", debugInfo)\n      return debugInfo\n    }\n  }\n\n  const debugInfo: LTVDebugInfo = {\n    loanAmount,\n    propertyValue,\n    calculationSteps: steps,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  }\n\n  // Use warning level for missing inputs (expected on form load), error for other failures\n  const logLevel = (loanAmount == null || propertyValue == null) ? ": ", debugInfo)\n      return debugInfo\n    }\n  }\n\n  const debugInfo: LTVDebugInfo = {\n    loanAmount,\n    propertyValue,\n    calculationSteps: steps,\n    errors: errors.length > 0 ? errors : undefined,\n    warnings: warnings.length > 0 ? warnings : undefined\n  }\n\n  // Use warning level for missing inputs (expected on form load), error for other failures\n  const logLevel = (loanAmount == null || propertyValue == null) ? ",
    ",\n    min: {\n      value: VALIDATION_RULES.termMonths.min,\n      message: `Minimum term is ${VALIDATION_RULES.termMonths.min} months`\n    },\n    max: {\n      value: VALIDATION_RULES.termMonths.max,\n      message: `Maximum term is ${VALIDATION_RULES.termMonths.max} months`\n    },\n    validate: {\n      wholeNumber: (value: string) => {\n        const numValue = parseFloat(value)\n        return Number.isInteger(numValue) || ": ",\n    min: {\n      value: VALIDATION_RULES.termMonths.min,\n      message: `Minimum term is ${VALIDATION_RULES.termMonths.min} months`\n    },\n    max: {\n      value: VALIDATION_RULES.termMonths.max,\n      message: `Maximum term is ${VALIDATION_RULES.termMonths.max} months`\n    },\n    validate: {\n      wholeNumber: (value: string) => {\n        const numValue = parseFloat(value)\n        return Number.isInteger(numValue) || ",
    "ll just log the token\n    console.log(`Email verification token for ${email}: ${emailVerificationToken}`)\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        id: newUser.id,\n        email: newUser.email,\n        firstName: newUser.first_name,\n        lastName: newUser.last_name,\n        createdAt: newUser.created_at,\n        emailVerified: newUser.email_verified\n      },\n      message: ": "ll just log the token\n    console.log(`Email verification token for ${email}: ${emailVerificationToken}`)\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        id: newUser.id,\n        email: newUser.email,\n        firstName: newUser.first_name,\n        lastName: newUser.last_name,\n        createdAt: newUser.created_at,\n        emailVerified: newUser.email_verified\n      },\n      message: ",
    ", () => {\n      render(\n        <Card>\n          <Card.Header>\n            <Card.Title>Main Title</Card.Title>\n            <Card.Description>Card description</Card.Description>\n          </Card.Header>\n          <Card.Content>\n            <h3>Section Title</h3>\n            <p>Section content</p>\n          </Card.Content>\n        </Card>\n      );\n      \n      // Verify heading hierarchy\n      const title = screen.getByText(": ", () => {\n      render(\n        <Card>\n          <Card.Header>\n            <Card.Title>Main Title</Card.Title>\n            <Card.Description>Card description</Card.Description>\n          </Card.Header>\n          <Card.Content>\n            <h3>Section Title</h3>\n            <p>Section content</p>\n          </Card.Content>\n        </Card>\n      );\n      \n      // Verify heading hierarchy\n      const title = screen.getByText(",
    ", logMessage, debugInfo)\n  return debugInfo\n}\n\nexport function debugFormValidation(\n  formName: string,\n  fieldName: string,\n  fieldValue: any,\n  validationErrors: string[],\n  ltvInfo?: LTVDebugInfo\n): FormDebugInfo {\n  const debugInfo: FormDebugInfo = {\n    formName,\n    fieldName,\n    fieldValue,\n    validationErrors,\n    ltvInfo,\n    timestamp: new Date().toISOString()\n  }\n\n  const level = validationErrors.length > 0 ? ": ", logMessage, debugInfo)\n  return debugInfo\n}\n\nexport function debugFormValidation(\n  formName: string,\n  fieldName: string,\n  fieldValue: any,\n  validationErrors: string[],\n  ltvInfo?: LTVDebugInfo\n): FormDebugInfo {\n  const debugInfo: FormDebugInfo = {\n    formName,\n    fieldName,\n    fieldValue,\n    validationErrors,\n    ltvInfo,\n    timestamp: new Date().toISOString()\n  }\n\n  const level = validationErrors.length > 0 ? ",
    ", sendError)\n      })\n    }\n\n    return errorId\n  }\n\n  /**\n   * Send error report to external service (e.g., Sentry, Bugsnag)\n   */\n  private async sendToExternalService(errorReport: ErrorReport): Promise<void> {\n    const endpoint = process.env.ERROR_TRACKING_ENDPOINT\n    const apiKey = process.env.ERROR_TRACKING_API_KEY\n\n    if (!endpoint || !apiKey) {\n      return\n    }\n\n    try {\n      await fetch(endpoint, {\n        method: ": ", sendError)\n      })\n    }\n\n    return errorId\n  }\n\n  /**\n   * Send error report to external service (e.g., Sentry, Bugsnag)\n   */\n  private async sendToExternalService(errorReport: ErrorReport): Promise<void> {\n    const endpoint = process.env.ERROR_TRACKING_ENDPOINT\n    const apiKey = process.env.ERROR_TRACKING_API_KEY\n\n    if (!endpoint || !apiKey) {\n      return\n    }\n\n    try {\n      await fetch(endpoint, {\n        method: ",
    ")\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setSuccess(null)\n\n    try {\n      setSaving(true)\n      \n      if (isDemoMode) {\n        // In demo mode, simulate password change\n        await new Promise(resolve => setTimeout(resolve, 1000)) // Simulate network delay\n        setPasswordForm({\n          currentPassword: ": ")\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setSuccess(null)\n\n    try {\n      setSaving(true)\n      \n      if (isDemoMode) {\n        // In demo mode, simulate password change\n        await new Promise(resolve => setTimeout(resolve, 1000)) // Simulate network delay\n        setPasswordForm({\n          currentPassword: ",
    ",\n    min: {\n      value: VALIDATION_RULES.monthlyPayment.min,\n      message: `Minimum payment is $${VALIDATION_RULES.monthlyPayment.min}`\n    },\n    max: {\n      value: VALIDATION_RULES.monthlyPayment.max,\n      message: `Maximum payment is $${VALIDATION_RULES.monthlyPayment.max.toLocaleString()}`\n    },\n    validate: {\n      reasonable: (value: string, formValues: any) => {\n        const payment = parseFloat(value.replace(/[,$]/g, ": ",\n    min: {\n      value: VALIDATION_RULES.monthlyPayment.min,\n      message: `Minimum payment is $${VALIDATION_RULES.monthlyPayment.min}`\n    },\n    max: {\n      value: VALIDATION_RULES.monthlyPayment.max,\n      message: `Maximum payment is $${VALIDATION_RULES.monthlyPayment.max.toLocaleString()}`\n    },\n    validate: {\n      reasonable: (value: string, formValues: any) => {\n        const payment = parseFloat(value.replace(/[,$]/g, ",
    " },\n    ]\n\n    const agents = getDemoAgents()\n    \n    // Create export data\n    const exportData = demoUsers.map(user => {\n      const assignment = assignmentData.find((a: any) => a.userId === user.id)\n      const agent = assignment ? agents.find(ag => ag.id === assignment.agentId) : null\n      \n      return {\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        agentId: assignment?.agentId || ": " },\n    ]\n\n    const agents = getDemoAgents()\n    \n    // Create export data\n    const exportData = demoUsers.map(user => {\n      const assignment = assignmentData.find((a: any) => a.userId === user.id)\n      const agent = assignment ? agents.find(ag => ag.id === assignment.agentId) : null\n      \n      return {\n        userId: user.id,\n        userName: user.name,\n        userEmail: user.email,\n        agentId: assignment?.agentId || ",
    "\n      setError(errorMessage)\n\n      // Close the modal on error\n      setShowSecondConfirmation(false)\n    } finally {\n      setClearingData(false)\n    }\n  }\n\n  const handleSecondConfirmationCancel = () => {\n    setShowSecondConfirmation(false)\n  }\n\n  const handleSuccessModalClose = () => {\n    setShowSuccessModal(false)\n  }\n\n  const handleRegenerateSampleData = () => {\n    const userId = getUserId()\n    generateSampleScenarios(userId || ": "\n      setError(errorMessage)\n\n      // Close the modal on error\n      setShowSecondConfirmation(false)\n    } finally {\n      setClearingData(false)\n    }\n  }\n\n  const handleSecondConfirmationCancel = () => {\n    setShowSecondConfirmation(false)\n  }\n\n  const handleSuccessModalClose = () => {\n    setShowSuccessModal(false)\n  }\n\n  const handleRegenerateSampleData = () => {\n    const userId = getUserId()\n    generateSampleScenarios(userId || ",
    "\n})\n\n/**\n * Apply rate limiting to API response\n */\nexport function applyRateLimit(\n  request: NextRequest,\n  rateLimiter: (req: NextRequest) => any\n): Response | null {\n  const result = rateLimiter(request)\n  \n  if (!result.success) {\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: result.error,\n        retryAfter: result.retryAfter\n      }),\n      {\n        status: 429,\n        headers: {\n          ": "\n})\n\n/**\n * Apply rate limiting to API response\n */\nexport function applyRateLimit(\n  request: NextRequest,\n  rateLimiter: (req: NextRequest) => any\n): Response | null {\n  const result = rateLimiter(request)\n  \n  if (!result.success) {\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: result.error,\n        retryAfter: result.retryAfter\n      }),\n      {\n        status: 429,\n        headers: {\n          ",
    ">\n                      {ltvInfo.isMIPRequired\n                        ? `MIP/PMI is required when LTV exceeds 80%. Suggested: $${ltvInfo.suggestedMonthlyPMI}/month.`\n                        : 'MIP/PMI is typically not required when LTV is 80% or below.'\n                      }\n                    </p>\n                    {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n                      <button\n                        type=": ">\n                      {ltvInfo.isMIPRequired\n                        ? `MIP/PMI is required when LTV exceeds 80%. Suggested: $${ltvInfo.suggestedMonthlyPMI}/month.`\n                        : 'MIP/PMI is typically not required when LTV is 80% or below.'\n                      }\n                    </p>\n                    {ltvInfo.isMIPRequired && ltvInfo.suggestedMonthlyPMI > 0 && (\n                      <button\n                        type=",
    ");\n      } else {\n        setDisplayValue(formatNumberWithCommas(value));\n      }\n    }\n  }, [value, isFocused]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    setDisplayValue(inputValue);\n    \n    const numericValue = parseFormattedNumber(inputValue);\n    onChange(field, numericValue);\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n    setDisplayValue(value === 0 ? ": ");\n      } else {\n        setDisplayValue(formatNumberWithCommas(value));\n      }\n    }\n  }, [value, isFocused]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    setDisplayValue(inputValue);\n    \n    const numericValue = parseFormattedNumber(inputValue);\n    onChange(field, numericValue);\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n    setDisplayValue(value === 0 ? ",
    ") obj[header] = false\n      else if (value && !isNaN(Number(value))) obj[header] = Number(value)\n      else obj[header] = value\n    })\n    \n    data.push(obj)\n  }\n\n  return data\n}\n\n/**\n * Import agents from CSV file\n */\nexport async function importAgentsFromCSV(file: File): Promise<Partial<Agent>[]> {\n  const text = await file.text()\n  const data = parseCSV(text)\n  \n  // Map CSV data to Agent format\n  return data.map(row => ({\n    firstName: row[": ") obj[header] = false\n      else if (value && !isNaN(Number(value))) obj[header] = Number(value)\n      else obj[header] = value\n    })\n    \n    data.push(obj)\n  }\n\n  return data\n}\n\n/**\n * Import agents from CSV file\n */\nexport async function importAgentsFromCSV(file: File): Promise<Partial<Agent>[]> {\n  const text = await file.text()\n  const data = parseCSV(text)\n  \n  // Map CSV data to Agent format\n  return data.map(row => ({\n    firstName: row[",
    " }\n        }\n      )\n    }\n  }\n  \n  return null // Continue processing\n}\n\n/**\n * Content Security Policy nonce generator\n */\nexport function generateCSPNonce(): string {\n  const array = new Uint8Array(16)\n  crypto.getRandomValues(array)\n  return btoa(String.fromCharCode.apply(null, Array.from(array)))\n}\n\n/**\n * Secure cookie options\n */\nexport function getSecureCookieOptions() {\n  return {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === ": " }\n        }\n      )\n    }\n  }\n  \n  return null // Continue processing\n}\n\n/**\n * Content Security Policy nonce generator\n */\nexport function generateCSPNonce(): string {\n  const array = new Uint8Array(16)\n  crypto.getRandomValues(array)\n  return btoa(String.fromCharCode.apply(null, Array.from(array)))\n}\n\n/**\n * Secure cookie options\n */\nexport function getSecureCookieOptions() {\n  return {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === ",
    ")\n  \n  // Check if discretionary income calculation makes sense\n  const calculatedDiscretionary = income - expenses - payment\n  if (Math.abs(discretionary - calculatedDiscretionary) > 50) {\n    errors.monthlyDiscretionaryIncome = `Should be approximately $${calculatedDiscretionary.toFixed(0)}`\n  }\n  \n  // Check debt-to-income ratio\n  const totalDebt = payment + expenses\n  if (income > 0 && (totalDebt / income) > 0.5) {\n    errors.monthlyExpenses = ": ")\n  \n  // Check if discretionary income calculation makes sense\n  const calculatedDiscretionary = income - expenses - payment\n  if (Math.abs(discretionary - calculatedDiscretionary) > 50) {\n    errors.monthlyDiscretionaryIncome = `Should be approximately $${calculatedDiscretionary.toFixed(0)}`\n  }\n  \n  // Check debt-to-income ratio\n  const totalDebt = payment + expenses\n  if (income > 0 && (totalDebt / income) > 0.5) {\n    errors.monthlyExpenses = ",
    "}`\n    }\n  }\n\n  const handleDeleteScenario = (scenarioId: string) => {\n    setScenarioToDelete(scenarioId)\n    setShowDeleteConfirmation(true)\n  }\n\n  const handleDeleteConfirmationProceed = async () => {\n    if (!scenarioToDelete) return\n\n    try {\n      setDeletingScenario(true)\n\n      if (isDemoMode) {\n        // Delete from localStorage in demo mode\n        const userId = getUserId()\n        const success = deleteDemoScenario(scenarioToDelete, userId || ": "}`\n    }\n  }\n\n  const handleDeleteScenario = (scenarioId: string) => {\n    setScenarioToDelete(scenarioId)\n    setShowDeleteConfirmation(true)\n  }\n\n  const handleDeleteConfirmationProceed = async () => {\n    if (!scenarioToDelete) return\n\n    try {\n      setDeletingScenario(true)\n\n      if (isDemoMode) {\n        // Delete from localStorage in demo mode\n        const userId = getUserId()\n        const success = deleteDemoScenario(scenarioToDelete, userId || ",
    ")\n  }\n  \n  return (\n    <FormInput\n      {...props}\n      formatValue={formatPercentage}\n      parseValue={parsePercentage}\n      inputMode=\"decimal\"\n      placeholder=\"0.0%\"\n    />\n  )\n}\n\n// Specialized input for numeric values\nexport function NumericInput<T extends FieldValues>(props: FormInputProps<T>) {\n  const parseNumeric = (value: string): string => {\n    // Allow only numbers, decimal points, and negative signs\n    return value.replace(/[^0-9.-]/g, ": ")\n  }\n  \n  return (\n    <FormInput\n      {...props}\n      formatValue={formatPercentage}\n      parseValue={parsePercentage}\n      inputMode=\"decimal\"\n      placeholder=\"0.0%\"\n    />\n  )\n}\n\n// Specialized input for numeric values\nexport function NumericInput<T extends FieldValues>(props: FormInputProps<T>) {\n  const parseNumeric = (value: string): string => {\n    // Allow only numbers, decimal points, and negative signs\n    return value.replace(/[^0-9.-]/g, ",
    ",\n      maxAge: 60 * 60 * 24 // 24 hours\n    })\n    \n    return response\n  }\n}\n\n/**\n * CORS configuration\n */\nexport interface CORSConfig {\n  origin?: string | string[] | boolean\n  methods?: string[]\n  allowedHeaders?: string[]\n  credentials?: boolean\n  maxAge?: number\n}\n\n/**\n * Apply CORS headers\n */\nexport function applyCORSHeaders(\n  request: NextRequest,\n  response: NextResponse,\n  config: CORSConfig = {}\n): NextResponse {\n  const origin = request.headers.get(": ",\n      maxAge: 60 * 60 * 24 // 24 hours\n    })\n    \n    return response\n  }\n}\n\n/**\n * CORS configuration\n */\nexport interface CORSConfig {\n  origin?: string | string[] | boolean\n  methods?: string[]\n  allowedHeaders?: string[]\n  credentials?: boolean\n  maxAge?: number\n}\n\n/**\n * Apply CORS headers\n */\nexport function applyCORSHeaders(\n  request: NextRequest,\n  response: NextResponse,\n  config: CORSConfig = {}\n): NextResponse {\n  const origin = request.headers.get(",
    ",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          lastLogin: new Date().toISOString(),\n          emailVerified: true\n        }\n        \n        setProfile(mockProfile)\n        setProfileForm({\n          firstName: mockProfile.firstName,\n          lastName: mockProfile.lastName,\n          email: mockProfile.email\n        })\n      } else {\n        // Production mode - fetch from API\n        const response = await fetch(": ",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          lastLogin: new Date().toISOString(),\n          emailVerified: true\n        }\n        \n        setProfile(mockProfile)\n        setProfileForm({\n          firstName: mockProfile.firstName,\n          lastName: mockProfile.lastName,\n          email: mockProfile.email\n        })\n      } else {\n        // Production mode - fetch from API\n        const response = await fetch(",
    ")}`);\n    }\n  }\n  \n  return {\n    isValid: issues.length === 0,\n    issues,\n    suggestions\n  };\n}\n\n/**\n * Runtime assertion for safe color combinations\n * Throws in development, logs warning in production\n */\nexport function assertSafeContrast(\n  foreground: string,\n  background: string,\n  context?: string\n): void {\n  const result = validateContrast(foreground, background);\n  \n  if (!result.isAccessible) {\n    const message = `Contrast issue ${context ? `in ${context}` : ": ")}`);\n    }\n  }\n  \n  return {\n    isValid: issues.length === 0,\n    issues,\n    suggestions\n  };\n}\n\n/**\n * Runtime assertion for safe color combinations\n * Throws in development, logs warning in production\n */\nexport function assertSafeContrast(\n  foreground: string,\n  background: string,\n  context?: string\n): void {\n  const result = validateContrast(foreground, background);\n  \n  if (!result.isAccessible) {\n    const message = `Contrast issue ${context ? `in ${context}` : ",
    ");\n\n  // Refs for focus management\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const cancelButtonRef = React.useRef<HTMLButtonElement>(null);\n\n  const isValid = inputValue.trim() === confirmationText;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setInputValue(value);\n    \n    // Clear error when user starts typing correctly\n    if (error && value.trim() === confirmationText) {\n      setError(": ");\n\n  // Refs for focus management\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const cancelButtonRef = React.useRef<HTMLButtonElement>(null);\n\n  const isValid = inputValue.trim() === confirmationText;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setInputValue(value);\n    \n    // Clear error when user starts typing correctly\n    if (error && value.trim() === confirmationText) {\n      setError(",
    ",\n      message: `Available credit ($${input.helocAvailableCredit.toLocaleString()}) cannot exceed your HELOC limit ($${input.helocLimit.toLocaleString()}). Please check your HELOC statement for the correct amounts.`\n    })\n  }\n\n  // Note: Removed mortgage vs property value check - underwater mortgages are valid scenarios\n\n  // Validate scenario name if provided\n  if (input.scenarioName !== undefined && input.scenarioName.trim().length === 0) {\n    errors.push({\n      field: ": ",\n      message: `Available credit ($${input.helocAvailableCredit.toLocaleString()}) cannot exceed your HELOC limit ($${input.helocLimit.toLocaleString()}). Please check your HELOC statement for the correct amounts.`\n    })\n  }\n\n  // Note: Removed mortgage vs property value check - underwater mortgages are valid scenarios\n\n  // Validate scenario name if provided\n  if (input.scenarioName !== undefined && input.scenarioName.trim().length === 0) {\n    errors.push({\n      field: ",
    "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z": "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z",
    ")\n      }\n\n      const data = await response.json()\n      if (data.success) {\n        if (enable && data.data.shareUrl) {\n          setShareUrl(data.data.shareUrl)\n          setShareModalOpen(true)\n        }\n\n        // Update local state\n        setScenarios(prev => prev.map(s =>\n          s.id === scenarioId\n            ? { ...s, is_public: data.data.isPublic, public_share_token: data.data.shareToken }\n            : s\n        ))\n      } else {\n        throw new Error(data.error || ": ")\n      }\n\n      const data = await response.json()\n      if (data.success) {\n        if (enable && data.data.shareUrl) {\n          setShareUrl(data.data.shareUrl)\n          setShareModalOpen(true)\n        }\n\n        // Update local state\n        setScenarios(prev => prev.map(s =>\n          s.id === scenarioId\n            ? { ...s, is_public: data.data.isPublic, public_share_token: data.data.shareToken }\n            : s\n        ))\n      } else {\n        throw new Error(data.error || ",
    ",\n    min: {\n      value: VALIDATION_RULES.interestRate.min * 100, // Convert to percentage\n      message: `Minimum rate is ${(VALIDATION_RULES.interestRate.min * 100).toFixed(1)}%`\n    },\n    max: {\n      value: VALIDATION_RULES.interestRate.max * 100, // Convert to percentage  \n      message: `Maximum rate is ${(VALIDATION_RULES.interestRate.max * 100).toFixed(1)}%`\n    },\n    validate: {\n      realistic: (value: string) => {\n        const numValue = parseFloat(value)\n        if (isNaN(numValue)) return ": ",\n    min: {\n      value: VALIDATION_RULES.interestRate.min * 100, // Convert to percentage\n      message: `Minimum rate is ${(VALIDATION_RULES.interestRate.min * 100).toFixed(1)}%`\n    },\n    max: {\n      value: VALIDATION_RULES.interestRate.max * 100, // Convert to percentage  \n      message: `Maximum rate is ${(VALIDATION_RULES.interestRate.max * 100).toFixed(1)}%`\n    },\n    validate: {\n      realistic: (value: string) => {\n        const numValue = parseFloat(value)\n        if (isNaN(numValue)) return ",
    ")\n\n      // Mock last login update\n      mockQuery.mockResolvedValueOnce({ rows: [] })\n\n      // Test login logic\n      const userResult = await mockQuery.mock.results[0].value\n      expect(userResult.rows.length).toBe(1)\n\n      const user = userResult.rows[0]\n      const passwordValid = await mockBcrypt.compare(loginData.password, user.password_hash)\n      expect(passwordValid).toBe(true)\n\n      const token = mockJwt.sign(\n        { userId: user.id, email: user.email },\n        process.env.JWT_SECRET,\n        { expiresIn: ": ")\n\n      // Mock last login update\n      mockQuery.mockResolvedValueOnce({ rows: [] })\n\n      // Test login logic\n      const userResult = await mockQuery.mock.results[0].value\n      expect(userResult.rows.length).toBe(1)\n\n      const user = userResult.rows[0]\n      const passwordValid = await mockBcrypt.compare(loginData.password, user.password_hash)\n      expect(passwordValid).toBe(true)\n\n      const token = mockJwt.sign(\n        { userId: user.id, email: user.email },\n        process.env.JWT_SECRET,\n        { expiresIn: ",
    ").toLowerCase()\n    errors.push({\n      field: fieldName,\n      message: `Please enter a valid number for ${friendlyName}`\n    })\n    return errors\n  }\n\n  if (numValue < rules.min || numValue > rules.max) {\n    errors.push({\n      field: fieldName,\n      message: rules.message\n    })\n  }\n\n  return errors\n}\n\nexport function validatePercentage(\n  value: any,\n  fieldName: string,\n  required: boolean = true\n): ValidationError[] {\n  const errors: ValidationError[] = []\n\n  if (required && (value === undefined || value === null || value === ": ").toLowerCase()\n    errors.push({\n      field: fieldName,\n      message: `Please enter a valid number for ${friendlyName}`\n    })\n    return errors\n  }\n\n  if (numValue < rules.min || numValue > rules.max) {\n    errors.push({\n      field: fieldName,\n      message: rules.message\n    })\n  }\n\n  return errors\n}\n\nexport function validatePercentage(\n  value: any,\n  fieldName: string,\n  required: boolean = true\n): ValidationError[] {\n  const errors: ValidationError[] = []\n\n  if (required && (value === undefined || value === null || value === ",
    ")\n  }\n  \n  return (\n    <FormInput\n      {...props}\n      formatValue={formatCurrency}\n      parseValue={parseCurrency}\n      inputMode=\"numeric\"\n      placeholder=\"$0\"\n    />\n  )\n}\n\n// Specialized input for percentage values\nexport function PercentageInput<T extends FieldValues>(props: FormInputProps<T>) {\n  const formatPercentage = (value: string): string => {\n    const num = parseFloat(value)\n    if (isNaN(num)) return value\n    return `${num}%`\n  }\n  \n  const parsePercentage = (value: string): string => {\n    return value.replace(/%/g, ": ")\n  }\n  \n  return (\n    <FormInput\n      {...props}\n      formatValue={formatCurrency}\n      parseValue={parseCurrency}\n      inputMode=\"numeric\"\n      placeholder=\"$0\"\n    />\n  )\n}\n\n// Specialized input for percentage values\nexport function PercentageInput<T extends FieldValues>(props: FormInputProps<T>) {\n  const formatPercentage = (value: string): string => {\n    const num = parseFloat(value)\n    if (isNaN(num)) return value\n    return `${num}%`\n  }\n  \n  const parsePercentage = (value: string): string => {\n    return value.replace(/%/g, ",
    ")\n    }\n  }\n\n  const handleComparisonToggle = (scenarioId: string) => {\n    setSelectedForComparison(prev => {\n      if (prev.includes(scenarioId)) {\n        return prev.filter(id => id !== scenarioId)\n      } else if (prev.length < 3) {\n        return [...prev, scenarioId]\n      } else {\n        // Replace the first selected scenario\n        return [prev[1], prev[2], scenarioId]\n      }\n    })\n  }\n\n  const goToComparison = () => {\n    if (selectedForComparison.length >= 2) {\n      const params = new URLSearchParams({\n        scenarios: selectedForComparison.join(": ")\n    }\n  }\n\n  const handleComparisonToggle = (scenarioId: string) => {\n    setSelectedForComparison(prev => {\n      if (prev.includes(scenarioId)) {\n        return prev.filter(id => id !== scenarioId)\n      } else if (prev.length < 3) {\n        return [...prev, scenarioId]\n      } else {\n        // Replace the first selected scenario\n        return [prev[1], prev[2], scenarioId]\n      }\n    })\n  }\n\n  const goToComparison = () => {\n    if (selectedForComparison.length >= 2) {\n      const params = new URLSearchParams({\n        scenarios: selectedForComparison.join(",
    " && assignment.agentId) return false\n\n    return true\n  })\n\n  const handleSelectUser = (userId: string) => {\n    setSelectedUsers(prev => \n      prev.includes(userId) \n        ? prev.filter(id => id !== userId)\n        : [...prev, userId]\n    )\n  }\n\n  const handleSelectAll = () => {\n    if (selectedUsers.length === filteredAssignments.length) {\n      setSelectedUsers([])\n    } else {\n      setSelectedUsers(filteredAssignments.map(a => a.userId))\n    }\n  }\n\n  const handleBulkAssign = async () => {\n    if (!selectedAgentId || selectedUsers.length === 0) {\n      alert(": " && assignment.agentId) return false\n\n    return true\n  })\n\n  const handleSelectUser = (userId: string) => {\n    setSelectedUsers(prev => \n      prev.includes(userId) \n        ? prev.filter(id => id !== userId)\n        : [...prev, userId]\n    )\n  }\n\n  const handleSelectAll = () => {\n    if (selectedUsers.length === filteredAssignments.length) {\n      setSelectedUsers([])\n    } else {\n      setSelectedUsers(filteredAssignments.map(a => a.userId))\n    }\n  }\n\n  const handleBulkAssign = async () => {\n    if (!selectedAgentId || selectedUsers.length === 0) {\n      alert(",
    ");\n      } else {\n        setDisplayValue(formatNumberWithCommas(value));\n      }\n    }\n  }, [value, isFocused]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    setDisplayValue(inputValue);\n    \n    // Remove commas and convert to number for internal handling\n    const numericValue = parseFormattedNumber(inputValue);\n    onChange(field, numericValue);\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n    // Show unformatted value during editing for better UX\n    setDisplayValue(value === 0 ? ": ");\n      } else {\n        setDisplayValue(formatNumberWithCommas(value));\n      }\n    }\n  }, [value, isFocused]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    setDisplayValue(inputValue);\n    \n    // Remove commas and convert to number for internal handling\n    const numericValue = parseFormattedNumber(inputValue);\n    onChange(field, numericValue);\n  };\n\n  const handleFocus = () => {\n    setIsFocused(true);\n    // Show unformatted value during editing for better UX\n    setDisplayValue(value === 0 ? ",
    "\n        }\n        return true\n      }\n    }\n  },\n\n  helocLimit: {\n    min: {\n      value: VALIDATION_RULES.helocLimit.min,\n      message: `Minimum HELOC limit is $${VALIDATION_RULES.helocLimit.min.toLocaleString()}`\n    },\n    max: {\n      value: VALIDATION_RULES.helocLimit.max,\n      message: `Maximum HELOC limit is $${VALIDATION_RULES.helocLimit.max.toLocaleString()}`\n    },\n    validate: {\n      reasonable: (value: string, formValues: any) => {\n        if (!value) return true // Optional field\n        \n        const helocLimit = parseFloat(value.replace(/[,$]/g, ": "\n        }\n        return true\n      }\n    }\n  },\n\n  helocLimit: {\n    min: {\n      value: VALIDATION_RULES.helocLimit.min,\n      message: `Minimum HELOC limit is $${VALIDATION_RULES.helocLimit.min.toLocaleString()}`\n    },\n    max: {\n      value: VALIDATION_RULES.helocLimit.max,\n      message: `Maximum HELOC limit is $${VALIDATION_RULES.helocLimit.max.toLocaleString()}`\n    },\n    validate: {\n      reasonable: (value: string, formValues: any) => {\n        if (!value) return true // Optional field\n        \n        const helocLimit = parseFloat(value.replace(/[,$]/g, ",
    ", error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadData()\n  }, [])\n\n  // Filter assignments\n  const filteredAssignments = assignments.filter(assignment => {\n    // Apply search filter\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase()\n      if (!assignment.userName.toLowerCase().includes(search) &&\n          !assignment.userEmail.toLowerCase().includes(search) &&\n          !(assignment.agentName && assignment.agentName.toLowerCase().includes(search))) {\n        return false\n      }\n    }\n\n    // Apply status filter\n    if (filterType === ": ", error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadData()\n  }, [])\n\n  // Filter assignments\n  const filteredAssignments = assignments.filter(assignment => {\n    // Apply search filter\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase()\n      if (!assignment.userName.toLowerCase().includes(search) &&\n          !assignment.userEmail.toLowerCase().includes(search) &&\n          !(assignment.agentName && assignment.agentName.toLowerCase().includes(search))) {\n        return false\n      }\n    }\n\n    // Apply status filter\n    if (filterType === ",
    ")\n      }\n\n      // Discretionary income validation\n      if (processedData.monthlyNetIncome && processedData.monthlyExpenses && processedData.monthlyDiscretionaryIncome) {\n        const calculatedDiscretionary = processedData.monthlyNetIncome - processedData.monthlyExpenses\n        const tolerance = 50\n        if (Math.abs(processedData.monthlyDiscretionaryIncome - calculatedDiscretionary) > tolerance) {\n          newErrors.monthlyDiscretionaryIncome = `Discretionary income should equal net income minus expenses ($${calculatedDiscretionary.toLocaleString()})`\n          addDebugLog(": ")\n      }\n\n      // Discretionary income validation\n      if (processedData.monthlyNetIncome && processedData.monthlyExpenses && processedData.monthlyDiscretionaryIncome) {\n        const calculatedDiscretionary = processedData.monthlyNetIncome - processedData.monthlyExpenses\n        const tolerance = 50\n        if (Math.abs(processedData.monthlyDiscretionaryIncome - calculatedDiscretionary) > tolerance) {\n          newErrors.monthlyDiscretionaryIncome = `Discretionary income should equal net income minus expenses ($${calculatedDiscretionary.toLocaleString()})`\n          addDebugLog(",
    ";\n  \n  let recommendation: string | undefined;\n  if (!isAccessible) {\n    const needed = thresholds[level];\n    recommendation = `Contrast ratio ${ratio.toFixed(2)}:1 is below ${level} standard (${needed}:1). ` +\n      `Consider using darker text on light backgrounds or lighter text on dark backgrounds.`;\n  }\n  \n  return {\n    ratio: Math.round(ratio * 100) / 100,\n    isAccessible,\n    level: achievedLevel,\n    recommendation\n  };\n}\n\n/**\n * Pre-validated safe color combinations from the design system\n */\nexport const SAFE_COMBINATIONS: Record<string, string[]> = {\n  // Primary colors\n  ": ";\n  \n  let recommendation: string | undefined;\n  if (!isAccessible) {\n    const needed = thresholds[level];\n    recommendation = `Contrast ratio ${ratio.toFixed(2)}:1 is below ${level} standard (${needed}:1). ` +\n      `Consider using darker text on light backgrounds or lighter text on dark backgrounds.`;\n  }\n  \n  return {\n    ratio: Math.round(ratio * 100) / 100,\n    isAccessible,\n    level: achievedLevel,\n    recommendation\n  };\n}\n\n/**\n * Pre-validated safe color combinations from the design system\n */\nexport const SAFE_COMBINATIONS: Record<string, string[]> = {\n  // Primary colors\n  ",
    ")\n      })\n      router.push(`/compare?${params.toString()}`)\n    }\n  }\n\n  // Clear all demo data handlers\n  const handleClearAllDataClick = () => {\n    setShowFirstConfirmation(true)\n  }\n\n  const handleFirstConfirmationProceed = () => {\n    setShowFirstConfirmation(false)\n    setShowSecondConfirmation(true)\n  }\n\n  const handleFirstConfirmationCancel = () => {\n    setShowFirstConfirmation(false)\n  }\n\n  const handleSecondConfirmationProceed = async () => {\n    try {\n      setClearingData(true)\n\n      // Clear all demo scenarios\n      const userId = getUserId()\n      clearDemoScenarios(userId || ": ")\n      })\n      router.push(`/compare?${params.toString()}`)\n    }\n  }\n\n  // Clear all demo data handlers\n  const handleClearAllDataClick = () => {\n    setShowFirstConfirmation(true)\n  }\n\n  const handleFirstConfirmationProceed = () => {\n    setShowFirstConfirmation(false)\n    setShowSecondConfirmation(true)\n  }\n\n  const handleFirstConfirmationCancel = () => {\n    setShowFirstConfirmation(false)\n  }\n\n  const handleSecondConfirmationProceed = async () => {\n    try {\n      setClearingData(true)\n\n      // Clear all demo scenarios\n      const userId = getUserId()\n      clearDemoScenarios(userId || ",
    "\n  }\n\n  /**\n   * Generate tags for error categorization\n   */\n  private generateTags(error: Error, context: ErrorContext): string[] {\n    const tags: string[] = []\n\n    // Error type tags\n    tags.push(`error.type:${error.name}`)\n\n    // Environment tags\n    if (process.env.NODE_ENV) {\n      tags.push(`env:${process.env.NODE_ENV}`)\n    }\n\n    // Component tags\n    if (context.component) {\n      tags.push(`component:${context.component}`)\n    }\n\n    // Action tags\n    if (context.action) {\n      tags.push(`action:${context.action}`)\n    }\n\n    // User tags\n    if (context.userId) {\n      tags.push(": "\n  }\n\n  /**\n   * Generate tags for error categorization\n   */\n  private generateTags(error: Error, context: ErrorContext): string[] {\n    const tags: string[] = []\n\n    // Error type tags\n    tags.push(`error.type:${error.name}`)\n\n    // Environment tags\n    if (process.env.NODE_ENV) {\n      tags.push(`env:${process.env.NODE_ENV}`)\n    }\n\n    // Component tags\n    if (context.component) {\n      tags.push(`component:${context.component}`)\n    }\n\n    // Action tags\n    if (context.action) {\n      tags.push(`action:${context.action}`)\n    }\n\n    // User tags\n    if (context.userId) {\n      tags.push(",
    ", () => {\n      const loanAmount = 350000\n      const propertyValue = 500000\n\n      // Calculate LTV\n      const ltvResult = safeLTVCalculation(loanAmount, propertyValue)\n      expect(ltvResult.success).toBe(true)\n      expect(ltvResult.ltvRatio).toBe(70) // 350k/500k = 70%\n\n      // Check if MIP required\n      const mipRequired = isMIPRequired(ltvResult.ltvRatio)\n      expect(mipRequired).toBe(false) // 70% <= 80%\n\n      // Calculate suggested PMI\n      const suggestedPMI = calculateSuggestedMonthlyPMI(loanAmount, ltvResult.ltvRatio)\n      expect(suggestedPMI).toBe(0) // No PMI required\n    })\n\n    it(": ", () => {\n      const loanAmount = 350000\n      const propertyValue = 500000\n\n      // Calculate LTV\n      const ltvResult = safeLTVCalculation(loanAmount, propertyValue)\n      expect(ltvResult.success).toBe(true)\n      expect(ltvResult.ltvRatio).toBe(70) // 350k/500k = 70%\n\n      // Check if MIP required\n      const mipRequired = isMIPRequired(ltvResult.ltvRatio)\n      expect(mipRequired).toBe(false) // 70% <= 80%\n\n      // Calculate suggested PMI\n      const suggestedPMI = calculateSuggestedMonthlyPMI(loanAmount, ltvResult.ltvRatio)\n      expect(suggestedPMI).toBe(0) // No PMI required\n    })\n\n    it(",
    "\n  }\n]\n\n// Get dummy user account for demo mode\nexport function getDummyUserAccount(email: string, password: string) {\n  // First, try to find exact match\n  const exactMatch = DUMMY_USERS.find(user => \n    user.email === email && user.password === password\n  )\n  \n  if (exactMatch) {\n    return {\n      id: exactMatch.id,\n      email: exactMatch.email,\n      name: exactMatch.name,\n      firstName: exactMatch.firstName,\n      lastName: exactMatch.lastName,\n      emailVerified: true\n    }\n  }\n  \n  // If no exact match, create a user based on email hash for consistency\n  const emailHash = email.toLowerCase().replace(/[^a-z0-9]/g, ": "\n  }\n]\n\n// Get dummy user account for demo mode\nexport function getDummyUserAccount(email: string, password: string) {\n  // First, try to find exact match\n  const exactMatch = DUMMY_USERS.find(user => \n    user.email === email && user.password === password\n  )\n  \n  if (exactMatch) {\n    return {\n      id: exactMatch.id,\n      email: exactMatch.email,\n      name: exactMatch.name,\n      firstName: exactMatch.firstName,\n      lastName: exactMatch.lastName,\n      emailVerified: true\n    }\n  }\n  \n  // If no exact match, create a user based on email hash for consistency\n  const emailHash = email.toLowerCase().replace(/[^a-z0-9]/g, ",
    ")\n  }\n  \n  /**\n   * Validate CSRF token\n   */\n  static validateToken(request: NextRequest, expectedToken: string): boolean {\n    const headerToken = request.headers.get(this.CSRF_HEADER)\n    const cookieToken = request.cookies.get(this.CSRF_COOKIE)?.value\n    \n    if (!headerToken || !cookieToken) {\n      return false\n    }\n    \n    return headerToken === expectedToken && cookieToken === expectedToken\n  }\n  \n  /**\n   * Set CSRF token in response\n   */\n  static setToken(response: NextResponse, token: string): NextResponse {\n    response.cookies.set(this.CSRF_COOKIE, token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === ": ")\n  }\n  \n  /**\n   * Validate CSRF token\n   */\n  static validateToken(request: NextRequest, expectedToken: string): boolean {\n    const headerToken = request.headers.get(this.CSRF_HEADER)\n    const cookieToken = request.cookies.get(this.CSRF_COOKIE)?.value\n    \n    if (!headerToken || !cookieToken) {\n      return false\n    }\n    \n    return headerToken === expectedToken && cookieToken === expectedToken\n  }\n  \n  /**\n   * Set CSRF token in response\n   */\n  static setToken(response: NextResponse, token: string): NextResponse {\n    response.cookies.set(this.CSRF_COOKIE, token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === ",
    "\n        }\n        return true\n      }\n    }\n  },\n\n  helocInterestRate: {\n    min: {\n      value: VALIDATION_RULES.interestRate.min * 100,\n      message: `Minimum HELOC rate is ${(VALIDATION_RULES.interestRate.min * 100).toFixed(1)}%`\n    },\n    max: {\n      value: VALIDATION_RULES.interestRate.max * 100,\n      message: `Maximum HELOC rate is ${(VALIDATION_RULES.interestRate.max * 100).toFixed(1)}%`\n    },\n    validate: {\n      reasonable: (value: string, formValues: any) => {\n        if (!value) return true // Optional field\n        \n        const helocRate = parseFloat(value)\n        const mortgageRate = parseFloat(formValues.currentInterestRate || ": "\n        }\n        return true\n      }\n    }\n  },\n\n  helocInterestRate: {\n    min: {\n      value: VALIDATION_RULES.interestRate.min * 100,\n      message: `Minimum HELOC rate is ${(VALIDATION_RULES.interestRate.min * 100).toFixed(1)}%`\n    },\n    max: {\n      value: VALIDATION_RULES.interestRate.max * 100,\n      message: `Maximum HELOC rate is ${(VALIDATION_RULES.interestRate.max * 100).toFixed(1)}%`\n    },\n    validate: {\n      reasonable: (value: string, formValues: any) => {\n        if (!value) return true // Optional field\n        \n        const helocRate = parseFloat(value)\n        const mortgageRate = parseFloat(formValues.currentInterestRate || ",
    ")\n    }\n  }\n\n  isDebugEnabled(): boolean {\n    return this.isEnabled\n  }\n}\n\n// Singleton instance\nexport const debugLogger = new DebugLogger()\n\n// Utility functions for specific debugging scenarios\nexport function debugLTVCalculation(\n  loanAmount: number | string | null | undefined,\n  propertyValue: number | string | null | undefined,\n  result?: any\n): LTVDebugInfo {\n  const steps: string[] = []\n  const errors: string[] = []\n  const warnings: string[] = []\n\n  steps.push(`Input: Loan Amount = ${loanAmount}, Property Value = ${propertyValue}`)\n\n  // Validate inputs\n  if (loanAmount == null || propertyValue == null) {\n    const missingFields = []\n    if (loanAmount == null) missingFields.push(": ")\n    }\n  }\n\n  isDebugEnabled(): boolean {\n    return this.isEnabled\n  }\n}\n\n// Singleton instance\nexport const debugLogger = new DebugLogger()\n\n// Utility functions for specific debugging scenarios\nexport function debugLTVCalculation(\n  loanAmount: number | string | null | undefined,\n  propertyValue: number | string | null | undefined,\n  result?: any\n): LTVDebugInfo {\n  const steps: string[] = []\n  const errors: string[] = []\n  const warnings: string[] = []\n\n  steps.push(`Input: Loan Amount = ${loanAmount}, Property Value = ${propertyValue}`)\n\n  // Validate inputs\n  if (loanAmount == null || propertyValue == null) {\n    const missingFields = []\n    if (loanAmount == null) missingFields.push(",
    ")\n        // Convert demo scenarios to dashboard format\n        const formattedScenarios = demoScenarios.map(scenario => ({\n          id: scenario.id,\n          name: scenario.name,\n          description: scenario.description,\n          created_at: scenario.createdAt,\n          updated_at: scenario.updatedAt,\n          traditional_payoff_months: scenario.traditionalPayoffMonths,\n          heloc_payoff_months: scenario.helocPayoffMonths,\n          interest_saved: scenario.interestSaved,\n          is_public: scenario.isPublic,\n          public_share_token: scenario.publicShareToken\n        }))\n        setScenarios(formattedScenarios)\n      } else {\n        // Load from API in normal mode\n        const response = await fetch(": ")\n        // Convert demo scenarios to dashboard format\n        const formattedScenarios = demoScenarios.map(scenario => ({\n          id: scenario.id,\n          name: scenario.name,\n          description: scenario.description,\n          created_at: scenario.createdAt,\n          updated_at: scenario.updatedAt,\n          traditional_payoff_months: scenario.traditionalPayoffMonths,\n          heloc_payoff_months: scenario.helocPayoffMonths,\n          interest_saved: scenario.interestSaved,\n          is_public: scenario.isPublic,\n          public_share_token: scenario.publicShareToken\n        }))\n        setScenarios(formattedScenarios)\n      } else {\n        // Load from API in normal mode\n        const response = await fetch(",
    ",\n        loanAmount: 285000,\n        propertyValue: 300000,\n        expectedLTV: 95,\n        expectedPMI: 238,\n        expectedMIPRequired: true\n      }\n    ]\n\n    scenarios.forEach(scenario => {\n      it(`should handle ${scenario.name}`, () => {\n        const ltvResult = safeLTVCalculation(scenario.loanAmount, scenario.propertyValue)\n        expect(ltvResult.success).toBe(true)\n        expect(ltvResult.ltvRatio).toBe(scenario.expectedLTV)\n\n        const mipRequired = isMIPRequired(ltvResult.ltvRatio)\n        expect(mipRequired).toBe(scenario.expectedMIPRequired)\n\n        const suggestedPMI = calculateSuggestedMonthlyPMI(scenario.loanAmount, ltvResult.ltvRatio)\n        expect(suggestedPMI).toBe(scenario.expectedPMI)\n      })\n    })\n  })\n\n  describe(": ",\n        loanAmount: 285000,\n        propertyValue: 300000,\n        expectedLTV: 95,\n        expectedPMI: 238,\n        expectedMIPRequired: true\n      }\n    ]\n\n    scenarios.forEach(scenario => {\n      it(`should handle ${scenario.name}`, () => {\n        const ltvResult = safeLTVCalculation(scenario.loanAmount, scenario.propertyValue)\n        expect(ltvResult.success).toBe(true)\n        expect(ltvResult.ltvRatio).toBe(scenario.expectedLTV)\n\n        const mipRequired = isMIPRequired(ltvResult.ltvRatio)\n        expect(mipRequired).toBe(scenario.expectedMIPRequired)\n\n        const suggestedPMI = calculateSuggestedMonthlyPMI(scenario.loanAmount, ltvResult.ltvRatio)\n        expect(suggestedPMI).toBe(scenario.expectedPMI)\n      })\n    })\n  })\n\n  describe(",
    "\n  \n  return `${ip}:${userAgent.slice(0, 50)}`\n}\n\n/**\n * Rate limiting middleware\n */\nexport function rateLimit(config: RateLimitConfig) {\n  return (request: NextRequest) => {\n    const clientId = getClientId(request)\n    const now = Date.now()\n    const windowStart = now - config.windowMs\n    \n    // Initialize or get existing record\n    if (!store[clientId] || store[clientId].resetTime < now) {\n      store[clientId] = {\n        count: 0,\n        resetTime: now + config.windowMs\n      }\n    }\n    \n    const record = store[clientId]\n    \n    // Check if limit exceeded\n    if (record.count >= config.maxRequests) {\n      const resetIn = Math.ceil((record.resetTime - now) / 1000)\n      \n      return {\n        success: false,\n        error: config.message || ": "\n  \n  return `${ip}:${userAgent.slice(0, 50)}`\n}\n\n/**\n * Rate limiting middleware\n */\nexport function rateLimit(config: RateLimitConfig) {\n  return (request: NextRequest) => {\n    const clientId = getClientId(request)\n    const now = Date.now()\n    const windowStart = now - config.windowMs\n    \n    // Initialize or get existing record\n    if (!store[clientId] || store[clientId].resetTime < now) {\n      store[clientId] = {\n        count: 0,\n        resetTime: now + config.windowMs\n      }\n    }\n    \n    const record = store[clientId]\n    \n    // Check if limit exceeded\n    if (record.count >= config.maxRequests) {\n      const resetIn = Math.ceil((record.resetTime - now) / 1000)\n      \n      return {\n        success: false,\n        error: config.message || ",
    ", JSON.stringify(assignmentData))\n\n        // Update UI\n        const agent = agents.find(a => a.id === selectedAgentId)\n        setAssignments(prev => prev.map(assignment => {\n          if (selectedUsers.includes(assignment.userId)) {\n            return {\n              ...assignment,\n              agentId: selectedAgentId,\n              agentName: agent ? `${agent.firstName} ${agent.lastName}` : null,\n              assignedAt: new Date()\n            }\n          }\n          return assignment\n        }))\n\n        alert(`Successfully assigned ${selectedUsers.length} users to ${agent?.firstName} ${agent?.lastName}`)\n        setSelectedUsers([])\n        setSelectedAgentId(null)\n      } else {\n        // In production, update via API\n        const response = await fetch(": ", JSON.stringify(assignmentData))\n\n        // Update UI\n        const agent = agents.find(a => a.id === selectedAgentId)\n        setAssignments(prev => prev.map(assignment => {\n          if (selectedUsers.includes(assignment.userId)) {\n            return {\n              ...assignment,\n              agentId: selectedAgentId,\n              agentName: agent ? `${agent.firstName} ${agent.lastName}` : null,\n              assignedAt: new Date()\n            }\n          }\n          return assignment\n        }))\n\n        alert(`Successfully assigned ${selectedUsers.length} users to ${agent?.firstName} ${agent?.lastName}`)\n        setSelectedUsers([])\n        setSelectedAgentId(null)\n      } else {\n        // In production, update via API\n        const response = await fetch(",
    ", async () => {\n    const user = userEvent.setup()\n    const onConfirm = jest.fn()\n    const onClose = jest.fn()\n\n    // First confirmation modal\n    const { rerender } = render(\n      <FirstConfirmationModal\n        isOpen={true}\n        onClose={onClose}\n        onConfirm={() => {\n          onConfirm()\n          // Simulate moving to second confirmation\n          rerender(\n            <SecondConfirmationModal\n              isOpen={true}\n              onClose={onClose}\n              onConfirm={onConfirm}\n              confirmationText=\"DELETE ALL DATA\"\n            />\n          )\n        }}\n        title=\"Clear All Data\"\n        message=\"This will delete all your data. Continue?\"\n      />\n    )\n\n    // Click confirm on first modal\n    const firstConfirmButton = screen.getByText(": ", async () => {\n    const user = userEvent.setup()\n    const onConfirm = jest.fn()\n    const onClose = jest.fn()\n\n    // First confirmation modal\n    const { rerender } = render(\n      <FirstConfirmationModal\n        isOpen={true}\n        onClose={onClose}\n        onConfirm={() => {\n          onConfirm()\n          // Simulate moving to second confirmation\n          rerender(\n            <SecondConfirmationModal\n              isOpen={true}\n              onClose={onClose}\n              onConfirm={onConfirm}\n              confirmationText=\"DELETE ALL DATA\"\n            />\n          )\n        }}\n        title=\"Clear All Data\"\n        message=\"This will delete all your data. Continue?\"\n      />\n    )\n\n    // Click confirm on first modal\n    const firstConfirmButton = screen.getByText(",
    ")\n        \n        const calculated = income - expenses - payment\n        \n        if (Math.abs(discretionary - calculated) > 10) {\n          return `Discretionary income should be approximately $${calculated.toFixed(0)} (Income - Expenses - Mortgage Payment)`\n        }\n        return true\n      }\n    }\n  },\n\n  pmiMonthly: {\n    min: {\n      value: VALIDATION_RULES.pmiMonthly.min,\n      message: `Minimum MIP/PMI is $${VALIDATION_RULES.pmiMonthly.min}`\n    },\n    max: {\n      value: VALIDATION_RULES.pmiMonthly.max,\n      message: `Maximum MIP/PMI is $${VALIDATION_RULES.pmiMonthly.max.toLocaleString()}`\n    },\n    validate: {\n      ltvBased: (value: string, formValues: any) => {\n        if (!value) return true // Optional field when not required\n\n        const pmi = parseFloat(value.replace(/[,$]/g, ": ")\n        \n        const calculated = income - expenses - payment\n        \n        if (Math.abs(discretionary - calculated) > 10) {\n          return `Discretionary income should be approximately $${calculated.toFixed(0)} (Income - Expenses - Mortgage Payment)`\n        }\n        return true\n      }\n    }\n  },\n\n  pmiMonthly: {\n    min: {\n      value: VALIDATION_RULES.pmiMonthly.min,\n      message: `Minimum MIP/PMI is $${VALIDATION_RULES.pmiMonthly.min}`\n    },\n    max: {\n      value: VALIDATION_RULES.pmiMonthly.max,\n      message: `Maximum MIP/PMI is $${VALIDATION_RULES.pmiMonthly.max.toLocaleString()}`\n    },\n    validate: {\n      ltvBased: (value: string, formValues: any) => {\n        if (!value) return true // Optional field when not required\n\n        const pmi = parseFloat(value.replace(/[,$]/g, ",
    ");\n  }\n  return context;\n};\n\nexport interface FormProviderProps {\n  children: React.ReactNode;\n  form: UseFormValidationReturn;\n}\n\nexport const FormProvider: React.FC<FormProviderProps> = ({ children, form }) => {\n  return (\n    <FormContext.Provider value={form}>\n      {children}\n    </FormContext.Provider>\n  );\n};\n\n// Form field wrapper that automatically connects to form context\nexport interface ConnectedFieldProps {\n  name: string;\n  children: (fieldProps: {\n    value: any;\n    error: string | null;\n    onChange: (event: React.ChangeEvent<any>) => void;\n    onBlur: () => void;\n  }) => React.ReactNode;\n}\n\nexport const ConnectedField: React.FC<ConnectedFieldProps> = ({ name, children }) => {\n  const form = useFormContext();\n  \n  return (\n    <>\n      {children({\n        value: form.values[name] || ": ");\n  }\n  return context;\n};\n\nexport interface FormProviderProps {\n  children: React.ReactNode;\n  form: UseFormValidationReturn;\n}\n\nexport const FormProvider: React.FC<FormProviderProps> = ({ children, form }) => {\n  return (\n    <FormContext.Provider value={form}>\n      {children}\n    </FormContext.Provider>\n  );\n};\n\n// Form field wrapper that automatically connects to form context\nexport interface ConnectedFieldProps {\n  name: string;\n  children: (fieldProps: {\n    value: any;\n    error: string | null;\n    onChange: (event: React.ChangeEvent<any>) => void;\n    onBlur: () => void;\n  }) => React.ReactNode;\n}\n\nexport const ConnectedField: React.FC<ConnectedFieldProps> = ({ name, children }) => {\n  const form = useFormContext();\n  \n  return (\n    <>\n      {children({\n        value: form.values[name] || ",
    ")\n      }\n    }\n\n    return tags\n  }\n\n  /**\n   * Capture and report an error\n   */\n  captureError(error: Error, additionalContext?: Partial<ErrorContext>): string {\n    const errorId = `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    const fullContext: ErrorContext = {\n      ...this.context,\n      ...additionalContext,\n      timestamp: new Date().toISOString()\n    }\n\n    const errorReport: ErrorReport = {\n      id: errorId,\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n      context: fullContext,\n      fingerprint: this.generateFingerprint(error, fullContext),\n      severity: this.determineSeverity(error, fullContext),\n      tags: this.generateTags(error, fullContext),\n      breadcrumbs: [...this.breadcrumbs]\n    }\n\n    // Log the error\n    logger.error(": ")\n      }\n    }\n\n    return tags\n  }\n\n  /**\n   * Capture and report an error\n   */\n  captureError(error: Error, additionalContext?: Partial<ErrorContext>): string {\n    const errorId = `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    const fullContext: ErrorContext = {\n      ...this.context,\n      ...additionalContext,\n      timestamp: new Date().toISOString()\n    }\n\n    const errorReport: ErrorReport = {\n      id: errorId,\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n      context: fullContext,\n      fingerprint: this.generateFingerprint(error, fullContext),\n      severity: this.determineSeverity(error, fullContext),\n      tags: this.generateTags(error, fullContext),\n      breadcrumbs: [...this.breadcrumbs]\n    }\n\n    // Log the error\n    logger.error(",
    ",\n    field: params?.field,\n    ...params\n  })\n}\n\n// Helper function to create user-friendly error responses\nexport function createErrorResponse(code: ErrorCode, params?: any): ErrorDetails {\n  const errorTemplate = ERROR_MESSAGES[code]\n  if (!errorTemplate) {\n    return ERROR_MESSAGES[ErrorCode.INTERNAL_ERROR]()\n  }\n  return errorTemplate(params)\n}\n\n// Helper to extract error details from unknown errors\nexport function extractErrorDetails(error: unknown): ErrorDetails {\n  if (error instanceof CalculationError) {\n    return {\n      code: error.code,\n      message: error.message,\n      userMessage: error.userMessage,\n      suggestion: error.suggestion,\n      field: error.field,\n      value: error.value\n    }\n  }\n\n  if (error instanceof Error) {\n    // Check for specific error patterns\n    if (error.message.includes(": ",\n    field: params?.field,\n    ...params\n  })\n}\n\n// Helper function to create user-friendly error responses\nexport function createErrorResponse(code: ErrorCode, params?: any): ErrorDetails {\n  const errorTemplate = ERROR_MESSAGES[code]\n  if (!errorTemplate) {\n    return ERROR_MESSAGES[ErrorCode.INTERNAL_ERROR]()\n  }\n  return errorTemplate(params)\n}\n\n// Helper to extract error details from unknown errors\nexport function extractErrorDetails(error: unknown): ErrorDetails {\n  if (error instanceof CalculationError) {\n    return {\n      code: error.code,\n      message: error.message,\n      userMessage: error.userMessage,\n      suggestion: error.suggestion,\n      field: error.field,\n      value: error.value\n    }\n  }\n\n  if (error instanceof Error) {\n    // Check for specific error patterns\n    if (error.message.includes(",
    "\n      }\n    })\n\n    exportAssignmentsToCSV(exportData)\n  }\n\n  const handleImportAgents = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    setImporting(true)\n    \n    try {\n      const importedAgents = await importAgentsFromCSV(file)\n      \n      // In demo mode, merge with existing agents\n      const existingAgents = getDemoAgents()\n      const maxId = Math.max(...existingAgents.map(a => a.id || 0), 0)\n      \n      // Add imported agents with new IDs\n      const newAgents = importedAgents.map((agent, index) => ({\n        ...agent,\n        id: maxId + index + 1,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }))\n\n      // Save to localStorage\n      const allAgents = [...existingAgents, ...newAgents]\n      localStorage.setItem(": "\n      }\n    })\n\n    exportAssignmentsToCSV(exportData)\n  }\n\n  const handleImportAgents = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    setImporting(true)\n    \n    try {\n      const importedAgents = await importAgentsFromCSV(file)\n      \n      // In demo mode, merge with existing agents\n      const existingAgents = getDemoAgents()\n      const maxId = Math.max(...existingAgents.map(a => a.id || 0), 0)\n      \n      // Add imported agents with new IDs\n      const newAgents = importedAgents.map((agent, index) => ({\n        ...agent,\n        id: maxId + index + 1,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }))\n\n      // Save to localStorage\n      const allAgents = [...existingAgents, ...newAgents]\n      localStorage.setItem(",
    " ? 3 : 1;\n\n        const fire = (particleRatio: number, opts: any) => {\n          myConfetti({\n            ...config,\n            ...opts,\n            particleCount: Math.floor(config.particleCount * particleRatio),\n          });\n        };\n\n        if (count === 1) {\n          fire(1, {\n            spread: 26,\n            startVelocity: 55,\n          });\n        } else {\n          fire(0.25, {\n            spread: 26,\n            startVelocity: 55,\n          });\n\n          fire(0.2, {\n            spread: 60,\n          });\n\n          fire(0.35, {\n            spread: 100,\n            decay: 0.91,\n            scalar: 0.8,\n          });\n\n          fire(0.1, {\n            spread: 120,\n            startVelocity: 25,\n            decay: 0.92,\n            scalar: 1.2,\n          });\n\n          fire(0.1, {\n            spread: 120,\n            startVelocity: 45,\n          });\n        }\n      }\n    }).catch((error) => {\n      console.error(": " ? 3 : 1;\n\n        const fire = (particleRatio: number, opts: any) => {\n          myConfetti({\n            ...config,\n            ...opts,\n            particleCount: Math.floor(config.particleCount * particleRatio),\n          });\n        };\n\n        if (count === 1) {\n          fire(1, {\n            spread: 26,\n            startVelocity: 55,\n          });\n        } else {\n          fire(0.25, {\n            spread: 26,\n            startVelocity: 55,\n          });\n\n          fire(0.2, {\n            spread: 60,\n          });\n\n          fire(0.35, {\n            spread: 100,\n            decay: 0.91,\n            scalar: 0.8,\n          });\n\n          fire(0.1, {\n            spread: 120,\n            startVelocity: 25,\n            decay: 0.92,\n            scalar: 1.2,\n          });\n\n          fire(0.1, {\n            spread: 120,\n            startVelocity: 45,\n          });\n        }\n      }\n    }).catch((error) => {\n      console.error(",
    ")\n          const assignmentData = storedAssignments ? JSON.parse(storedAssignments) : []\n\n          // Create assignment records\n          const assignmentRecords: Assignment[] = demoUsers.map(user => {\n            const assignment = assignmentData.find((a: any) => a.userId === user.id)\n            const agent = assignment ? demoAgents.find(ag => ag.id === assignment.agentId) : null\n            \n            return {\n              userId: user.id,\n              userName: user.name,\n              userEmail: user.email,\n              agentId: assignment?.agentId || null,\n              agentName: agent ? `${agent.firstName} ${agent.lastName}` : null,\n              assignedAt: assignment?.assignedAt ? new Date(assignment.assignedAt) : null\n            }\n          })\n\n          setAssignments(assignmentRecords)\n        } else {\n          // In production, fetch from API\n          const [assignmentsRes, agentsRes] = await Promise.all([\n            fetch(": ")\n          const assignmentData = storedAssignments ? JSON.parse(storedAssignments) : []\n\n          // Create assignment records\n          const assignmentRecords: Assignment[] = demoUsers.map(user => {\n            const assignment = assignmentData.find((a: any) => a.userId === user.id)\n            const agent = assignment ? demoAgents.find(ag => ag.id === assignment.agentId) : null\n            \n            return {\n              userId: user.id,\n              userName: user.name,\n              userEmail: user.email,\n              agentId: assignment?.agentId || null,\n              agentName: agent ? `${agent.firstName} ${agent.lastName}` : null,\n              assignedAt: assignment?.assignedAt ? new Date(assignment.assignedAt) : null\n            }\n          })\n\n          setAssignments(assignmentRecords)\n        } else {\n          // In production, fetch from API\n          const [assignmentsRes, agentsRes] = await Promise.all([\n            fetch(",
    "],\n} as const;\n\n/**\n * Checks if a color combination is pre-validated as safe\n */\nexport function isSafeCombination(\n  background: keyof typeof SAFE_COMBINATIONS,\n  foreground: string\n): boolean {\n  const safeForgrounds = SAFE_COMBINATIONS[background];\n  return safeForgrounds ? safeForgrounds.includes(foreground) : false;\n}\n\n/**\n * Gets suggested safe text colors for a given background\n */\nexport function getSafeTextColors(background: keyof typeof SAFE_COMBINATIONS): string[] {\n  return SAFE_COMBINATIONS[background] || [];\n}\n\n/**\n * Validates if a Tailwind class combination is safe\n */\nexport function validateTailwindCombination(classes: string): {\n  isValid: boolean;\n  issues: string[];\n  suggestions: string[];\n} {\n  const issues: string[] = [];\n  const suggestions: string[] = [];\n  \n  // Extract background and text color classes\n  const bgMatch = classes.match(/bg-(\\w+-\\d+|\\w+)/g);\n  const textMatch = classes.match(/text-(\\w+-\\d+|\\w+)/g);\n  \n  if (!bgMatch || !textMatch) {\n    return { isValid: true, issues: [], suggestions: [] };\n  }\n  \n  const bg = bgMatch[0].replace(": "],\n} as const;\n\n/**\n * Checks if a color combination is pre-validated as safe\n */\nexport function isSafeCombination(\n  background: keyof typeof SAFE_COMBINATIONS,\n  foreground: string\n): boolean {\n  const safeForgrounds = SAFE_COMBINATIONS[background];\n  return safeForgrounds ? safeForgrounds.includes(foreground) : false;\n}\n\n/**\n * Gets suggested safe text colors for a given background\n */\nexport function getSafeTextColors(background: keyof typeof SAFE_COMBINATIONS): string[] {\n  return SAFE_COMBINATIONS[background] || [];\n}\n\n/**\n * Validates if a Tailwind class combination is safe\n */\nexport function validateTailwindCombination(classes: string): {\n  isValid: boolean;\n  issues: string[];\n  suggestions: string[];\n} {\n  const issues: string[] = [];\n  const suggestions: string[] = [];\n  \n  // Extract background and text color classes\n  const bgMatch = classes.match(/bg-(\\w+-\\d+|\\w+)/g);\n  const textMatch = classes.match(/text-(\\w+-\\d+|\\w+)/g);\n  \n  if (!bgMatch || !textMatch) {\n    return { isValid: true, issues: [], suggestions: [] };\n  }\n  \n  const bg = bgMatch[0].replace(",
    ")\n  return newScenario\n}\n\n// Get a specific scenario by ID for a specific user\nexport function getDemoScenario(id: string, userId?: string): DemoScenario | null {\n  const scenarios = getDemoScenarios(userId)\n  return scenarios.find(s => s.id === id) || null\n}\n\n// Update a scenario for a specific user\nexport function updateDemoScenario(id: string, updates: Partial<DemoScenario>, userId?: string): DemoScenario | null {\n  const scenarios = getDemoScenarios(userId)\n  const index = scenarios.findIndex(s => s.id === id)\n\n  if (index === -1) return null\n\n  scenarios[index] = {\n    ...scenarios[index],\n    ...updates,\n    updatedAt: new Date().toISOString()\n  }\n\n  saveDemoScenarios(scenarios, userId)\n  return scenarios[index]\n}\n\n// Delete a scenario for a specific user\nexport function deleteDemoScenario(id: string, userId?: string): boolean {\n  const scenarios = getDemoScenarios(userId)\n  const filteredScenarios = scenarios.filter(s => s.id !== id)\n\n  if (filteredScenarios.length === scenarios.length) {\n    return false // Scenario not found\n  }\n\n  saveDemoScenarios(filteredScenarios, userId)\n  return true\n}\n\n// Clear all scenarios for a specific user (for demo reset)\nexport function clearDemoScenarios(userId?: string): void {\n  if (!isLocalStorageAvailable()) {\n    throw new Error(": ")\n  return newScenario\n}\n\n// Get a specific scenario by ID for a specific user\nexport function getDemoScenario(id: string, userId?: string): DemoScenario | null {\n  const scenarios = getDemoScenarios(userId)\n  return scenarios.find(s => s.id === id) || null\n}\n\n// Update a scenario for a specific user\nexport function updateDemoScenario(id: string, updates: Partial<DemoScenario>, userId?: string): DemoScenario | null {\n  const scenarios = getDemoScenarios(userId)\n  const index = scenarios.findIndex(s => s.id === id)\n\n  if (index === -1) return null\n\n  scenarios[index] = {\n    ...scenarios[index],\n    ...updates,\n    updatedAt: new Date().toISOString()\n  }\n\n  saveDemoScenarios(scenarios, userId)\n  return scenarios[index]\n}\n\n// Delete a scenario for a specific user\nexport function deleteDemoScenario(id: string, userId?: string): boolean {\n  const scenarios = getDemoScenarios(userId)\n  const filteredScenarios = scenarios.filter(s => s.id !== id)\n\n  if (filteredScenarios.length === scenarios.length) {\n    return false // Scenario not found\n  }\n\n  saveDemoScenarios(filteredScenarios, userId)\n  return true\n}\n\n// Clear all scenarios for a specific user (for demo reset)\nexport function clearDemoScenarios(userId?: string): void {\n  if (!isLocalStorageAvailable()) {\n    throw new Error(",
    ")\n    } else {\n      const ltvRatio = (loan / value) * 100\n      steps.push(`LTV Calculation: (${loan} / ${value}) * 100 = ${ltvRatio.toFixed(2)}%`)\n\n      if (ltvRatio > 200) {\n        warnings.push(`Unusually high LTV ratio: ${ltvRatio.toFixed(2)}%`)\n      }\n\n      const debugInfo: LTVDebugInfo = {\n        loanAmount,\n        propertyValue,\n        ltvRatio,\n        isMIPRequired: ltvRatio > 80,\n        calculationSteps: steps,\n        errors: errors.length > 0 ? errors : undefined,\n        warnings: warnings.length > 0 ? warnings : undefined\n      }\n\n      // Calculate suggested PMI if required\n      if (ltvRatio > 80) {\n        let rate = 0\n        if (ltvRatio <= 85) rate = 0.005\n        else if (ltvRatio <= 90) rate = 0.0075\n        else if (ltvRatio <= 95) rate = 0.01\n        else rate = 0.0125\n\n        const suggestedMonthlyPMI = Math.round((loan * rate) / 12)\n        debugInfo.suggestedMonthlyPMI = suggestedMonthlyPMI\n\n        steps.push(`PMI Required: LTV ${ltvRatio.toFixed(2)}% > 80%`)\n        steps.push(`PMI Rate: ${(rate * 100).toFixed(2)}% annually`)\n        steps.push(`Suggested Monthly PMI: $${loan} * ${rate} / 12 = $${suggestedMonthlyPMI}`)\n      } else {\n        steps.push(`PMI Not Required: LTV ${ltvRatio.toFixed(2)}% ≤ 80%`)\n      }\n\n      debugLogger.log(": ")\n    } else {\n      const ltvRatio = (loan / value) * 100\n      steps.push(`LTV Calculation: (${loan} / ${value}) * 100 = ${ltvRatio.toFixed(2)}%`)\n\n      if (ltvRatio > 200) {\n        warnings.push(`Unusually high LTV ratio: ${ltvRatio.toFixed(2)}%`)\n      }\n\n      const debugInfo: LTVDebugInfo = {\n        loanAmount,\n        propertyValue,\n        ltvRatio,\n        isMIPRequired: ltvRatio > 80,\n        calculationSteps: steps,\n        errors: errors.length > 0 ? errors : undefined,\n        warnings: warnings.length > 0 ? warnings : undefined\n      }\n\n      // Calculate suggested PMI if required\n      if (ltvRatio > 80) {\n        let rate = 0\n        if (ltvRatio <= 85) rate = 0.005\n        else if (ltvRatio <= 90) rate = 0.0075\n        else if (ltvRatio <= 95) rate = 0.01\n        else rate = 0.0125\n\n        const suggestedMonthlyPMI = Math.round((loan * rate) / 12)\n        debugInfo.suggestedMonthlyPMI = suggestedMonthlyPMI\n\n        steps.push(`PMI Required: LTV ${ltvRatio.toFixed(2)}% > 80%`)\n        steps.push(`PMI Rate: ${(rate * 100).toFixed(2)}% annually`)\n        steps.push(`Suggested Monthly PMI: $${loan} * ${rate} / 12 = $${suggestedMonthlyPMI}`)\n      } else {\n        steps.push(`PMI Not Required: LTV ${ltvRatio.toFixed(2)}% ≤ 80%`)\n      }\n\n      debugLogger.log(",
    " + expanded);\n  }\n  \n  if (sanitized.length !== 6) return null;\n  \n  const result = /^([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(sanitized);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\n/**\n * Converts RGB color string to RGB values\n */\nexport function rgbStringToRgb(rgb: string): ColorRGB | null {\n  const match = rgb.match(/rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/);\n  if (!match) return null;\n  \n  return {\n    r: parseInt(match[1], 10),\n    g: parseInt(match[2], 10),\n    b: parseInt(match[3], 10)\n  };\n}\n\n/**\n * Calculates relative luminance of a color\n * Formula from WCAG 2.1 specification\n */\nexport function getLuminance(color: ColorRGB): number {\n  const { r, g, b } = color;\n  \n  const toLinear = (value: number): number => {\n    const normalized = value / 255;\n    return normalized <= 0.03928 \n      ? normalized / 12.92 \n      : Math.pow((normalized + 0.055) / 1.055, 2.4);\n  };\n  \n  return 0.2126 * toLinear(r) + 0.7152 * toLinear(g) + 0.0722 * toLinear(b);\n}\n\n/**\n * Calculates contrast ratio between two colors\n * Returns a value between 1 and 21\n */\nexport function getContrastRatio(color1: ColorRGB, color2: ColorRGB): number {\n  const lum1 = getLuminance(color1);\n  const lum2 = getLuminance(color2);\n  \n  const brightest = Math.max(lum1, lum2);\n  const darkest = Math.min(lum1, lum2);\n  \n  return (brightest + 0.05) / (darkest + 0.05);\n}\n\n/**\n * Validates contrast ratio against WCAG standards\n */\nexport function validateContrast(\n  foreground: string,\n  background: string,\n  textSize: TextSize = ": " + expanded);\n  }\n  \n  if (sanitized.length !== 6) return null;\n  \n  const result = /^([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(sanitized);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\n/**\n * Converts RGB color string to RGB values\n */\nexport function rgbStringToRgb(rgb: string): ColorRGB | null {\n  const match = rgb.match(/rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/);\n  if (!match) return null;\n  \n  return {\n    r: parseInt(match[1], 10),\n    g: parseInt(match[2], 10),\n    b: parseInt(match[3], 10)\n  };\n}\n\n/**\n * Calculates relative luminance of a color\n * Formula from WCAG 2.1 specification\n */\nexport function getLuminance(color: ColorRGB): number {\n  const { r, g, b } = color;\n  \n  const toLinear = (value: number): number => {\n    const normalized = value / 255;\n    return normalized <= 0.03928 \n      ? normalized / 12.92 \n      : Math.pow((normalized + 0.055) / 1.055, 2.4);\n  };\n  \n  return 0.2126 * toLinear(r) + 0.7152 * toLinear(g) + 0.0722 * toLinear(b);\n}\n\n/**\n * Calculates contrast ratio between two colors\n * Returns a value between 1 and 21\n */\nexport function getContrastRatio(color1: ColorRGB, color2: ColorRGB): number {\n  const lum1 = getLuminance(color1);\n  const lum2 = getLuminance(color2);\n  \n  const brightest = Math.max(lum1, lum2);\n  const darkest = Math.min(lum1, lum2);\n  \n  return (brightest + 0.05) / (darkest + 0.05);\n}\n\n/**\n * Validates contrast ratio against WCAG standards\n */\nexport function validateContrast(\n  foreground: string,\n  background: string,\n  textSize: TextSize = ",
    "t have a HELOC yet</li>\n      </ul>\n    </div>\n  `,\n  helocInterestRate: `\n    <div class=\"space-y-2\">\n      <p><strong>HELOC Interest Rate</strong></p>\n      <p>The current interest rate on your HELOC.</p>\n      <ul class=\"list-disc list-inside space-y-1 text-sm\">\n        <li>Usually variable and tied to prime rate</li>\n        <li>Typically higher than mortgage rates</li>\n        <li>Check your HELOC statement for current rate</li>\n      </ul>\n    </div>\n  `,\n  monthlyIncome: `\n    <div class=\"space-y-2\">\n      <p><strong>Monthly Gross Income</strong></p>\n      <p>Your total monthly income before taxes and deductions.</p>\n      <ul class=\"list-disc list-inside space-y-1 text-sm\">\n        <li>Include salary, bonuses, rental income, etc.</li>\n        <li>Use gross amount (before taxes)</li>\n        <li>Be conservative with variable income</li>\n      </ul>\n    </div>\n  `,\n  monthlyExpenses: `\n    <div class=\"space-y-2\">\n      <p><strong>Monthly Expenses</strong></p>\n      <p>All your monthly expenses EXCEPT your mortgage payment.</p>\n      <ul class=\"list-disc list-inside space-y-1 text-sm\">\n        <li>Include: utilities, food, car payments, insurance</li>\n        <li>Include: credit cards, other loans, subscriptions</li>\n        <li>Do NOT include your mortgage payment</li>\n      </ul>\n    </div>\n  `,\n  monthlyDiscretionaryIncome: `\n    <div class=\"space-y-2\">\n      <p><strong>Discretionary Income</strong></p>\n      <p>Money available for HELOC acceleration after all expenses.</p>\n      <ul class=\"list-disc list-inside space-y-1 text-sm\">\n        <li>Calculated as: Income - Expenses - Mortgage Payment</li>\n        <li>This amount will be used to pay down your mortgage faster</li>\n        <li>Higher amounts = faster payoff</li>\n      </ul>\n    </div>\n  `\n}\n\nexport function FormFieldWithTooltip({\n  name,\n  type = ": "t have a HELOC yet</li>\n      </ul>\n    </div>\n  `,\n  helocInterestRate: `\n    <div class=\"space-y-2\">\n      <p><strong>HELOC Interest Rate</strong></p>\n      <p>The current interest rate on your HELOC.</p>\n      <ul class=\"list-disc list-inside space-y-1 text-sm\">\n        <li>Usually variable and tied to prime rate</li>\n        <li>Typically higher than mortgage rates</li>\n        <li>Check your HELOC statement for current rate</li>\n      </ul>\n    </div>\n  `,\n  monthlyIncome: `\n    <div class=\"space-y-2\">\n      <p><strong>Monthly Gross Income</strong></p>\n      <p>Your total monthly income before taxes and deductions.</p>\n      <ul class=\"list-disc list-inside space-y-1 text-sm\">\n        <li>Include salary, bonuses, rental income, etc.</li>\n        <li>Use gross amount (before taxes)</li>\n        <li>Be conservative with variable income</li>\n      </ul>\n    </div>\n  `,\n  monthlyExpenses: `\n    <div class=\"space-y-2\">\n      <p><strong>Monthly Expenses</strong></p>\n      <p>All your monthly expenses EXCEPT your mortgage payment.</p>\n      <ul class=\"list-disc list-inside space-y-1 text-sm\">\n        <li>Include: utilities, food, car payments, insurance</li>\n        <li>Include: credit cards, other loans, subscriptions</li>\n        <li>Do NOT include your mortgage payment</li>\n      </ul>\n    </div>\n  `,\n  monthlyDiscretionaryIncome: `\n    <div class=\"space-y-2\">\n      <p><strong>Discretionary Income</strong></p>\n      <p>Money available for HELOC acceleration after all expenses.</p>\n      <ul class=\"list-disc list-inside space-y-1 text-sm\">\n        <li>Calculated as: Income - Expenses - Mortgage Payment</li>\n        <li>This amount will be used to pay down your mortgage faster</li>\n        <li>Higher amounts = faster payoff</li>\n      </ul>\n    </div>\n  `\n}\n\nexport function FormFieldWithTooltip({\n  name,\n  type = "
  }
}
